/* Generated by JSIL v0.7.9 build 16496. See http://jsil.org/ for more information. */ 
var $asm00 = JSIL.DeclareAssembly("HumanGraphicsPipelineXna, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm00, $asm00.TypeRef("HumanGraphicsPipelineXna.Program"), "Main", JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.String")])));

JSIL.DeclareNamespace("HumanGraphicsPipelineXna");
/* class HumanGraphicsPipelineXna.Scene */ 

(function Scene$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Scene_ThisBackToMenu)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Delegate)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Threading.Interlocked)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Color))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button_ThisOnClick)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button_ThisOnHold)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm06.TypeRef("System.Int32"), 
        $asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Boolean"), 
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Scene__ctor () {
    this.animating = false;
    this.drawGrid = false;
    this.state = 0;
    this.Init();
    this.DerivedInit();
  };

  function Scene_$lSetButtons$gb__0 (b) {
    this.animating = !this.animating;
    if (!this.animating) {
      this.buttonPlay.Button$text$value = "GO";
      (this.buttonPlay).SetColour($T01().get_DarkSlateBlue().MemberwiseClone());
    } else {
      this.buttonPlay.Button$text$value = "||";
      (this.buttonPlay).SetColour($T01().get_DarkSlateGray().MemberwiseClone());
    }
  };

  function Scene_$lSetButtons$gb__1 (b) {
    if (!(this.animating || ((this.animationCounter | 0) >= (this.animationCounterLimit | 0)))) {
      this.animationCounter = (((this.animationCounter | 0) + 1) | 0);
    }
  };

  function Scene_$lSetButtons$gb__2 (b) {
    if (!(this.animating || ((this.animationCounter | 0) >= (this.animationCounterLimit | 0)))) {
      this.animationCounter = (((this.animationCounter | 0) + 1) | 0);
    }
  };

  function Scene_$lSetButtons$gb__3 (b) {
    if (!(this.animating || ((this.animationCounter | 0) < 0))) {
      this.animationCounter = (((this.animationCounter | 0) - 1) | 0);
    }
  };

  function Scene_$lSetButtons$gb__4 (b) {
    if (!(this.animating || ((this.animationCounter | 0) < 0))) {
      this.animationCounter = (((this.animationCounter | 0) - 1) | 0);
    }
  };

  function Scene_$lSetButtons$gb__5 (b) {
    this.Init();
    this.DerivedInit();
  };

  function Scene_$lSetButtons$gb__6 (b) {
    this.BackToMenu();
  };

  function Scene_add_BackToMenu (value) {
    var thisBackToMenu = this.BackToMenu;

    do {
      var thisBackToMenu2 = thisBackToMenu;
      var value2 = $T03().Combine(thisBackToMenu2, value);
      thisBackToMenu = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "BackToMenu"), value2, thisBackToMenu2);
    } while (thisBackToMenu !== thisBackToMenu2);
  };

  function Scene_Draw (spriteBatch) {
    this.DrawGrid(spriteBatch);
    (this.buttonPrevious).Draw(spriteBatch);
    (this.buttonPlay).Draw(spriteBatch);
    (this.buttonNext).Draw(spriteBatch);
    (this.buttonReset).Draw(spriteBatch);
    (this.buttonBack).Draw(spriteBatch);
    this.DrawText(spriteBatch);
  };

  function Scene_DrawGrid (spriteBatch) {
    var $temp00, $temp01;
    $temp00 = new ($T06())();
    $temp01 = new ($T06())();
    if (this.drawGrid) {

      for (var i = 0; i <= ((($T08().get_viewportHeight() | 0) / ($T08().Globals$pixelSize$value | 0)) | 0); i = ((i + 1) | 0)) {
        spriteBatch.DrawRect(
          this.gridLine, 
          ($temp00._ctor(
              0, 
              Math.imul(i, ((($T08().get_viewportHeight() | 0) / ((($T08().get_viewportHeight() | 0) / ($T08().Globals$pixelSize$value | 0)) | 0)) | 0)), 
              $T08().get_viewportWidth(), 
              1
            ), 
            $temp00), 
          $T01().get_White()
        );
      }

      for (i = 0; i <= ((($T08().get_viewportWidth() | 0) / ($T08().Globals$pixelSize$value | 0)) | 0); i = ((i + 1) | 0)) {
        spriteBatch.DrawRect(
          this.gridLine, 
          ($temp01._ctor(
              Math.imul(i, ((($T08().get_viewportWidth() | 0) / ((($T08().get_viewportWidth() | 0) / ($T08().Globals$pixelSize$value | 0)) | 0)) | 0)), 
              0, 
              1, 
              $T08().get_viewportHeight()
            ), 
            $temp01), 
          $T01().get_White()
        );
      }
      spriteBatch.DrawRect(
        this.windowSpaceLine, 
        new ($T06())(((((($T08().get_viewportWidth() | 0) / 2) | 0) - 2) | 0), 0, 4, $T08().get_viewportHeight()), 
        $T01().get_White()
      );
      spriteBatch.DrawRect(
        this.windowSpaceLine, 
        new ($T06())(0, ((((($T08().get_viewportHeight() | 0) / 2) | 0) - 2) | 0), $T08().get_viewportWidth(), 4), 
        $T01().get_White()
      );
    }
  };

  function Scene_DrawText (spriteBatch) {
  };

  function Scene_Init () {
    this.animationCounter = -1;
    this.animationCounterLimit = 0;
    this.gridLine = $S00().Construct($T08().get_graphicsDevice(), 1, 1, false, $T0A().Color);
    var pixels = JSIL.Array.New($T01(), 1);

    for (var i = 0; i < 1; i = ((i + 1) | 0)) {
      pixels[i] = ($jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 100));
    }
    $S01().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.gridLine, pixels);
    this.windowSpaceLine = $S00().Construct($T08().get_graphicsDevice(), 1, 1, false, $T0A().Color);
    pixels[0] = ($jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 255));
    $S01().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.windowSpaceLine, pixels);
    this.SetButtons();
  };

  function Scene_NormalisePoints (vIn) {
    var normalisedX = +(((+vIn.X - 0) / +((($T08().get_viewportWidth() | 0) / 2 | 0)))) - 1;
    var normalisedY = -(+(((+vIn.Y - 0) / +((($T08().get_viewportHeight() | 0) / 2 | 0)))) - 1);
    return $S02().Construct(normalisedX, normalisedY);
  };

  function Scene_remove_BackToMenu (value) {
    var thisBackToMenu = this.BackToMenu;

    do {
      var thisBackToMenu2 = thisBackToMenu;
      var value2 = $T03().Remove(thisBackToMenu2, value);
      thisBackToMenu = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "BackToMenu"), value2, thisBackToMenu2);
    } while (thisBackToMenu !== thisBackToMenu2);
  };

  function Scene_SetButtons () {
    this.buttonNext = new ($T00())(">", $T0E().Fonts$font14$value, $S02().Construct(30, 30), $S02().Construct((+$T08().get_viewport().X - 40), (+$T08().get_viewport().Y - 70)), $T01().get_DarkOliveGreen().MemberwiseClone());
    this.buttonPrevious = new ($T00())("<", $T0E().Fonts$font14$value, $S02().Construct(30, 30), $S02().Construct((+$T08().get_viewport().X - 100), (+$T08().get_viewport().Y - 70)), $T01().get_DarkOliveGreen().MemberwiseClone());
    this.buttonPlay = new ($T00())("GO", $T0E().Fonts$font14$value, $S02().Construct(30, 30), $S02().Construct((+$T08().get_viewport().X - 70), (+$T08().get_viewport().Y - 70)), $T01().get_DarkSlateBlue().MemberwiseClone());
    this.buttonReset = new ($T00())("Reset", $T0E().Fonts$font14$value, $S02().Construct(90, 30), $S02().Construct((+$T08().get_viewport().X - 100), (+$T08().get_viewport().Y - 40)), $T01().get_DarkGreen().MemberwiseClone());
    this.buttonBack = new ($T00())("Back", $T0E().Fonts$font14$value, $S02().Construct(90, 30), $S02().Construct(+(($T08().get_viewportWidth() | 0) - 100), +(($T08().get_viewportHeight() | 0) - 100)), $T01().get_DarkRed().MemberwiseClone());
    (this.buttonPlay).add_OnClick($T0F().New(this, $thisType.prototype.$lSetButtons$gb__0));
    (this.buttonNext).add_OnClick($T0F().New(this, $thisType.prototype.$lSetButtons$gb__1));
    (this.buttonNext).add_OnHold($T10().New(this, $thisType.prototype.$lSetButtons$gb__2));
    (this.buttonPrevious).add_OnClick($T0F().New(this, $thisType.prototype.$lSetButtons$gb__3));
    (this.buttonPrevious).add_OnHold($T10().New(this, $thisType.prototype.$lSetButtons$gb__4));
    (this.buttonReset).add_OnClick($T0F().New(this, $thisType.prototype.$lSetButtons$gb__5));
    (this.buttonBack).add_OnClick($T0F().New(this, $thisType.prototype.$lSetButtons$gb__6));
  };

  function Scene_Update (gameTime) {
    this.StateChanges(gameTime);
    (this.buttonReset).Update(gameTime);
    (this.buttonBack).Update(gameTime);
    if ((this.state | 0) === 42) {
      (this.buttonPlay).Update(gameTime);
      (this.buttonNext).Update(gameTime);
      (this.buttonPrevious).Update(gameTime);
    }
    if (!(!this.animating || ((this.animationCounter | 0) >= (this.animationCounterLimit | 0)))) {
      this.animationCounter = (((this.animationCounter | 0) + 1) | 0);
    } else if (!(!this.animating || ((this.animationCounter | 0) < (this.animationCounterLimit | 0)))) {
      (this.buttonPlay).EmulateClick();
    }
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Scene", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Scene__ctor
    );

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__0", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Scene_$lSetButtons$gb__0
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__1", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Scene_$lSetButtons$gb__1
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__2", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Scene_$lSetButtons$gb__2
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__3", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Scene_$lSetButtons$gb__3
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Scene_$lSetButtons$gb__4
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__5", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Scene_$lSetButtons$gb__5
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__6", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Scene_$lSetButtons$gb__6
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "add_BackToMenu", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Scene+ThisBackToMenu")), 
      Scene_add_BackToMenu
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Scene_Draw
    );

    $.Method({Static:false, Public:false}, "DrawGrid", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Scene_DrawGrid
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DrawText", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Scene_DrawText
    );

    $.Method({Static:false, Public:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Scene_Init
    );

    $.Method({Static:false, Public:false}, "NormalisePoints", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Scene_NormalisePoints
    );

    $.Method({Static:false, Public:true }, "remove_BackToMenu", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Scene+ThisBackToMenu")), 
      Scene_remove_BackToMenu
    );

    $.Method({Static:false, Public:false}, "SetButtons", 
      JSIL.MethodSignature.Void, 
      Scene_SetButtons
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Scene_Update
    );

    $.Field({Static:false, Public:false}, "gridLine", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "windowSpaceLine", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "animating", $.Boolean); 
    $.Field({Static:false, Public:false}, "animationCounter", $.Int32); 
    $.Field({Static:false, Public:false}, "animationCounterLimit", $.Int32); 
    $.Field({Static:false, Public:false}, "buttonNext", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonPrevious", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonPlay", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonReset", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonBack", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "drawGrid", $.Boolean); 
    $.Field({Static:false, Public:false}, "state", $.Int32); 
    $.Field({Static:false, Public:false}, "BackToMenu", $asm00.TypeRef("HumanGraphicsPipelineXna.Scene+ThisBackToMenu")); 
    $.Event({Static:false, Public:true }, "BackToMenu", $asm00.TypeRef("HumanGraphicsPipelineXna.Scene+ThisBackToMenu"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum HumanGraphicsPipelineXna.Scene+State */ 

JSIL.MakeEnum(
  "HumanGraphicsPipelineXna.Scene+State", false, {
    Animated: 42
  }, false
);

/* delegate HumanGraphicsPipelineXna.Scene+ThisBackToMenu */ 

JSIL.MakeDelegate("HumanGraphicsPipelineXna.Scene+ThisBackToMenu", false, []);

/* class HumanGraphicsPipelineXna.TriangleScene */ 

(function TriangleScene$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Scene)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Square)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Line)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Char)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Convert)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Inputs)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("System.Char"), [$asm06.TypeRef("System.Int32")]))) ();
  };

  function TriangleScene__ctor () {
    this.triangleCount = 3;
    $T00().prototype._ctor.call(this);
  };

  function TriangleScene_DerivedInit () {
    this.state = 0;
    this.trianglePoints = JSIL.Array.New($T01(), this.triangleCount);
    this.normalisedTrianglePoints = JSIL.Array.New($T01(), this.triangleCount);
    this.triangleSquares = JSIL.Array.New($T02(), this.triangleCount);
    this.triangleLines = JSIL.Array.New($T03(), this.triangleCount);
  };

  function TriangleScene_Draw (spriteBatch) {
    var $temp00;
    $temp00 = new ($T01())();
    $T00().prototype.Draw.call(this, spriteBatch);
    var normalisedScreen = $T01().Normalize($S00().Construct($T05().get_viewport().X, $T05().get_viewport().Y));

    for (var i = 0; i < (this.triangleCount | 0); i = ((i + 1) | 0)) {
      if ($T01().op_Inequality(this.trianglePoints[i], $T01().get_Zero())) {
        (this.triangleSquares[i]).Draw(spriteBatch);
        spriteBatch.DrawString(
          $T07().Fonts$arial14$value, 
          ($S01().CallStatic($T09(), "ToChar", null, ((65 + i) | 0))).toString(), 
          ($temp00._ctor(+this.trianglePoints[i].X - 20, +this.trianglePoints[i].Y - 20), 
            $temp00), 
          $T0A().get_White()
        );
      }
    }
    if ($T01().op_Inequality(this.trianglePoints[(((this.triangleCount | 0) - 1) | 0)], $T01().get_Zero())) {

      for (i = 0; i < (this.triangleCount | 0); i = ((i + 1) | 0)) {
        (this.triangleLines[i]).Draw(spriteBatch);
      }
      this.ActionOnTrianglePlaced(spriteBatch);
    }
    if ((this.state | 0) === 42) {
      this.DrawOnAnimate(spriteBatch);
    }
    var yPos = 0;
    $T07().WriteStrokedLine(
      spriteBatch, 
      $T07().Fonts$arial14$value, 
      JSIL.ConcatString("Point A: ", this.normalisedTrianglePoints[0]), 
      $S00().Construct(10, +((yPos = ((yPos + 20) | 0), 
            yPos))), 
      $T0A().get_White(), 
      $T0A().get_Black()
    );
    $T07().WriteStrokedLine(
      spriteBatch, 
      $T07().Fonts$arial14$value, 
      JSIL.ConcatString("Point B: ", this.normalisedTrianglePoints[1]), 
      $S00().Construct(10, +((yPos = ((yPos + 20) | 0), 
            yPos))), 
      $T0A().get_White(), 
      $T0A().get_Black()
    );
    $T07().WriteStrokedLine(
      spriteBatch, 
      $T07().Fonts$arial14$value, 
      JSIL.ConcatString("Point C: ", this.normalisedTrianglePoints[2]), 
      $S00().Construct(10, +(yPos + 20)), 
      $T0A().get_White(), 
      $T0A().get_Black()
    );
    if ((this.state | 0) === 42) {
    }
  };

  function TriangleScene_StateChanges (gameTime) {
    if (!((($T0E().Inputs$MouseState$value.get_LeftButton().valueOf() | 0) !== 0) || ($T0E().Inputs$MouseStatePrevious$value.get_LeftButton() !== $T0F().Pressed))) {
      if ((this.state | 0) < (this.triangleCount | 0)) {
        this.trianglePoints[this.state] = $S00().Construct(+($T0E().Inputs$MouseState$value.get_X()), +($T0E().Inputs$MouseState$value.get_Y()));
        this.triangleSquares[this.state] = new ($T02())($S00().Construct(+(($T0E().Inputs$MouseState$value.get_X() | 0) - 5), +(($T0E().Inputs$MouseState$value.get_Y() | 0) - 5)), $S00().Construct(10, 10), $T0A().get_Green().MemberwiseClone());
        this.normalisedTrianglePoints[this.state] = this.NormalisePoints(this.trianglePoints[this.state]);
        this.state = (((this.state | 0) + 1) | 0);
      }
      if ((this.state | 0) === (this.triangleCount | 0)) {
        this.state = 42;
        this.LastPointPlaced(gameTime);

        for (var i = 1; i < (this.triangleCount | 0); i = ((i + 1) | 0)) {
          this.triangleLines[((i - 1) | 0)] = new ($T03())(this.trianglePoints[((i - 1) | 0)].MemberwiseClone(), this.trianglePoints[i].MemberwiseClone(), $T0A().get_Black().MemberwiseClone(), 1);
        }
        this.triangleLines[(((this.triangleCount | 0) - 1) | 0)] = new ($T03())(this.trianglePoints[(((this.triangleCount | 0) - 1) | 0)].MemberwiseClone(), this.trianglePoints[0].MemberwiseClone(), $T0A().get_Black().MemberwiseClone(), 1);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("HumanGraphicsPipelineXna.Scene"), 
      Name: "HumanGraphicsPipelineXna.TriangleScene", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TriangleScene__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DerivedInit", 
      JSIL.MethodSignature.Void, 
      TriangleScene_DerivedInit
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      TriangleScene_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "StateChanges", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      TriangleScene_StateChanges
    );

    $.Field({Static:false, Public:false}, "triangleCount", $.Int32); 
    $.Field({Static:false, Public:false}, "trianglePoints", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])); 
    $.Field({Static:false, Public:false}, "normalisedTrianglePoints", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])); 
    $.Field({Static:false, Public:false}, "triangleSquares", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("HumanGraphicsPipelineXna.Square")])); 
    $.Field({Static:false, Public:false}, "triangleLines", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("HumanGraphicsPipelineXna.Line")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum HumanGraphicsPipelineXna.TriangleScene+TriangleState */ 

JSIL.MakeEnum(
  "HumanGraphicsPipelineXna.TriangleScene+TriangleState", false, {
    PickPoint1: 0, 
    PickPoint2: 1, 
    PickPoint3: 2, 
    Animate: 42
  }, false
);

/* class HumanGraphicsPipelineXna.TriangleRasterisingScene */ 

(function TriangleRasterisingScene$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Boolean)))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.List$b1.Of($asm00.HumanGraphicsPipelineXna.Square)))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.List$b1.Of(System.Array.Of($asm06.System.Single))))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.TriangleScene)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Square)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Console)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Boolean))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.HumanGraphicsPipelineXna.Square))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Scene)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm06.System.String))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Boolean")])]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Square")])]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Single")])])]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Boolean")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Square")]), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function TriangleRasterisingScene__ctor () {
    this.listPixelCheck = $S00().Construct();
    this.listSquares = $S01().Construct();
    this.listResults = $S02().Construct();
    $T03().prototype._ctor.call(this);
  };

  function TriangleRasterisingScene_ActionOnTrianglePlaced (spriteBatch) {
    var col = new ($T05())();
    (this.boundingBox).Draw(spriteBatch);
    if (((this.listPixelCheck).get_Count() | 0) === 0) {
      $T07().Clear();
      $T07().WriteLine("");
      $T07().WriteLine("New Triangle");
      var count = 0;

      for (var i = 0; +i < +(((+this.maximum.X - +this.minimum.X) / +($T09().Globals$pixelSize$value))); i = ((i + 1) | 0)) {
        (this.listPixelCheck).Add($S03().Construct());
        (this.listSquares).Add($S04().Construct());

        for (var j = 0; +j < +(((+this.maximum.Y - +this.minimum.Y) / +($T09().Globals$pixelSize$value))); j = ((j + 1) | 0)) {
          ((this.listPixelCheck).get_Item(i)).Add(false);
          this.check = $S05().Construct(((+this.minimum.X + +(i * ($T09().Globals$pixelSize$value | 0))) + +((($T09().Globals$pixelSize$value | 0) / 2 | 0))), ((+this.minimum.Y + +(j * ($T09().Globals$pixelSize$value | 0))) + +((($T09().Globals$pixelSize$value | 0) / 2 | 0))));
          if (this.PerformFillingFunction(this.NormalisePoints(this.check).MemberwiseClone(), i, j)) {
            ((this.listPixelCheck).get_Item(i)).set_Item(j, true);
            $jsilxna.ColorFromPremultipliedInts(col, 0, 120, 120, 180);
          } else {
            ((this.listPixelCheck).get_Item(i)).set_Item(j, false);
            $jsilxna.ColorFromPremultipliedInts(col, 255, 0, 0, 100);
          }
          ((this.listSquares).get_Item(i)).Add(new ($T06())($S05().Construct((+this.minimum.X + +(i * ($T09().Globals$pixelSize$value | 0))), (+this.minimum.Y + +(j * ($T09().Globals$pixelSize$value | 0)))), $S05().Construct(+($T09().Globals$pixelSize$value), +($T09().Globals$pixelSize$value)), col.MemberwiseClone()));
          var pOut = this.NormalisePoints(((this.listSquares).get_Item(i)).get_Item(j).Square$position$value);
          var xSpace = (
            (+pOut.X < 0)
               ? ""
               : " ")
          ;
          var ySpace = (
            (+pOut.Y < 0)
               ? ""
               : " ")
          ;
          $T07().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["X:", xSpace, "{0}\t\tY:", ySpace, "{1}\t\t{2}"])), JSIL.NumberToFormattedString(pOut.X, null, "F"), JSIL.NumberToFormattedString(pOut.Y, null, "F"), ((this.listPixelCheck).get_Item(i)).get_Item(j));
          count = ((count + 1) | 0);
        }
        count = 0;
      }
      this.animationCounterLimit = ((Math.imul((this.listPixelCheck).get_Count(), ((this.listPixelCheck).get_Item(0)).get_Count()) - 2) | 0);
    }
  };

  function TriangleRasterisingScene_DerivedInit () {
    $T03().prototype.DerivedInit.call(this);
    this.listPixelCheck = $S00().Construct();
    this.listSquares = $S01().Construct();
    this.listResults = $S02().Construct();
    this.minimum = $T0C().get_Zero().MemberwiseClone();
    this.maximum = $T0C().get_Zero().MemberwiseClone();
    this.check = $T0C().get_Zero().MemberwiseClone();
    this.previousPixelInBox = $T0C().get_Zero().MemberwiseClone();
    this.pixelInBox = $T0C().get_Zero().MemberwiseClone();
  };

  function TriangleRasterisingScene_DrawOnAnimate (spriteBatch) {
    var $temp00;
    $temp00 = new ($T0C())();
    var breakNow = false;
    var count = 0;

  $loop0: 
    for (var i = 0; i < (((this.listPixelCheck).get_Item(0)).get_Count() | 0); i = ((i + 1) | 0)) {

    $loop1: 
      for (var j = 0; j < ((this.listPixelCheck).get_Count() | 0); j = ((j + 1) | 0)) {
        (((this.listSquares).get_Item(j)).get_Item(i)).Draw(spriteBatch);
        if (count > (this.animationCounter | 0)) {
          if ($T0C().op_Inequality(($temp00._ctor(+j, +i), 
                $temp00), this.pixelInBox)) {
            this.previousPixelInBox = $S05().Construct(this.pixelInBox.X, this.pixelInBox.Y);
          }
          var sq = new ($T06())($S05().Construct((((+this.minimum.X + (+this.pixelInBox.X * +($T09().Globals$pixelSize$value))) + +((($T09().Globals$pixelSize$value | 0) / 2 | 0))) - 2), (((+this.minimum.Y + (+($T09().Globals$pixelSize$value) * +this.pixelInBox.Y)) + +((($T09().Globals$pixelSize$value | 0) / 2 | 0))) - 2)), $S05().Construct(4, 4), $T05().get_Green().MemberwiseClone());
          sq.Draw(spriteBatch);
          breakNow = true;
          this.check = $S05().Construct(((+this.minimum.X + +(j * ($T09().Globals$pixelSize$value | 0))) + +((($T09().Globals$pixelSize$value | 0) / 2 | 0))), ((+this.minimum.Y + +(i * ($T09().Globals$pixelSize$value | 0))) + +((($T09().Globals$pixelSize$value | 0) / 2 | 0))));
          this.pixelInBox.X = +j;
          this.pixelInBox.Y = +i;
          break $loop1;
        }
        count = ((count + 1) | 0);
      }
      if (breakNow) {
        break $loop0;
      }
    }
    var yPos = ($T09().get_viewportHeight() | 0);
    if (((this.listPixelCheck).get_Item(((this.pixelInBox.X) | 0))).get_Item(((this.pixelInBox.Y) | 0))) {
      $T12().WriteStrokedLine(
        spriteBatch, 
        $T12().Fonts$arial14$value, 
        "Pixel is within triangle.", 
        $S05().Construct(10, +(yPos - 20)), 
        $T05().get_White(), 
        $T05().get_Black()
      );
    } else {
      $T12().WriteStrokedLine(
        spriteBatch, 
        $T12().Fonts$arial14$value, 
        "Pixel not within triangle.", 
        $S05().Construct(10, +(yPos - 20)), 
        $T05().get_White(), 
        $T05().get_Black()
      );
    }
  };

  function TriangleRasterisingScene_LastPointPlaced (gameTime) {
    this.minimum = $S05().Construct(+($T14().Min(((this.trianglePoints[0].X) | 0), $T14().Min(((this.trianglePoints[1].X) | 0), ((this.trianglePoints[2].X) | 0)))), +($T14().Min(((this.trianglePoints[0].Y) | 0), $T14().Min(((this.trianglePoints[1].Y) | 0), ((this.trianglePoints[2].Y) | 0)))));
    this.maximum = $S05().Construct(+($T14().Max(((this.trianglePoints[0].X) | 0), $T14().Max(((this.trianglePoints[1].X) | 0), ((this.trianglePoints[2].X) | 0)))), +($T14().Max(((this.trianglePoints[0].Y) | 0), $T14().Max(((this.trianglePoints[1].Y) | 0), ((this.trianglePoints[2].Y) | 0)))));
    this.minimum = $S05().Construct((+this.minimum.X - (+this.minimum.X % +($T09().Globals$pixelSize$value))), (+this.minimum.Y - (+this.minimum.Y % +($T09().Globals$pixelSize$value))));
    this.maximum = $S05().Construct(((+this.maximum.X - (+this.maximum.X % +($T09().Globals$pixelSize$value))) + +($T09().Globals$pixelSize$value)), ((+this.maximum.Y - (+this.maximum.Y % +($T09().Globals$pixelSize$value))) + +($T09().Globals$pixelSize$value)));
    this.boundingBox = new ($T06())($S05().Construct(this.minimum.X, this.minimum.Y), $S05().Construct((+this.maximum.X - +this.minimum.X), (+this.maximum.Y - +this.minimum.Y)), $jsilxna.ColorFromPremultipliedInts(null, 255, 0, 0, 120));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("HumanGraphicsPipelineXna.TriangleScene"), 
      Name: "HumanGraphicsPipelineXna.TriangleRasterisingScene", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TriangleRasterisingScene__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ActionOnTrianglePlaced", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      TriangleRasterisingScene_ActionOnTrianglePlaced
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DerivedInit", 
      JSIL.MethodSignature.Void, 
      TriangleRasterisingScene_DerivedInit
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DrawOnAnimate", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      TriangleRasterisingScene_DrawOnAnimate
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LastPointPlaced", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      TriangleRasterisingScene_LastPointPlaced
    );

    $.Field({Static:false, Public:false}, "listPixelCheck", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$.Boolean])])); 
    $.Field({Static:false, Public:false}, "listSquares", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Square")])])); 
    $.Field({Static:false, Public:false}, "listResults", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Single])])])); 
    $.Field({Static:false, Public:false}, "minimum", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "maximum", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "check", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "previousPixelInBox", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "pixelInBox", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "boundingBox", $asm00.TypeRef("HumanGraphicsPipelineXna.Square")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.HalfSpace */ 

(function HalfSpace$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.TriangleRasterisingScene)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.TriangleScene)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.List$b1.Of(System.Array.Of($asm06.System.Single))))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of(System.Array.Of($asm06.System.Single)))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Single")])]), null))) ();
  };

  function HalfSpace__ctor () {
    $T00().prototype._ctor.call(this);
    this.drawGrid = true;
  };

  function HalfSpace_DerivedInit () {
    $T00().prototype.DerivedInit.call(this);
    this.v0 = 0;
    this.v1 = 1;
    this.v2 = 0;
  };

  function HalfSpace_Draw (spriteBatch) {
    $T02().prototype.Draw.call(this, spriteBatch);
  };

  function HalfSpace_DrawText (spriteBatch) {
    var yPos = ($T04().get_viewportHeight() | 0);
    $T05().WriteStrokedLine(
      spriteBatch, 
      $T05().Fonts$arial14$value, 
      "Place points clockwise for backface culling.", 
      $S00().Construct(+(($T04().get_viewportWidth() | 0) - 320), 20), 
      $T07().get_White(), 
      $T07().get_Black()
    );
    if (((this.listResults).get_Count() | 0) > 0) {
      $T05().WriteStrokedLine(
        spriteBatch, 
        $T05().Fonts$arial14$value, 
        JSIL.ConcatString("Orient CA: ", ((this.listResults).get_Item(((this.pixelInBox.X) | 0))).get_Item(((this.pixelInBox.Y) | 0))[2]), 
        $S00().Construct(10, +((yPos = ((yPos - 40) | 0), 
              yPos))), 
        $T07().get_White(), 
        $T07().get_Black()
      );
      $T05().WriteStrokedLine(
        spriteBatch, 
        $T05().Fonts$arial14$value, 
        JSIL.ConcatString("Orient BC: ", ((this.listResults).get_Item(((this.pixelInBox.X) | 0))).get_Item(((this.pixelInBox.Y) | 0))[1]), 
        $S00().Construct(10, +((yPos = ((yPos - 20) | 0), 
              yPos))), 
        $T07().get_White(), 
        $T07().get_Black()
      );
      $T05().WriteStrokedLine(
        spriteBatch, 
        $T05().Fonts$arial14$value, 
        JSIL.ConcatString("Orient AB: ", ((this.listResults).get_Item(((this.pixelInBox.X) | 0))).get_Item(((this.pixelInBox.Y) | 0))[0]), 
        $S00().Construct(10, +(yPos - 20)), 
        $T07().get_White(), 
        $T07().get_Black()
      );
    }
  };

  function HalfSpace_orient2d (a, b, p) {
    return (((+b.X - +a.X) * (+p.Y - +a.Y)) - ((+b.Y - +a.Y) * (+p.X - +a.X)));
  };

  function HalfSpace_PerformFillingFunction (p, i, j) {
    if ((i | 0) === ((this.listResults).get_Count() | 0)) {
      (this.listResults).Add($S01().Construct());
    }
    this.v0 = +this.orient2d(this.normalisedTrianglePoints[0], this.normalisedTrianglePoints[1], p);
    this.v1 = +this.orient2d(this.normalisedTrianglePoints[1], this.normalisedTrianglePoints[2], p);
    this.v2 = +this.orient2d(this.normalisedTrianglePoints[2], this.normalisedTrianglePoints[0], p);
    ((this.listResults).get_Item(i)).Add(JSIL.Array.New($T0B(), 3));
    ((this.listResults).get_Item(i)).get_Item(j)[0] = +this.v0;
    ((this.listResults).get_Item(i)).get_Item(j)[1] = +this.v1;
    ((this.listResults).get_Item(i)).get_Item(j)[2] = +this.v2;
    return !((+this.v0 < 0) || 
      (+this.v1 < 0) || (+this.v2 < 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("HumanGraphicsPipelineXna.TriangleRasterisingScene"), 
      Name: "HumanGraphicsPipelineXna.HalfSpace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      HalfSpace__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DerivedInit", 
      JSIL.MethodSignature.Void, 
      HalfSpace_DerivedInit
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      HalfSpace_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DrawText", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      HalfSpace_DrawText
    );

    $.Method({Static:false, Public:false}, "orient2d", 
      new JSIL.MethodSignature($.Single, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      HalfSpace_orient2d
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PerformFillingFunction", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Int32, 
          $.Int32
        ]), 
      HalfSpace_PerformFillingFunction
    );

    $.Field({Static:false, Public:false}, "v0", $.Single); 
    $.Field({Static:false, Public:false}, "v1", $.Single); 
    $.Field({Static:false, Public:false}, "v2", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Game1 */ 

(function Game1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Game1_MenuState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.HalfSpace)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Scene)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Scene_ThisBackToMenu)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Barycentric)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.TriangleClippingScene)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.DepthStencilState)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button_ThisOnClick)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Inputs)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Game1__ctor () {
    this.menuState = $T00().TriangleFilling;
    $T01().prototype._ctor.call(this);
    $T02().Globals$graphics$value = new ($T03())(this);
    (this.get_Content()).set_RootDirectory("Content");
    this.set_IsFixedTimeStep(true);
    $T02().Init();
  };

  function Game1_$lSetButtons$gb__0 (b) {
    this.menuState = $T00().TriangleFilling;
  };

  function Game1_$lSetButtons$gb__1 (b) {
    this.menuState = $T00().None;
    this.scene = new ($T06())();
    (this.scene).add_BackToMenu($T08().New(this, $thisType.prototype.BackToTriangleMenu));
  };

  function Game1_$lSetButtons$gb__2 (b) {
    this.menuState = $T00().None;
    this.scene = new ($T09())();
    (this.scene).add_BackToMenu($T08().New(this, $thisType.prototype.BackToTriangleMenu));
  };

  function Game1_$lSetButtons$gb__3 (b) {
    this.menuState = $T00().None;
    this.scene = new ($T0A())();
    (this.scene).add_BackToMenu($T08().New(this, $thisType.prototype.BackToMainMenu));
  };

  function Game1_BackToMainMenu () {
    this.scene = null;
    this.menuState = $T00().Main;
  };

  function Game1_BackToTriangleMenu () {
    this.scene = null;
    this.menuState = $T00().TriangleFilling;
  };

  function Game1_CreateForm () {
  };

  function Game1_Draw (gameTime) {
    this.get_GraphicsDevice().InternalClear($T0D().get_SlateGray());
    (this.spriteBatch).Begin(
      $T0F().Deferred, 
      $T10().AlphaBlend, 
      $T11().LinearClamp, 
      $T12().None, 
      $T13().CullNone
    );
    switch ((this.menuState).valueOf()) {
      case 0: 
        this.DrawMainMenu(this.spriteBatch);
        break;

      case 1: 
        this.DrawTriangleFillingMenu(this.spriteBatch);
        break;

    }
    if (this.scene !== null) {
      (this.scene).Draw(this.spriteBatch);
    }
    (this.spriteBatch).End();
    $T01().prototype.Draw.call(this, gameTime);
  };

  function Game1_DrawMainMenu (spriteBatch) {
    (this.buttonTriangleFilling).Draw(spriteBatch);
    (this.buttonClipping).Draw(spriteBatch);
  };

  function Game1_DrawTriangleFillingMenu (spriteBatch) {
    (this.buttonHalfSpace).Draw(spriteBatch);
    (this.buttonBarycentric).Draw(spriteBatch);
  };

  function Game1_Initialize () {
    this.set_IsMouseVisible(true);
    $T01().prototype.Initialize.call(this);
  };

  function Game1_LoadContent () {
    this.spriteBatch = new ($T0E())(this.get_GraphicsDevice());
    $T14().Fonts$font14$value = (this.get_Content()).Load$b1($T15())("Font14");
    $T14().Fonts$smallFont$value = (this.get_Content()).Load$b1($T15())("SmallFont");
    $T14().Fonts$arial14$value = (this.get_Content()).Load$b1($T15())("Arial14");
    this.SetButtons();
  };

  function Game1_SetButtons () {
    this.buttonTriangleFilling = new ($T05())("Triangle\n filling", $T14().Fonts$font14$value, $S00().Construct(150, 50), $S00().Construct(+(((($T02().get_viewportWidth() | 0) / 2) | 0) - 200), +(((($T02().get_viewportHeight() | 0) / 2) | 0) - 25)), $T0D().get_Red().MemberwiseClone());
    this.buttonClipping = new ($T05())("Clipping", $T14().Fonts$font14$value, $S00().Construct(150, 50), $S00().Construct(+(((($T02().get_viewportWidth() | 0) / 2) | 0) + 50), +(((($T02().get_viewportHeight() | 0) / 2) | 0) - 25)), $T0D().get_Red().MemberwiseClone());
    this.buttonHalfSpace = new ($T05())("Half-space", $T14().Fonts$font14$value, $S00().Construct(150, 50), $S00().Construct(+(((($T02().get_viewportWidth() | 0) / 2) | 0) - 75), +(((((($T02().get_viewportHeight() | 0) / 2) | 0) - 25) | 0) - 50)), $T0D().get_Red().MemberwiseClone());
    this.buttonBarycentric = new ($T05())("Barycentric", $T14().Fonts$font14$value, $S00().Construct(150, 50), $S00().Construct(+(((($T02().get_viewportWidth() | 0) / 2) | 0) - 75), +(((((($T02().get_viewportHeight() | 0) / 2) | 0) - 25) | 0) + 50)), $T0D().get_Red().MemberwiseClone());
    (this.buttonTriangleFilling).add_OnClick($T17().New(this, $thisType.prototype.$lSetButtons$gb__0));
    (this.buttonHalfSpace).add_OnClick($T17().New(this, $thisType.prototype.$lSetButtons$gb__1));
    (this.buttonBarycentric).add_OnClick($T17().New(this, $thisType.prototype.$lSetButtons$gb__2));
    (this.buttonClipping).add_OnClick($T17().New(this, $thisType.prototype.$lSetButtons$gb__3));
  };

  function Game1_UnloadContent () {
  };

  function Game1_Update (gameTime) {
    $T18().Update(gameTime);
    if (this.scene !== null) {
      (this.scene).Update(gameTime);
    }
    switch ((this.menuState).valueOf()) {
      case 0: 
        (this.buttonTriangleFilling).Update(gameTime);
        (this.buttonClipping).Update(gameTime);
        break;

      case 1: 
        (this.buttonHalfSpace).Update(gameTime);
        (this.buttonBarycentric).Update(gameTime);
        break;

    }
    $T01().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.Game"), 
      Name: "HumanGraphicsPipelineXna.Game1", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Game1__ctor
    );

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__0", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Game1_$lSetButtons$gb__0
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__1", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Game1_$lSetButtons$gb__1
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__2", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Game1_$lSetButtons$gb__2
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "$lSetButtons$gb__3", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button")), 
      Game1_$lSetButtons$gb__3
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "BackToMainMenu", 
      JSIL.MethodSignature.Void, 
      Game1_BackToMainMenu
    );

    $.Method({Static:false, Public:false}, "BackToTriangleMenu", 
      JSIL.MethodSignature.Void, 
      Game1_BackToTriangleMenu
    );

    $.Method({Static:false, Public:false}, "CreateForm", 
      JSIL.MethodSignature.Void, 
      Game1_CreateForm
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Game1_Draw
    );

    $.Method({Static:false, Public:false}, "DrawMainMenu", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Game1_DrawMainMenu
    );

    $.Method({Static:false, Public:false}, "DrawTriangleFillingMenu", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Game1_DrawTriangleFillingMenu
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      Game1_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      JSIL.MethodSignature.Void, 
      Game1_LoadContent
    );

    $.Method({Static:false, Public:true }, "SetButtons", 
      JSIL.MethodSignature.Void, 
      Game1_SetButtons
    );

    $.Method({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      JSIL.MethodSignature.Void, 
      Game1_UnloadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Game1_Update
    );

    $.Field({Static:false, Public:false}, "spriteBatch", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")); 
    $.Field({Static:false, Public:false}, "buttonHalfSpace", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonBarycentric", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonTriangleFilling", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonClipping", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "scene", $asm00.TypeRef("HumanGraphicsPipelineXna.Scene")); 
    $.Field({Static:false, Public:false}, "menuState", $asm00.TypeRef("HumanGraphicsPipelineXna.Game1+MenuState")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum HumanGraphicsPipelineXna.Game1+MenuState */ 

JSIL.MakeEnum(
  "HumanGraphicsPipelineXna.Game1+MenuState", false, {
    Main: 0, 
    TriangleFilling: 1, 
    Clipping: 2, 
    None: 3
  }, false
);

/* class HumanGraphicsPipelineXna.Barycentric */ 

(function Barycentric$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.TriangleRasterisingScene)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.TriangleScene)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Scene)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.List$b1.Of(System.Array.Of($asm06.System.Single))))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of(System.Array.Of($asm06.System.Single)))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Helper)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Single")])]), null))) ();
  };

  function Barycentric__ctor () {
    $T00().prototype._ctor.call(this);
    this.drawGrid = true;
  };

  function Barycentric_Draw (spriteBatch) {
    $T02().prototype.Draw.call(this, spriteBatch);
    this.DrawText(spriteBatch);
  };

  function Barycentric_DrawText (spriteBatch) {
    var yPos = ($T05().get_viewportHeight() | 0);
    yPos = ((yPos - 20) | 0);
    if (((this.listResults).get_Count() | 0) > 0) {
      $T07().WriteStrokedLine(
        spriteBatch, 
        $T07().Fonts$arial14$value, 
        JSIL.ConcatString("S+T: ", ((this.listResults).get_Item(((this.pixelInBox.X) | 0))).get_Item(((this.pixelInBox.Y) | 0))[2]), 
        $S00().Construct(10, +((yPos = ((yPos - 20) | 0), 
              yPos))), 
        $T0C().get_White(), 
        $T0C().get_Black()
      );
      $T07().WriteStrokedLine(
        spriteBatch, 
        $T07().Fonts$arial14$value, 
        JSIL.ConcatString("T: ", ((this.listResults).get_Item(((this.pixelInBox.X) | 0))).get_Item(((this.pixelInBox.Y) | 0))[1]), 
        $S00().Construct(10, +((yPos = ((yPos - 20) | 0), 
              yPos))), 
        $T0C().get_White(), 
        $T0C().get_Black()
      );
      $T07().WriteStrokedLine(
        spriteBatch, 
        $T07().Fonts$arial14$value, 
        JSIL.ConcatString("S: ", ((this.listResults).get_Item(((this.pixelInBox.X) | 0))).get_Item(((this.pixelInBox.Y) | 0))[0]), 
        $S00().Construct(10, +(yPos - 20)), 
        $T0C().get_White(), 
        $T0C().get_Black()
      );
    }
  };

  function Barycentric_PerformFillingFunction (p, i, j) {
    if ((i | 0) === ((this.listResults).get_Count() | 0)) {
      (this.listResults).Add($S01().Construct());
    }
    var vs = $S00().Construct((+this.normalisedTrianglePoints[1].X - +this.normalisedTrianglePoints[0].X), (+this.normalisedTrianglePoints[1].Y - +this.normalisedTrianglePoints[0].Y));
    var vs2 = $S00().Construct((+this.normalisedTrianglePoints[2].X - +this.normalisedTrianglePoints[0].X), (+this.normalisedTrianglePoints[2].Y - +this.normalisedTrianglePoints[0].Y));
    var q = $S00().Construct((+p.X - +this.normalisedTrianglePoints[0].X), (+p.Y - +this.normalisedTrianglePoints[0].Y));
    var s = +((+$T0D().CrossProduct(q, vs2) / +$T0D().CrossProduct(vs, vs2)));
    var t = +((+$T0D().CrossProduct(vs, q) / +$T0D().CrossProduct(vs, vs2)));
    ((this.listResults).get_Item(i)).Add(JSIL.Array.New($T0A(), 3));
    ((this.listResults).get_Item(i)).get_Item(j)[0] = s;
    ((this.listResults).get_Item(i)).get_Item(j)[1] = t;
    ((this.listResults).get_Item(i)).get_Item(j)[2] = s + t;
    return !((s < 0) || 
      (t < 0) || ((s + t) > 1));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("HumanGraphicsPipelineXna.TriangleRasterisingScene"), 
      Name: "HumanGraphicsPipelineXna.Barycentric", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Barycentric__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Barycentric_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DrawText", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Barycentric_DrawText
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PerformFillingFunction", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Int32, 
          $.Int32
        ]), 
      Barycentric_PerformFillingFunction
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Polygon */ 

(function Polygon$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm0B.System.Drawing.Point))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.Drawing.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0B.System.Drawing.Point)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.System.Drawing.Bitmap)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0B.System.Drawing.Graphics)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0B.System.Drawing.SolidBrush)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.IO.MemoryStream)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0B.System.Drawing.Image)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0B.System.Drawing.Imaging.ImageFormat)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.IO.Stream)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Int64)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.IO.SeekOrigin)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.IDisposable)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm0B.TypeRef("System.Drawing.Point")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Drawing.Point"), [$asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Drawing.Bitmap"), [$asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Drawing.SolidBrush"), [$asm0B.TypeRef("System.Drawing.Color")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.IO.MemoryStream"), null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IO.Stream"), $asm0B.TypeRef("System.Drawing.Imaging.ImageFormat")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm06.System.IDisposable.Dispose)) ();
  };

  function Polygon__ctor (pointsIn, col) {
    var $temp00;
    this.points = $S00().Construct();

    for (var i = 0; i < (pointsIn.get_Count() | 0); i = ((i + 1) | 0)) {
      (this.points).Add(pointsIn.get_Item(i).MemberwiseClone());
    }
    var minX = 2147483647;
    var minY = 2147483647;
    var maxX = 0;
    var maxY = 0;

    for (var a$0 = this.points._items, i$0 = 0, l$0 = (this.points._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var val = a$0[i$0].MemberwiseClone();
      if ((val.get_X() | 0) < minX) {
        minX = (val.get_X() | 0);
      }
      if ((val.get_X() | 0) > maxX) {
        maxX = (val.get_X() | 0);
      }
      if ((val.get_Y() | 0) < minY) {
        minY = (val.get_Y() | 0);
      }
      if ((val.get_Y() | 0) > maxY) {
        maxY = (val.get_Y() | 0);
      }
    }
    if (maxX === minX) {
      maxX = Math.imul(maxX, 2);
    }
    if (maxY === minY) {
      maxY = Math.imul(maxY, 2);
    }

    for (i = 0; i < ((this.points).get_Count() | 0); i = ((i + 1) | 0)) {
      (this.points).set_Item(i, $S01().Construct((((((this.points).get_Item(i)).get_X() | 0) - minX) | 0), (((((this.points).get_Item(i)).get_Y() | 0) - minY) | 0)));
    }
    var b = $S02().Construct(((maxX - minX) | 0), ((maxY - minY) | 0));
    var g = $T05().FromImage(b);
    $S03().CallVirtual("FillPolygon", null, g, $S04().Construct(col), $T00().prototype.ToArray.call(this.points));
    this.tex = null;
    var s = $S05().Construct();
    try {
      $S06().CallVirtual("Save", null, b, s, $T09().get_Png());
      s.Seek($T0B().Create(0, 0, 0), $T0C().Begin);
      this.tex = $T0D().FromStream($T0E().get_graphicsDevice(), s);
    } finally {
      if (s !== null) {
        $IM00().Call(s, null);
      }
    }
    this.miniX = minX;
    this.miniY = minY;
  };

  function Polygon_Draw (spriteBatch) {
    spriteBatch.Draw(this.tex, $S07().Construct(+(this.miniX), +(this.miniY)), $T12().get_White());
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Polygon", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm0B.TypeRef("System.Drawing.Point")]), $asm0B.TypeRef("System.Drawing.Color")]), 
      Polygon__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Polygon_Draw
    );

    $.Field({Static:false, Public:false}, "points", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0B.TypeRef("System.Drawing.Point")])); 
    $.Field({Static:false, Public:false}, "tex", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "miniX", $.Int32); 
    $.Field({Static:false, Public:false}, "miniY", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Globals */ 

(function Globals$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Random"), null))) ();
  };

  function Globals__ctor () {
  };

  function Globals_get_graphics () {
    return $thisType.Globals$graphics$value;
  };

  function Globals_get_graphicsDevice () {
    return $thisType.Globals$graphics$value.get_GraphicsDevice();
  };

  function Globals_get_pixelSize () {
    return $thisType.Globals$pixelSize$value;
  };

  function Globals_get_rand () {
    return $thisType.Globals$rand$value;
  };

  function Globals_get_viewport () {
    return $S00().Construct(+($thisType.Globals$graphics$value.get_GraphicsDevice().get_Viewport().get_Width()), +($thisType.Globals$graphics$value.get_GraphicsDevice().get_Viewport().get_Height()));
  };

  function Globals_get_viewportHeight () {
    return (($thisType.get_viewport().Y) | 0);
  };

  function Globals_get_viewportWidth () {
    return (($thisType.get_viewport().X) | 0);
  };

  function Globals_Init () {
    $thisType.Globals$pixelSize$value = 20;
    $thisType.Globals$rand$value = $S01().Construct();
  };

  function Globals_set_graphics (value) {
    $thisType.Globals$graphics$value = value;
  };

  function Globals_set_pixelSize (value) {
    $thisType.Globals$pixelSize$value = (value | 0);
  };

  function Globals_set_rand (value) {
    $thisType.Globals$rand$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Globals", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Globals__ctor
    );

    $.Method({Static:true , Public:true }, "get_graphics", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")), 
      Globals_get_graphics
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_graphicsDevice", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      Globals_get_graphicsDevice
    );

    $.Method({Static:true , Public:true }, "get_pixelSize", 
      JSIL.MethodSignature.Return($.Int32), 
      Globals_get_pixelSize
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_rand", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Random")), 
      Globals_get_rand
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_viewport", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Globals_get_viewport
    );

    $.Method({Static:true , Public:true }, "get_viewportHeight", 
      JSIL.MethodSignature.Return($.Int32), 
      Globals_get_viewportHeight
    );

    $.Method({Static:true , Public:true }, "get_viewportWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      Globals_get_viewportWidth
    );

    $.Method({Static:true , Public:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Globals_Init
    );

    $.Method({Static:true , Public:true }, "set_graphics", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")), 
      Globals_set_graphics
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_pixelSize", 
      JSIL.MethodSignature.Action($.Int32), 
      Globals_set_pixelSize
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_rand", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Random")), 
      Globals_set_rand
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "Globals$rand$value", $asm06.TypeRef("System.Random"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Globals$graphics$value", $asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Globals$pixelSize$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:true , Public:true }, "rand", $asm06.TypeRef("System.Random"));

    $.Property({Static:true , Public:true }, "graphics", $asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager"));

    $.Property({Static:true , Public:true }, "graphicsDevice", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"));

    $.Property({Static:true , Public:true }, "viewport", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:true , Public:true }, "viewportWidth", $.Int32);

    $.Property({Static:true , Public:true }, "viewportHeight", $.Int32);

    $.Property({Static:true , Public:true }, "pixelSize", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Fonts */ 

(function Fonts$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Int32)) ();
  };

  function Fonts__ctor () {
  };

  function Fonts_get_arial14 () {
    return $thisType.Fonts$arial14$value;
  };

  function Fonts_get_font14 () {
    return $thisType.Fonts$font14$value;
  };

  function Fonts_get_smallFont () {
    return $thisType.Fonts$smallFont$value;
  };

  function Fonts_Init () {
  };

  function Fonts_set_arial14 (value) {
    $thisType.Fonts$arial14$value = value;
  };

  function Fonts_set_font14 (value) {
    $thisType.Fonts$font14$value = value;
  };

  function Fonts_set_smallFont (value) {
    $thisType.Fonts$smallFont$value = value;
  };

  function Fonts_WriteStrokedLine (spriteBatch, font, text, position, textColour, strokeColour) {
    var $temp00;
    $temp00 = new ($T03())();

    for (var i = -1; i <= 1; i = ((i + 1) | 0)) {

      for (var j = -1; j <= 1; j = ((j + 1) | 0)) {
        if ((i !== 0) || (j !== 0)) {
          spriteBatch.DrawString(font, text, ($temp00._ctor(+position.X + +i, +position.Y + +j), 
              $temp00), strokeColour);
        }
      }
    }
    spriteBatch.DrawString(font, text, position, textColour);
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Fonts", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Fonts__ctor
    );

    $.Method({Static:true , Public:true }, "get_arial14", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_get_arial14
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_font14", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_get_font14
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_smallFont", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_get_smallFont
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Fonts_Init
    );

    $.Method({Static:true , Public:true }, "set_arial14", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_set_arial14
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_font14", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_set_font14
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_smallFont", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_set_smallFont
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "WriteStrokedLine", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), 
          $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      Fonts_WriteStrokedLine
    );

    $.Field({Static:true , Public:false}, "Fonts$smallFont$value", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Fonts$font14$value", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Fonts$arial14$value", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:true , Public:true }, "smallFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Property({Static:true , Public:true }, "font14", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Property({Static:true , Public:true }, "arial14", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Inputs */ 

(function Inputs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Mouse)) ();
  };

  function Inputs__ctor () {
  };

  function Inputs_get_MouseState () {
    return $thisType.Inputs$MouseState$value;
  };

  function Inputs_get_MouseStatePrevious () {
    return $thisType.Inputs$MouseStatePrevious$value;
  };

  function Inputs_Init () {
  };

  function Inputs_set_MouseState (value) {
    $thisType.Inputs$MouseState$value = value;
  };

  function Inputs_set_MouseStatePrevious (value) {
    $thisType.Inputs$MouseStatePrevious$value = value;
  };

  function Inputs_Update (gameTime) {
    ($thisType.Inputs$MouseState$value = $thisType.Inputs$MouseStatePrevious$value.MemberwiseClone());
    ($thisType.Inputs$MouseStatePrevious$value = $T02().GetState().MemberwiseClone());
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Inputs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Inputs__ctor
    );

    $.Method({Static:true , Public:true }, "get_MouseState", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Inputs_get_MouseState
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MouseStatePrevious", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Inputs_get_MouseStatePrevious
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Inputs_Init
    );

    $.Method({Static:true , Public:false}, "set_MouseState", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Inputs_set_MouseState
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MouseStatePrevious", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Inputs_set_MouseStatePrevious
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "Update", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Inputs_Update
    );

    $.Field({Static:true , Public:false}, "Inputs$MouseState$value", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Inputs$MouseStatePrevious$value", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function Inputs__cctor () {
      $thisType.Inputs$MouseState$value = new $asm01.Microsoft.Xna.Framework.Input.MouseState();
      $thisType.Inputs$MouseStatePrevious$value = new $asm01.Microsoft.Xna.Framework.Input.MouseState();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Inputs__cctor
    );

    $.Property({Static:true , Public:true }, "MouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    $.Property({Static:true , Public:true }, "MouseStatePrevious", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Square */ 

(function Square$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm06.TypeRef("System.Int32"), 
        $asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Boolean"), 
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };

  function Square__ctor (pos, sizeIn, col) {
    this.pixels = JSIL.Array.New($T01(), [$T01().get_Black()]);
    this.pixels[0] = col;
    (this.Square$position$value = pos);
    this.size = sizeIn;
    this.tex = $S00().Construct($T03().get_graphicsDevice(), 1, 1, true, $T04().Color);
    $S01().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.tex, this.pixels);
  };

  function Square_Draw (spriteBatch) {
    spriteBatch.DrawRect(this.tex, new ($T06())(((this.Square$position$value.X) | 0), ((this.Square$position$value.Y) | 0), ((this.size.X) | 0), ((this.size.Y) | 0)), this.pixels[0]);
  };

  function Square_get_position () {
    return this.Square$position$value;
  };

  function Square_set_position (value) {
    this.Square$position$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Square", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      Square__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Square_Draw
    );

    $.Method({Static:false, Public:true }, "get_position", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Square_get_position
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_position", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Square_set_position
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "tex", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "pixels", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")])); 
    $.Field({Static:false, Public:false}, "size", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "Square$position$value", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Button */ 

(function Button$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button_ThisOnClick)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Delegate)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Threading.Interlocked)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button_ThisOnHold)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Inputs)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Color))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm06.TypeRef("System.Int32"), 
        $asm06.TypeRef("System.Int32")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };

  function Button__ctor (s, f, dim, pos, col) {
    this.thresh = 500;
    this.pressTimer = $T04().Zero.MemberwiseClone();
    this.Button$text$value = s;
    this.dimensions = $S00().Construct(dim.X, dim.Y);
    this.position = pos;
    this.SetColour(col);
    this.textSize = f.MeasureString(s).MemberwiseClone();
    this.textCentre = $S00().Construct(+((($T08().Globals$graphics$value.get_GraphicsDevice().get_Viewport().get_Width() | 0) / 2 | 0)), dim.Y);
    this.font = f;
  };

  function Button_add_OnClick (value) {
    var thisOnClick = this.OnClick;

    do {
      var thisOnClick2 = thisOnClick;
      var value2 = $T0A().Combine(thisOnClick2, value);
      thisOnClick = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "OnClick"), value2, thisOnClick2);
    } while (thisOnClick !== thisOnClick2);
  };

  function Button_add_OnHold (value) {
    var thisOnHold = this.OnHold;

    do {
      var thisOnHold2 = thisOnHold;
      var value2 = $T0A().Combine(thisOnHold2, value);
      thisOnHold = $T0B().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "OnHold"), value2, thisOnHold2);
    } while (thisOnHold !== thisOnHold2);
  };

  function Button_Draw (spriteBatch) {
    spriteBatch.DrawRect(this.tex, new ($T0E())(((this.position.X) | 0), ((this.position.Y) | 0), ((this.dimensions.X) | 0), ((this.dimensions.Y) | 0)), $T03().get_White());
    spriteBatch.DrawStringScaleF(
      this.font, 
      this.Button$text$value, 
      $S00().Construct(((+(((this.position.X) | 0)) + +((+this.dimensions.X / 2))) - +((+this.textSize.X / 2))), ((+(((this.position.Y) | 0)) + +((+this.dimensions.Y / 2))) - +((+this.textSize.Y / 2)))), 
      $T03().get_White(), 
      0, 
      $T02().get_Zero(), 
      1, 
      $T0F().None, 
      1
    );
  };

  function Button_EmulateClick () {
    if (this.OnClick !== null) {
      this.OnClick(this);
    }
  };

  function Button_get_text () {
    return this.Button$text$value;
  };

  function Button_IsClicked (gameTime) {
    if (!(!((new ($T0E())(((this.position.X) | 0), ((this.position.Y) | 0), ((this.dimensions.X) | 0), ((this.dimensions.Y) | 0)))).Contains(
          $T12().Inputs$MouseState$value.get_X(), 
          $T12().Inputs$MouseState$value.get_Y()
        ) || ($T12().Inputs$MouseState$value.get_LeftButton() !== $T13().Pressed))) {
      this.pressTimer = $T04().op_Addition(this.pressTimer, gameTime.get_ElapsedGameTime()).MemberwiseClone();
      if (+(this.pressTimer).get_TotalMilliseconds() <= +(gameTime.get_ElapsedGameTime()).get_TotalMilliseconds()) {
        var result = true;
        return result;
      }
    } else if (!((+(this.pressTimer).get_TotalMilliseconds() <= 0) || ($T12().Inputs$MouseState$value.get_LeftButton() !== $T13().Released))) {
      this.pressTimer = $T04().Zero.MemberwiseClone();
    }
    result = false;
    return result;
  };

  function Button_remove_OnClick (value) {
    var thisOnClick = this.OnClick;

    do {
      var thisOnClick2 = thisOnClick;
      var value2 = $T0A().Remove(thisOnClick2, value);
      thisOnClick = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "OnClick"), value2, thisOnClick2);
    } while (thisOnClick !== thisOnClick2);
  };

  function Button_remove_OnHold (value) {
    var thisOnHold = this.OnHold;

    do {
      var thisOnHold2 = thisOnHold;
      var value2 = $T0A().Remove(thisOnHold2, value);
      thisOnHold = $T0B().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "OnHold"), value2, thisOnHold2);
    } while (thisOnHold !== thisOnHold2);
  };

  function Button_set_text (value) {
    this.Button$text$value = value;
  };

  function Button_SetColour (col) {
    var pixels = JSIL.Array.New($T03(), [$jsilxna.ColorFromPremultipliedInts(null, col.get_R(), col.get_G(), col.get_B(), col.get_A())]);
    this.tex = $S01().Construct($T08().Globals$graphics$value.get_GraphicsDevice(), 1, 1);
    $S02().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.tex, pixels);
  };

  function Button_Update (gameTime) {
    if (!((this.OnClick === null) || !this.IsClicked(gameTime))) {
      this.OnClick(this);
    } else if (!((this.OnHold === null) || (+(this.pressTimer).get_TotalMilliseconds() <= +this.thresh))) {
      this.OnHold(this);
    }
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Button", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      Button__ctor
    );

    $.Method({Static:false, Public:true }, "add_OnClick", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnClick")), 
      Button_add_OnClick
    );

    $.Method({Static:false, Public:true }, "add_OnHold", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnHold")), 
      Button_add_OnHold
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Button_Draw
    );

    $.Method({Static:false, Public:true }, "EmulateClick", 
      JSIL.MethodSignature.Void, 
      Button_EmulateClick
    );

    $.Method({Static:false, Public:true }, "get_text", 
      JSIL.MethodSignature.Return($.String), 
      Button_get_text
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "IsClicked", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")]), 
      Button_IsClicked
    );

    $.Method({Static:false, Public:true }, "remove_OnClick", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnClick")), 
      Button_remove_OnClick
    );

    $.Method({Static:false, Public:true }, "remove_OnHold", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnHold")), 
      Button_remove_OnHold
    );

    $.Method({Static:false, Public:true }, "set_text", 
      JSIL.MethodSignature.Action($.String), 
      Button_set_text
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetColour", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Color")), 
      Button_SetColour
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Button_Update
    );

    $.Field({Static:false, Public:false}, "thresh", $.Single); 
    $.Field({Static:false, Public:false}, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "dimensions", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "textSize", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "textCentre", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "font", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:false, Public:false}, "tex", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "pressTimer", $asm06.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "OnClick", $asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnClick")); 
    $.Field({Static:false, Public:false}, "OnHold", $asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnHold")); 
    $.Field({Static:false, Public:false}, "Button$text$value", $.String)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "text", $.String);

    $.Event({Static:false, Public:true }, "OnClick", $asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnClick"));

    $.Event({Static:false, Public:true }, "OnHold", $asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnHold"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate HumanGraphicsPipelineXna.Button+ThisOnClick */ 

JSIL.MakeDelegate("HumanGraphicsPipelineXna.Button+ThisOnClick", false, []);

/* delegate HumanGraphicsPipelineXna.Button+ThisOnHold */ 

JSIL.MakeDelegate("HumanGraphicsPipelineXna.Button+ThisOnHold", false, []);

/* class HumanGraphicsPipelineXna.Program */ 

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm06.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Game1)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm06.System.IDisposable.Dispose)) ();
  };

  function Program_Main (args) {
    var game = new ($T01())();
    try {
      game.Run();
    } finally {
      if (game !== null) {
        $IM00().Call(game, null);
      }
    }
  };

  JSIL.MakeStaticClass("HumanGraphicsPipelineXna.Program", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "Main", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      Program_Main
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Line */ 

(function Line$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm06.TypeRef("System.Int32"), 
        $asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Boolean"), 
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Line__ctor (point1, point2, col, thicknessIn) {
    this.p1 = point1;
    this.p2 = point2;
    this.color = col;
    this.thickness = +thicknessIn;
    this.pixel = $S00().Construct($T04().get_graphicsDevice(), 1, 1, true, $T05().Color);
    $S01().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.pixel, JSIL.Array.New($T01(), [this.color]));
    var direction = $T00().op_Subtraction(this.p2, this.p1);
    this.$length = +direction.Length();
    this.angle = Math.fround(Math.atan2(direction.Y, direction.X));
  };

  function Line_Draw (spriteBatch) {
    spriteBatch.Draw(
      this.pixel, 
      $S02().Construct(this.p1.X, this.p1.Y), 
      null, 
      this.color, 
      this.angle, 
      $S02().Construct(0, 0.5), 
      $S02().Construct(this.$length, this.thickness), 
      $T09().None, 
      1
    );
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Line", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Single
        ]), 
      Line__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Line_Draw
    );

    $.Field({Static:false, Public:false}, "pixel", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "p1", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "p2", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "$length", $.Single); 
    $.Field({Static:false, Public:false}, "angle", $.Single); 
    $.Field({Static:false, Public:false}, "color", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "thickness", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Helper */ 

(function Helper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Helper__ctor () {
  };

  function Helper_CrossProduct (a, b) {
    return ((+a.X * +b.Y) - (+a.Y * +b.X));
  };

  function Helper_EliminateDuplicates$b1 (T, v) {
    var $s00 = new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [T]), null);
    var temp = $s00.Construct();

    for (var i = 0; i < (v.get_Count() | 0); i = ((i + 1) | 0)) {
      if (!temp.Contains(JSIL.CloneParameter(T, v.get_Item(i)))) {
        temp.Add(JSIL.CloneParameter(T, v.get_Item(i)));
      }
    }
    return temp;
  };

  function Helper_GetPreviousValue$b1 (T, vIn, l) {
    var t = (((+vIn.Y * +((l.get_Item(0)).get_Count())) + +vIn.X) | 0);
    if (t > 0) {
      t = ((t - 1) | 0);
    }
    var yy = ((t / ((l.get_Item(0)).get_Count() | 0)) | 0);
    var xx = ((t % ((l.get_Item(0)).get_Count() | 0)) | 0);
    if (xx > (l.get_Count() | 0)) {
      xx = 0;
      yy = ((yy + 1) | 0);
    }
    return $S00().Construct(+xx, +yy);
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Helper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Helper__ctor
    );

    $.Method({Static:true , Public:true }, "CrossProduct", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Helper_CrossProduct
    );

    $.Method({Static:true , Public:true }, "EliminateDuplicates", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm06.TypeRef("System.Collections.Generic.List`1", ["!!0"])], ["T"]), 
      Helper_EliminateDuplicates$b1
    );

    $.Method({Static:true , Public:true }, "GetPreviousValue", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", ["!!0"])])], ["T"]), 
      Helper_GetPreviousValue$b1
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.TriangleClippingScene */ 

(function TriangleClippingScene$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.TriangleScene)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.HumanGraphicsPipelineXna.Polygon))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.HumanGraphicsPipelineXna.Square))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Boolean))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Vector2)))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Line)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.HumanGraphicsPipelineXna.Line))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Polygon)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Square)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Single))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm09.System.Linq.Enumerable)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm06.System.Collections.Generic.IEnumerable$b1.Of($asm01.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Helper)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm0B.System.Drawing.Point))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0B.System.Drawing.Point)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm01.Microsoft.Xna.Framework.Color))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0B.System.Drawing.Color)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm06.System.Random)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Inputs)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Polygon")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Square")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Boolean")]), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])]), null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Line")]), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Single")]), null))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm0B.TypeRef("System.Drawing.Point")]), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), null))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Drawing.Point"), [$asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Int32")]))) ();
  };

  function TriangleClippingScene__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function TriangleClippingScene_ActionOnTrianglePlaced (spriteBatch) {
  };

  function TriangleClippingScene_CheckLineIntersection (p1, p2, q1, q2, /* ref */ intersectionPoint) {
    intersectionPoint.set($S00().Construct(-Infinity));
    var xD = +p2.X - +p1.X;
    var xD2 = +q2.X - +q1.X;
    var yD = +p2.Y - +p1.Y;
    var yD2 = +q2.Y - +q1.Y;
    var xD3 = +p1.X - +q1.X;
    var yD3 = +p1.Y - +q1.Y;
    var len = (Math.sqrt(((xD * xD) + (yD * yD))));
    var len2 = (Math.sqrt(((xD2 * xD2) + (yD2 * yD2))));
    var dot = (xD * xD2) + (yD * yD2);
    var deg = +((dot / (len * len2)));
    var div = (yD2 * xD) - (xD2 * yD);
    var ua = +((((xD2 * yD3) - (yD2 * xD3)) / div));
    var ub = +((((xD * yD3) - (yD * xD3)) / div));
    var pt = $S01().Construct(Math.fround(+p1.X + (ua * xD)), Math.fround(+p1.Y + (ua * yD)));
    xD = +pt.X - +p1.X;
    xD2 = +pt.X - +p2.X;
    yD = +pt.Y - +p1.Y;
    yD2 = +pt.Y - +p2.Y;
    var segmentLength = (Math.sqrt(((xD * xD) + (yD * yD)))) + (Math.sqrt(((xD2 * xD2) + (yD2 * yD2))));
    xD = +pt.X - +q1.X;
    xD2 = +pt.X - +q2.X;
    yD = +pt.Y - +q1.Y;
    yD2 = +pt.Y - +q2.Y;
    var segmentLength2 = (Math.sqrt(((xD * xD) + (yD * yD)))) + (Math.sqrt(((xD2 * xD2) + (yD2 * yD2))));
    if (!(((Math.abs((len - segmentLength))) <= 0.01) && ((Math.abs((len2 - segmentLength2))) <= 0.01))) {
      var result = false;
    } else if (!(!(((Math.round(pt.X)) === (Math.round(p1.X))) && 
          ((Math.round(pt.Y)) === (Math.round(p1.Y)))) && (((Math.round(pt.X)) !== (Math.round(p2.X))) || 
          ((Math.round(pt.Y)) !== (Math.round(p2.Y)))))) {
      result = false;
    } else if (!((+((+pt.X / 2)) === +((+pt.X / 2))) && (+((+pt.Y / 2)) === +((+pt.Y / 2))))) {
      result = false;
    } else {
      intersectionPoint.set(pt.MemberwiseClone());
      result = true;
    }
    return result;
  };

  function TriangleClippingScene_CorrectNormalisedTriangle (state) {
    var bX = +((+this.normalisedTrianglePoints[(((state | 0) - 1) | 0)].X / 2));
    var pX = +this.normalisedTrianglePoints[(((state | 0) - 1) | 0)].X + bX;
    var aY = +this.normalisedTrianglePoints[(((state | 0) - 1) | 0)].Y;
    var bY = +((+this.normalisedTrianglePoints[(((state | 0) - 1) | 0)].Y / 2));
    var pY = aY + bY;
    this.normalisedTrianglePoints[(((state | 0) - 1) | 0)] = $S01().Construct(pX, pY);
  };

  function TriangleClippingScene_DerivedInit () {
    $T00().prototype.DerivedInit.call(this);
    this.polyList = $S02().Construct();
    this.squareList = $S03().Construct();
    this.isOutsideList = $S04().Construct();
    this.intersectionsLists = $S05().Construct();
    this.pointTopLeft = $S01().Construct(+((($T0C().get_viewportWidth() | 0) / 6 | 0)), +((($T0C().get_viewportHeight() | 0) / 6 | 0)));
    this.pointTopRight = $S01().Construct(+(($T0C().get_viewportWidth() | 0) - ((($T0C().get_viewportWidth() | 0) / 6) | 0)), +((($T0C().get_viewportHeight() | 0) / 6 | 0)));
    this.pointBottomLeft = $S01().Construct(+((($T0C().get_viewportWidth() | 0) / 6 | 0)), +(($T0C().get_viewportHeight() | 0) - ((($T0C().get_viewportHeight() | 0) / 6) | 0)));
    this.pointBottomRight = $S01().Construct(+(($T0C().get_viewportWidth() | 0) - ((($T0C().get_viewportWidth() | 0) / 6) | 0)), +(($T0C().get_viewportHeight() | 0) - ((($T0C().get_viewportHeight() | 0) / 6) | 0)));
    this.lineTop = new ($T0D())(this.pointTopLeft.MemberwiseClone(), this.pointTopRight.MemberwiseClone(), $T0E().get_Black().MemberwiseClone(), 1);
    this.lineLeft = new ($T0D())(this.pointTopLeft.MemberwiseClone(), this.pointBottomLeft.MemberwiseClone(), $T0E().get_Black().MemberwiseClone(), 1);
    this.lineBottom = new ($T0D())(this.pointBottomLeft.MemberwiseClone(), this.pointBottomRight.MemberwiseClone(), $T0E().get_Black().MemberwiseClone(), 1);
    this.lineRight = new ($T0D())(this.pointTopRight.MemberwiseClone(), this.pointBottomRight.MemberwiseClone(), $T0E().get_Black().MemberwiseClone(), 1);
    this.lineBoundaries = ($S06().Construct()).__Initialize__([[$S01().Construct(-2.14748365E+09, this.pointTopLeft.Y)], [$S01().Construct(2.14748365E+09, this.pointTopRight.Y)], [$S01().Construct(this.pointBottomLeft.X, -2.14748365E+09)], [$S01().Construct(this.pointTopLeft.X, 2.14748365E+09)], [$S01().Construct(-2.14748365E+09, this.pointBottomLeft.Y)], [$S01().Construct(2.14748365E+09, this.pointBottomRight.Y)], [$S01().Construct(this.pointTopRight.X, -2.14748365E+09)], [$S01().Construct(this.pointBottomRight.X, 2.14748365E+09)]]);
    this.linesOutput = $S07().Construct();
  };

  function TriangleClippingScene_Draw (spriteBatch) {
    if (this.polyList !== null) {

      for (var i = 0; i < ((this.polyList).get_Count() | 0); i = ((i + 1) | 0)) {
        ((this.polyList).get_Item(i)).Draw(spriteBatch);
      }
    }
    $T00().prototype.Draw.call(this, spriteBatch);

    for (i = ((((this.linesOutput).get_Count() | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      ((this.linesOutput).get_Item(i)).Draw(spriteBatch);
    }
    (this.lineTop).Draw(spriteBatch);
    (this.lineLeft).Draw(spriteBatch);
    (this.lineBottom).Draw(spriteBatch);
    (this.lineRight).Draw(spriteBatch);

    for (i = 0; i < ((this.squareList).get_Count() | 0); i = ((i + 1) | 0)) {
      ((this.squareList).get_Item(i)).Draw(spriteBatch);
    }
  };

  function TriangleClippingScene_DrawOnAnimate (spriteBatch) {
  };

  function TriangleClippingScene_FindPointInPolygon (points, p) {
    var v = $S08().Construct();

    for (var i = 1; i < (points.get_Count() | 0); i = ((i + 1) | 0)) {
      v.Add(this.orient2d(
          points.get_Item(((i - 1) | 0)), 
          points.get_Item(i), 
          p
        ));
    }
    v.Add(this.orient2d(
        points.get_Item((((points.get_Count() | 0) - 1) | 0)), 
        points.get_Item(0), 
        p
      ));
    var negative = false;
    if (+v.get_Item(0) < 0) {
      negative = true;
    }

  $loop1: 
    for (i = 0; i < (v.get_Count() | 0); ) {
      if (!(!negative || (+v.get_Item(i) < 0))) {
        var result = false;
      } else {
        if (negative || (+v.get_Item(i) >= 0)) {
          i = ((i + 1) | 0);
          continue $loop1;
        }
        result = false;
      }
      return result;
    }
    result = true;
    return result;
  };

  function TriangleClippingScene_LastPointPlaced (gameTime) {
    var xC = new ($T0E())();
    this.CorrectNormalisedTriangle(this.triangleCount);

    for (var i = 0; i < (this.triangleCount | 0); i = ((i + 1) | 0)) {
      (this.isOutsideList).Add(((Math.abs(this.normalisedTrianglePoints[i].X)) >= 1) || ((Math.abs(this.normalisedTrianglePoints[i].Y)) >= 1));
      (this.intersectionsLists).Add($S06().Construct());
    }
    i = 0;
    var v = new JSIL.BoxedVariable(null);

    while (i < 8) {
      v.set($T02().get_Zero().MemberwiseClone());

      for (var j = 0; j < (((this.triangleCount | 0) - 1) | 0); j = ((j + 1) | 0)) {
        var b = this.CheckLineIntersection(
          this.trianglePoints[j].MemberwiseClone(), 
          this.trianglePoints[((j + 1) | 0)].MemberwiseClone(), 
          (this.lineBoundaries).get_Item(i), 
          (this.lineBoundaries).get_Item(((i + 1) | 0)), 
          /* ref */ v
        );
        ((this.intersectionsLists).get_Item(j)).Add(v.get().MemberwiseClone());
      }
      b = this.CheckLineIntersection(
        this.trianglePoints[(((this.triangleCount | 0) - 1) | 0)].MemberwiseClone(), 
        this.trianglePoints[0].MemberwiseClone(), 
        (this.lineBoundaries).get_Item(i), 
        (this.lineBoundaries).get_Item(((i + 1) | 0)), 
        /* ref */ v
      );
      ((this.intersectionsLists).get_Item(((((this.intersectionsLists).get_Count() | 0) - 1) | 0))).Add(v.get().MemberwiseClone());
      i = ((i + 2) | 0);
    }

    for (i = 0; i < (this.triangleCount | 0); i = ((i + 1) | 0)) {

      for (j = 0; j < (((this.intersectionsLists).get_Item(i)).get_Count() | 0); j = ((j + 1) | 0)) {
        var changed = false;
        var temp = ((this.intersectionsLists).get_Item(i)).get_Item(j).MemberwiseClone();
        ((this.intersectionsLists).get_Item(i)).set_Item(j, $T02().Clamp(((this.intersectionsLists).get_Item(i)).get_Item(j).MemberwiseClone(), this.pointTopLeft.MemberwiseClone(), this.pointBottomRight.MemberwiseClone()).MemberwiseClone());
        if ($T02().op_Inequality(((this.intersectionsLists).get_Item(i)).get_Item(j), temp)) {
          changed = true;
        }
        if (!(!changed || this.FindPointInPolygon(
              $T15().ToList$b1($T02())($T16().$Cast(this.trianglePoints)), 
              ((this.intersectionsLists).get_Item(i)).get_Item(j)
            ))) {
          ((this.intersectionsLists).get_Item(i)).RemoveAt(j);
          j = ((j - 1) | 0);
        }
      }
      (this.intersectionsLists).set_Item(i, $T17().EliminateDuplicates$b1($T02())((this.intersectionsLists).get_Item(i)));
      ((this.intersectionsLists).get_Item(i)).Remove($S00().Construct(-Infinity));
    }
    var tempIntersectionsTo = $S06().Construct();
    var tempIntersectionsFrom = $S06().Construct();
    this.squareList = $S03().Construct();

    for (i = 0; i < (this.triangleCount | 0); i = ((i + 1) | 0)) {

      for (j = 0; j < (((this.intersectionsLists).get_Item(i)).get_Count() | 0); j = ((j + 1) | 0)) {
        (this.squareList).Add(new ($T12())(((this.intersectionsLists).get_Item(i)).get_Item(j).MemberwiseClone(), $S01().Construct(4, 4), $T0E().get_Red().MemberwiseClone()));
      }
    }
    var pointList = $S09().Construct();
    i = 0;
    var check = new JSIL.BoxedVariable(null);
    var one = new JSIL.BoxedVariable(null);
    var result = new JSIL.BoxedVariable(0);
    var check2 = new JSIL.BoxedVariable(null);
    var result2 = new JSIL.BoxedVariable(0);

    while (i < ((this.intersectionsLists).get_Count() | 0)) {
      if ((((this.intersectionsLists).get_Item(i)).get_Count() | 0) > 1) {
        one.set(this.trianglePoints[i].MemberwiseClone());

        for (j = 1; j < (((this.intersectionsLists).get_Item(i)).get_Count() | 0); j = ((j + 1) | 0)) {
          result.set(0);
          result2.set(0);
          check.set(((this.intersectionsLists).get_Item(i)).get_Item(((j - 1) | 0)).MemberwiseClone());
          check2.set(((this.intersectionsLists).get_Item(i)).get_Item(j).MemberwiseClone());
          $T02().Distance(/* ref */ check, /* ref */ one, /* ref */ result);
          $T02().Distance(/* ref */ check2, /* ref */ one, /* ref */ result2);
          if (+result.get() > +result2.get()) {
            temp = ((this.intersectionsLists).get_Item(i)).get_Item(j).MemberwiseClone();
            ((this.intersectionsLists).get_Item(i)).set_Item(j, ((this.intersectionsLists).get_Item(i)).get_Item(((j - 1) | 0)).MemberwiseClone());
            ((this.intersectionsLists).get_Item(i)).set_Item(((j - 1) | 0), temp.MemberwiseClone());
            j = 0;
          }
        }
      }
      i = ((i + 1) | 0);
    }

    for (i = 0; i < ((this.isOutsideList).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!(this.isOutsideList).get_Item(i)) {
        pointList.Add(this.Vec2toPoint(this.trianglePoints[i].MemberwiseClone()).MemberwiseClone());
      }

      for (j = 0; j < (((this.intersectionsLists).get_Item(i)).get_Count() | 0); j = ((j + 1) | 0)) {
        pointList.Add(this.Vec2toPoint(((this.intersectionsLists).get_Item(i)).get_Item(j).MemberwiseClone()).MemberwiseClone());
      }
    }
    pointList = $T17().EliminateDuplicates$b1($T19())(pointList);
    var dCol = $S0A().Construct();
    if ((pointList.get_Count() | 0) > 0) {

      for (i = 0; i < (((pointList.get_Count() | 0) - 2) | 0); i = ((i + 1) | 0)) {
        var d = ($S09().Construct()).__Initialize__([[pointList.get_Item(0)], [pointList.get_Item(((i + 1) | 0))], [pointList.get_Item(((i + 2) | 0))]]);
        var c = $T1B().FromArgb(
          ((15 + ($T0C().Globals$rand$value.Next(127) | 0)) | 0), 
          ((15 + ($T0C().Globals$rand$value.Next(127) | 0)) | 0), 
          ((15 + ($T0C().Globals$rand$value.Next(127) | 0)) | 0)
        );
        $jsilxna.ColorFromPremultipliedInts(xC, (((c.get_R() | 0) + 15) & 0xFF), (((c.get_G() | 0) + 15) & 0xFF), (((c.get_B() | 0) + 15) & 0xFF), 255);
        (this.linesOutput).Add(new ($T0D())(this.PointtoVec2(pointList.get_Item(0).MemberwiseClone()).MemberwiseClone(), this.PointtoVec2(pointList.get_Item(((i + 1) | 0)).MemberwiseClone()).MemberwiseClone(), xC.MemberwiseClone(), 2));
        (this.linesOutput).Add(new ($T0D())(this.PointtoVec2(pointList.get_Item(((i + 1) | 0)).MemberwiseClone()).MemberwiseClone(), this.PointtoVec2(pointList.get_Item(((i + 2) | 0)).MemberwiseClone()).MemberwiseClone(), xC.MemberwiseClone(), 2));
        (this.linesOutput).Add(new ($T0D())(this.PointtoVec2(pointList.get_Item(((i + 2) | 0)).MemberwiseClone()).MemberwiseClone(), this.PointtoVec2(pointList.get_Item(0).MemberwiseClone()).MemberwiseClone(), xC.MemberwiseClone(), 2));
        var p = new ($T11())(d, c);
        (this.polyList).Add(p);
      }
    }
  };

  function TriangleClippingScene_orient2d (a, b, p) {
    return (((+b.X - +a.X) * (+p.Y - +a.Y)) - ((+b.Y - +a.Y) * (+p.X - +a.X)));
  };

  function TriangleClippingScene_PointtoVec2 (pointIn) {
    return $S01().Construct(+(pointIn.get_X()), +(pointIn.get_Y()));
  };

  function TriangleClippingScene_StateChanges (gameTime) {
    $T00().prototype.StateChanges.call(this, gameTime);
    if (!((($T1E().Inputs$MouseState$value.get_LeftButton().valueOf() | 0) !== 0) || ($T1E().Inputs$MouseStatePrevious$value.get_LeftButton() !== $T1F().Pressed))) {
      if ((this.state | 0) <= (this.triangleCount | 0)) {
        this.CorrectNormalisedTriangle(this.state);
      }
    }
  };

  function TriangleClippingScene_Vec2toPoint (vecIn) {
    return $S0B().Construct(((vecIn.X) | 0), ((vecIn.Y) | 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("HumanGraphicsPipelineXna.TriangleScene"), 
      Name: "HumanGraphicsPipelineXna.TriangleClippingScene", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      TriangleClippingScene__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ActionOnTrianglePlaced", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      TriangleClippingScene_ActionOnTrianglePlaced
    );

    $.Method({Static:false, Public:false}, "CheckLineIntersection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])
        ]), 
      TriangleClippingScene_CheckLineIntersection
    );

    $.Method({Static:false, Public:false}, "CorrectNormalisedTriangle", 
      JSIL.MethodSignature.Action($.Int32), 
      TriangleClippingScene_CorrectNormalisedTriangle
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DerivedInit", 
      JSIL.MethodSignature.Void, 
      TriangleClippingScene_DerivedInit
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      TriangleClippingScene_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DrawOnAnimate", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      TriangleClippingScene_DrawOnAnimate
    );

    $.Method({Static:false, Public:true }, "FindPointInPolygon", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      TriangleClippingScene_FindPointInPolygon
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LastPointPlaced", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      TriangleClippingScene_LastPointPlaced
    );

    $.Method({Static:false, Public:false}, "orient2d", 
      new JSIL.MethodSignature($.Single, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      TriangleClippingScene_orient2d
    );

    $.Method({Static:false, Public:false}, "PointtoVec2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm0B.TypeRef("System.Drawing.Point")]), 
      TriangleClippingScene_PointtoVec2
    );

    $.Method({Static:false, Public:false, Virtual:true }, "StateChanges", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      TriangleClippingScene_StateChanges
    );

    $.Method({Static:false, Public:false}, "Vec2toPoint", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Point"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      TriangleClippingScene_Vec2toPoint
    );

    $.Field({Static:false, Public:false}, "pointTopLeft", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "pointTopRight", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "pointBottomLeft", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "pointBottomRight", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "lineBoundaries", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])); 
    $.Field({Static:false, Public:false}, "lineTop", $asm00.TypeRef("HumanGraphicsPipelineXna.Line")); 
    $.Field({Static:false, Public:false}, "lineLeft", $asm00.TypeRef("HumanGraphicsPipelineXna.Line")); 
    $.Field({Static:false, Public:false}, "lineBottom", $asm00.TypeRef("HumanGraphicsPipelineXna.Line")); 
    $.Field({Static:false, Public:false}, "lineRight", $asm00.TypeRef("HumanGraphicsPipelineXna.Line")); 
    $.Field({Static:false, Public:false}, "polyList", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Polygon")])); 
    $.Field({Static:false, Public:false}, "intersectionsLists", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])])); 
    $.Field({Static:false, Public:false}, "squareList", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Square")])); 
    $.Field({Static:false, Public:false}, "linesOutput", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Line")])); 
    $.Field({Static:false, Public:false}, "isOutsideList", $asm06.TypeRef("System.Collections.Generic.List`1", [$.Boolean])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

