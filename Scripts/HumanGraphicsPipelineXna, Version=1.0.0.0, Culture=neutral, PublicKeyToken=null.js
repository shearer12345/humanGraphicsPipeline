/* Generated by JSIL v0.7.9 build 30861. See http://jsil.org/ for more information. */ 
var $asm00 = JSIL.DeclareAssembly("HumanGraphicsPipelineXna, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm00, $asm00.TypeRef("HumanGraphicsPipelineXna.Program"), "Main", JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.String")])));

JSIL.DeclareNamespace("HumanGraphicsPipelineXna");
/* class HumanGraphicsPipelineXna.Scene */ 

(function Scene$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Scene_ThisBackToMenu)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Delegate)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Threading.Interlocked)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Color))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm06.TypeRef("System.Int32"), 
        $asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Boolean"), 
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Scene__ctor () {
    this.animating = false;
    this.state = 0;
    this.Init();
    this.DerivedInit();
  };

  function Scene_add_BackToMenu (value) {
    var thisBackToMenu = this.BackToMenu;

    do {
      var thisBackToMenu2 = thisBackToMenu;
      var value2 = $T01().Combine(thisBackToMenu2, value);
      thisBackToMenu = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "BackToMenu"), value2, thisBackToMenu2);
    } while (thisBackToMenu !== thisBackToMenu2);
  };

  function Scene_Draw (spriteBatch) {
    this.DrawGrid(spriteBatch);
    this.buttonPrevious.Draw(spriteBatch);
    this.buttonPlay.Draw(spriteBatch);
    this.buttonNext.Draw(spriteBatch);
    this.buttonReset.Draw(spriteBatch);
    this.buttonBack.Draw(spriteBatch);
    this.DrawText(spriteBatch);
  };

  function Scene_DrawGrid (spriteBatch) {
    var $temp00, $temp01;
    $temp00 = new ($T05())();
    $temp01 = new ($T05())();

    for (var i = 0; i <= (($T07().get_viewportHeight() / $T07().Globals$pixelSize$value) | 0); i = ((i + 1) | 0)) {
      spriteBatch.DrawRect(
        this.gridLine, 
        ($temp00._ctor(
            0, 
            (Math.imul(i, (($T07().get_viewportHeight() / (($T07().get_viewportHeight() / $T07().Globals$pixelSize$value) | 0)) | 0)) | 0), 
            $T07().get_viewportWidth(), 
            1
          ), 
          $temp00), 
        $T08().get_White()
      );
    }

    for (i = 0; i <= (($T07().get_viewportWidth() / $T07().Globals$pixelSize$value) | 0); i = ((i + 1) | 0)) {
      spriteBatch.DrawRect(
        this.gridLine, 
        ($temp01._ctor(
            (Math.imul(i, (($T07().get_viewportWidth() / (($T07().get_viewportWidth() / $T07().Globals$pixelSize$value) | 0)) | 0)) | 0), 
            0, 
            1, 
            $T07().get_viewportHeight()
          ), 
          $temp01), 
        $T08().get_White()
      );
    }
    spriteBatch.DrawRect(
      this.windowSpaceLine, 
      new ($T05())((((($T07().get_viewportWidth() / 2) | 0) - 2) | 0), 0, 4, $T07().get_viewportHeight()), 
      $T08().get_White()
    );
    spriteBatch.DrawRect(
      this.windowSpaceLine, 
      new ($T05())(0, (((($T07().get_viewportHeight() / 2) | 0) - 2) | 0), $T07().get_viewportWidth(), 4), 
      $T08().get_White()
    );
  };

  function Scene_DrawText (spriteBatch) {
  };

  function Scene_Init () {
    this.animationCounter = -1;
    this.animationCounterLimit = 0;
    this.gridLine = $S00().Construct($T07().get_graphicsDevice(), 1, 1, false, $T0A().Color);
    var pixels = JSIL.Array.New($T08(), 1);

    for (var i = 0; i < 1; i = ((i + 1) | 0)) {
      pixels[i] = ($jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 100));
    }
    $S01().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.gridLine, pixels);
    this.windowSpaceLine = $S00().Construct($T07().get_graphicsDevice(), 1, 1, false, $T0A().Color);
    pixels[0] = ($jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 255));
    $S01().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.windowSpaceLine, pixels);
    this.SetButtons();
  };

  function Scene_NormalisePoints (vIn) {
    var normalisedX = +(((vIn.X - 0) / +(($T07().get_viewportWidth() / 2 | 0))) - 1);
    var normalisedY = +-(((vIn.Y - 0) / +(($T07().get_viewportHeight() / 2 | 0))) - 1);
    return $S02().Construct(normalisedX, normalisedY);
  };

  function Scene_remove_BackToMenu (value) {
    var thisBackToMenu = this.BackToMenu;

    do {
      var thisBackToMenu2 = thisBackToMenu;
      var value2 = $T01().Remove(thisBackToMenu2, value);
      thisBackToMenu = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "BackToMenu"), value2, thisBackToMenu2);
    } while (thisBackToMenu !== thisBackToMenu2);
  };

  function Scene_SetButtons () {
    this.buttonNext = new ($T04())(">", $T0E().Fonts$font14$value, $S02().Construct(30, 30), $S02().Construct(($T07().get_viewport().X - 40), ($T07().get_viewport().Y - 70)), $T08().get_DarkOliveGreen().MemberwiseClone());
    this.buttonPrevious = new ($T04())("<", $T0E().Fonts$font14$value, $S02().Construct(30, 30), $S02().Construct(($T07().get_viewport().X - 100), ($T07().get_viewport().Y - 70)), $T08().get_DarkOliveGreen().MemberwiseClone());
    this.buttonPlay = new ($T04())("||", $T0E().Fonts$font14$value, $S02().Construct(30, 30), $S02().Construct(($T07().get_viewport().X - 70), ($T07().get_viewport().Y - 70)), $T08().get_DarkSlateBlue().MemberwiseClone());
    this.buttonReset = new ($T04())("Reset", $T0E().Fonts$font14$value, $S02().Construct(90, 30), $S02().Construct(($T07().get_viewport().X - 100), ($T07().get_viewport().Y - 40)), $T08().get_DarkGreen().MemberwiseClone());
    this.buttonBack = new ($T04())("Back", $T0E().Fonts$font14$value, $S02().Construct(90, 30), $S02().Construct(+(($T07().get_viewportWidth() - 100 | 0)), +(($T07().get_viewportHeight() - 100 | 0))), $T08().get_DarkRed().MemberwiseClone());
    this.buttonPlay.add_OnClick(function (b) {
        this.animating = !this.animating;
        if (!this.animating) {
          this.buttonPlay.SetColour($asm01.Microsoft.Xna.Framework.Color.get_DarkSlateBlue().MemberwiseClone());
        } else {
          this.buttonPlay.SetColour($asm01.Microsoft.Xna.Framework.Color.get_DarkSlateGray().MemberwiseClone());
        }
      }.bind(this));
    this.buttonNext.add_OnClick(function (b) {
        if (!(this.animating || (this.animationCounter >= this.animationCounterLimit))) {
          this.animationCounter = ((this.animationCounter + 1) | 0);
        }
      }.bind(this));
    this.buttonNext.add_OnHold(function (b) {
        if (!(this.animating || (this.animationCounter >= this.animationCounterLimit))) {
          this.animationCounter = ((this.animationCounter + 1) | 0);
        }
      }.bind(this));
    this.buttonPrevious.add_OnClick(function (b) {
        if (!(this.animating || (this.animationCounter < 0))) {
          this.animationCounter = ((this.animationCounter - 1) | 0);
        }
      }.bind(this));
    this.buttonPrevious.add_OnHold(function (b) {
        if (!(this.animating || (this.animationCounter < 0))) {
          this.animationCounter = ((this.animationCounter - 1) | 0);
        }
      }.bind(this));
    this.buttonReset.add_OnClick(function (b) {
        this.Init();
        this.DerivedInit();
      }.bind(this));
    this.buttonBack.add_OnClick(function (b) {
        this.BackToMenu();
      }.bind(this));
  };

  function Scene_Update (gameTime) {
    this.StateChanges(gameTime);
    if (this.state === 42) {
      this.buttonPlay.Update(gameTime);
      this.buttonNext.Update(gameTime);
      this.buttonPrevious.Update(gameTime);
      this.buttonReset.Update(gameTime);
      this.buttonBack.Update(gameTime);
    }
    if (!(!this.animating || (this.animationCounter >= this.animationCounterLimit))) {
      this.animationCounter = ((this.animationCounter + 1) | 0);
    } else if (!(!this.animating || (this.animationCounter < this.animationCounterLimit))) {
      this.buttonPlay.EmulateClick();
    }
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Scene", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Scene__ctor
    );

    $.Method({Static:false, Public:true }, "add_BackToMenu", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Scene+ThisBackToMenu")), 
      Scene_add_BackToMenu
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Scene_Draw
    );

    $.Method({Static:false, Public:false}, "DrawGrid", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Scene_DrawGrid
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DrawText", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Scene_DrawText
    );

    $.Method({Static:false, Public:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Scene_Init
    );

    $.Method({Static:false, Public:false}, "NormalisePoints", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Scene_NormalisePoints
    );

    $.Method({Static:false, Public:true }, "remove_BackToMenu", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Scene+ThisBackToMenu")), 
      Scene_remove_BackToMenu
    );

    $.Method({Static:false, Public:false}, "SetButtons", 
      JSIL.MethodSignature.Void, 
      Scene_SetButtons
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Scene_Update
    );

    $.Field({Static:false, Public:false}, "gridLine", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "windowSpaceLine", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "animating", $.Boolean); 
    $.Field({Static:false, Public:false}, "animationCounter", $.Int32); 
    $.Field({Static:false, Public:false}, "animationCounterLimit", $.Int32); 
    $.Field({Static:false, Public:false}, "buttonNext", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonPrevious", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonPlay", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonReset", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonBack", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "state", $.Int32); 
    $.Field({Static:false, Public:false}, "BackToMenu", $asm00.TypeRef("HumanGraphicsPipelineXna.Scene+ThisBackToMenu")); 
    $.Event({Static:false, Public:true }, "BackToMenu", $asm00.TypeRef("HumanGraphicsPipelineXna.Scene+ThisBackToMenu"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum HumanGraphicsPipelineXna.Scene+State */ 

JSIL.MakeEnum(
  "HumanGraphicsPipelineXna.Scene+State", false, {
    Animated: 42
  }, false
);

/* delegate HumanGraphicsPipelineXna.Scene+ThisBackToMenu */ 

JSIL.MakeDelegate("HumanGraphicsPipelineXna.Scene+ThisBackToMenu", false, []);

/* class HumanGraphicsPipelineXna.TriangleScene */ 

(function TriangleScene$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Boolean)))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Scene)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Square)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Boolean))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.HumanGraphicsPipelineXna.Square))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Line)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Char)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm06.System.Convert)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm06.System.Type)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Inputs)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Boolean")])]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Square")])]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Single")])])]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Boolean")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Square")]), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("System.Char"), [$asm06.TypeRef("System.Int32")]))) ();
  };

  function TriangleScene__ctor () {
    this.listPixelCheck = $S00().Construct();
    this.listSquares = $S01().Construct();
    this.listResults = $S02().Construct();
    $T01().prototype._ctor.call(this);
  };

  function TriangleScene_ActionOnTriangleDraw (spriteBatch) {
    var col = new ($T03())();
    this.boundingBox.Draw(spriteBatch);
    if (this.listPixelCheck.get_Count() === 0) {
      var count = 0;

      for (var i = 0; +(i) < ((this.maximum.X - this.minimum.X) / +($T06().Globals$pixelSize$value)); i = ((i + 1) | 0)) {
        this.listPixelCheck.Add($S03().Construct());
        this.listSquares.Add($S04().Construct());

        for (var j = 0; +(j) < ((this.maximum.Y - this.minimum.Y) / +($T06().Globals$pixelSize$value)); j = ((j + 1) | 0)) {
          this.listPixelCheck.get_Item(i).Add(false);
          this.check = $S05().Construct(((this.minimum.X + +((i * $T06().Globals$pixelSize$value | 0))) + +(($T06().Globals$pixelSize$value / 2 | 0))), ((this.minimum.Y + +((j * $T06().Globals$pixelSize$value | 0))) + +(($T06().Globals$pixelSize$value / 2 | 0))));
          if (this.PerformFillingFunction(this.NormalisePoints(this.check).MemberwiseClone(), i, j)) {
            this.listPixelCheck.get_Item(i).set_Item(j, true);
            $jsilxna.ColorFromPremultipliedInts(col, 0, 120, 120, 180);
          } else {
            this.listPixelCheck.get_Item(i).set_Item(j, false);
            $jsilxna.ColorFromPremultipliedInts(col, 255, 0, 0, 100);
          }
          this.listSquares.get_Item(i).Add(new ($T04())($S05().Construct((this.minimum.X + +((i * $T06().Globals$pixelSize$value | 0))), (this.minimum.Y + +((j * $T06().Globals$pixelSize$value | 0)))), $S05().Construct(+($T06().Globals$pixelSize$value), +($T06().Globals$pixelSize$value)), col.MemberwiseClone()));
          count = ((count + 1) | 0);
        }
        count = 0;
      }
      this.animationCounterLimit = (((Math.imul(this.listPixelCheck.get_Count(), (this.listPixelCheck.get_Item(0)).get_Count()) | 0) - 2) | 0);
    }
  };

  function TriangleScene_DerivedInit () {
    this.state = 0;
    this.trianglePoints = JSIL.Array.New($T09(), 3);
    this.normalisedTrianglePoints = JSIL.Array.New($T09(), 3);
    this.triangleSquares = JSIL.Array.New($T04(), 3);
    this.triangleLines = JSIL.Array.New($T0A(), 3);
    this.listPixelCheck = $S00().Construct();
    this.listSquares = $S01().Construct();
    this.listResults = $S02().Construct();
    this.minimum = $T09().get_Zero().MemberwiseClone();
    this.maximum = $T09().get_Zero().MemberwiseClone();
    this.check = $T09().get_Zero().MemberwiseClone();
    this.previousPixelInBox = $T09().get_Zero().MemberwiseClone();
    this.pixelInBox = $T09().get_Zero().MemberwiseClone();
  };

  function TriangleScene_Draw (spriteBatch) {
    var $temp00, $temp01;
    $temp00 = new ($T09())();
    $temp01 = new ($T09())();
    $T01().prototype.Draw.call(this, spriteBatch);
    var normalisedScreen = $T09().Normalize($S05().Construct($T06().get_viewport().X, $T06().get_viewport().Y));

    for (var i = 0; i < 3; i = ((i + 1) | 0)) {
      if ($T09().op_Inequality(this.trianglePoints[i], $T09().get_Zero())) {
        this.triangleSquares[i].Draw(spriteBatch);
        this.normalisedTrianglePoints[i] = this.NormalisePoints(this.trianglePoints[i]);
        spriteBatch.DrawString(
          $T0B().Fonts$arial14$value, 
          ($S06().CallStatic($T0D(), "ToChar", null, ((65 + i) | 0))).toString(), 
          ($temp00._ctor((this.trianglePoints[i].X - 20), (this.trianglePoints[i].Y - 20)), 
            $temp00), 
          $T03().get_White()
        );
      }
    }
    if ($T09().op_Inequality(this.trianglePoints[2], $T09().get_Zero())) {

      for (i = 0; i < 3; i = ((i + 1) | 0)) {
        this.triangleLines[i].Draw(spriteBatch);
      }
      this.ActionOnTriangleDraw(spriteBatch);
    }
    if (this.state === 42) {
      var breakNow = false;
      var count = 0;

    $loop2: 
      for (var j = 0; j < (this.listPixelCheck.get_Item(0)).get_Count(); j = ((j + 1) | 0)) {

      $loop3: 
        for (i = 0; i < this.listPixelCheck.get_Count(); i = ((i + 1) | 0)) {
          this.listSquares.get_Item(i).get_Item(j).Draw(spriteBatch);
          if (count > this.animationCounter) {
            if ($T09().op_Inequality(($temp01._ctor(+(i), +(j)), 
                  $temp01), this.pixelInBox)) {
              this.previousPixelInBox = $S05().Construct(this.pixelInBox.X, this.pixelInBox.Y);
            }
            var sq = new ($T04())($S05().Construct((((this.minimum.X + (this.pixelInBox.X * +($T06().Globals$pixelSize$value))) + +(($T06().Globals$pixelSize$value / 2 | 0))) - 2), (((this.minimum.Y + (+($T06().Globals$pixelSize$value) * this.pixelInBox.Y)) + +(($T06().Globals$pixelSize$value / 2 | 0))) - 2)), $S05().Construct(4, 4), $T03().get_Green().MemberwiseClone());
            sq.Draw(spriteBatch);
            breakNow = true;
            this.check = $S05().Construct(((this.minimum.X + +((i * $T06().Globals$pixelSize$value | 0))) + +(($T06().Globals$pixelSize$value / 2 | 0))), ((this.minimum.Y + +((j * $T06().Globals$pixelSize$value | 0))) + +(($T06().Globals$pixelSize$value / 2 | 0))));
            this.pixelInBox.X = +(i);
            this.pixelInBox.Y = +(j);
            break $loop3;
          }
          count = ((count + 1) | 0);
        }
        if (breakNow) {
          break $loop2;
        }
      }
    }
    var yPos = 0;
    $T0B().WriteStrokedLine(
      spriteBatch, 
      $T0B().Fonts$arial14$value, 
      JSIL.ConcatString("Point A: ", this.normalisedTrianglePoints[0]), 
      $S05().Construct(10, +(yPos = ((yPos + 20) | 0))), 
      $T03().get_White(), 
      $T03().get_Black()
    );
    $T0B().WriteStrokedLine(
      spriteBatch, 
      $T0B().Fonts$arial14$value, 
      JSIL.ConcatString("Point B: ", this.normalisedTrianglePoints[1]), 
      $S05().Construct(10, +(yPos = ((yPos + 20) | 0))), 
      $T03().get_White(), 
      $T03().get_Black()
    );
    $T0B().WriteStrokedLine(
      spriteBatch, 
      $T0B().Fonts$arial14$value, 
      JSIL.ConcatString("Point C: ", this.normalisedTrianglePoints[2]), 
      $S05().Construct(10, +((yPos + 20 | 0))), 
      $T03().get_White(), 
      $T03().get_Black()
    );
    if (this.state === 42) {
      yPos = $T06().get_viewportHeight();
      if (this.listPixelCheck.get_Item(((this.pixelInBox.X) | 0)).get_Item(((this.pixelInBox.Y) | 0))) {
        $T0B().WriteStrokedLine(
          spriteBatch, 
          $T0B().Fonts$arial14$value, 
          "Pixel is within triangle.", 
          $S05().Construct(10, +((yPos - 20 | 0))), 
          $T03().get_White(), 
          $T03().get_Black()
        );
      } else {
        $T0B().WriteStrokedLine(
          spriteBatch, 
          $T0B().Fonts$arial14$value, 
          "Pixel not within triangle.", 
          $S05().Construct(10, +((yPos - 20 | 0))), 
          $T03().get_White(), 
          $T03().get_Black()
        );
      }
    }
  };

  function TriangleScene_GetPreviousValue$b1 (T, vIn, l) {
    var t = (((vIn.Y * +((l.get_Item(0)).get_Count())) + vIn.X) | 0);
    if (t > 0) {
      t = ((t - 1) | 0);
    }
    var yy = ((t / (l.get_Item(0)).get_Count()) | 0);
    var xx = ((t % (l.get_Item(0)).get_Count()) | 0);
    if (xx > l.get_Count()) {
      xx = 0;
      yy = ((yy + 1) | 0);
    }
    return $S05().Construct(+(xx), +(yy));
  };

  function TriangleScene_LastPointPlaced (gameTime) {
    this.minimum = $S05().Construct(+($T12().Min(((this.trianglePoints[0].X) | 0), $T12().Min(((this.trianglePoints[1].X) | 0), ((this.trianglePoints[2].X) | 0)))), +($T12().Min(((this.trianglePoints[0].Y) | 0), $T12().Min(((this.trianglePoints[1].Y) | 0), ((this.trianglePoints[2].Y) | 0)))));
    this.maximum = $S05().Construct(+($T12().Max(((this.trianglePoints[0].X) | 0), $T12().Max(((this.trianglePoints[1].X) | 0), ((this.trianglePoints[2].X) | 0)))), +($T12().Max(((this.trianglePoints[0].Y) | 0), $T12().Max(((this.trianglePoints[1].Y) | 0), ((this.trianglePoints[2].Y) | 0)))));
    this.minimum = $S05().Construct((this.minimum.X - (this.minimum.X % +($T06().Globals$pixelSize$value))), (this.minimum.Y - (this.minimum.Y % +($T06().Globals$pixelSize$value))));
    this.maximum = $S05().Construct(((this.maximum.X - (this.maximum.X % +($T06().Globals$pixelSize$value))) + +($T06().Globals$pixelSize$value)), ((this.maximum.Y - (this.maximum.Y % +($T06().Globals$pixelSize$value))) + +($T06().Globals$pixelSize$value)));
    this.boundingBox = new ($T04())($S05().Construct(this.minimum.X, this.minimum.Y), $S05().Construct((this.maximum.X - this.minimum.X), (this.maximum.Y - this.minimum.Y)), $jsilxna.ColorFromPremultipliedInts(null, 255, 0, 0, 120));
  };

  function TriangleScene_StateChanges (gameTime) {
    if (!(($T14().Inputs$MouseState$value.get_LeftButton().valueOf() !== 0) || ($T14().Inputs$MouseStatePrevious$value.get_LeftButton() !== $T15().Pressed))) {
      if (this.state < 3) {
        this.trianglePoints[this.state] = $S05().Construct(+($T14().Inputs$MouseState$value.get_X()), +($T14().Inputs$MouseState$value.get_Y()));
        this.triangleSquares[this.state] = new ($T04())($S05().Construct(+(($T14().Inputs$MouseState$value.get_X() - 5 | 0)), +(($T14().Inputs$MouseState$value.get_Y() - 5 | 0))), $S05().Construct(10, 10), $T03().get_Green().MemberwiseClone());
        this.state = ((this.state + 1) | 0);
      }
      if (this.state === 3) {
        this.state = 42;
        this.LastPointPlaced(gameTime);
        this.triangleLines[0] = new ($T0A())(this.trianglePoints[0].MemberwiseClone(), this.trianglePoints[1].MemberwiseClone(), $T03().get_Black().MemberwiseClone(), 1);
        this.triangleLines[1] = new ($T0A())(this.trianglePoints[1].MemberwiseClone(), this.trianglePoints[2].MemberwiseClone(), $T03().get_Black().MemberwiseClone(), 1);
        this.triangleLines[2] = new ($T0A())(this.trianglePoints[2].MemberwiseClone(), this.trianglePoints[0].MemberwiseClone(), $T03().get_Black().MemberwiseClone(), 1);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("HumanGraphicsPipelineXna.Scene"), 
      Name: "HumanGraphicsPipelineXna.TriangleScene", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TriangleScene__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ActionOnTriangleDraw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      TriangleScene_ActionOnTriangleDraw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DerivedInit", 
      JSIL.MethodSignature.Void, 
      TriangleScene_DerivedInit
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      TriangleScene_Draw
    );

    $.Method({Static:false, Public:false}, "GetPreviousValue", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", ["!!0"])])], ["T"]), 
      TriangleScene_GetPreviousValue$b1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LastPointPlaced", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      TriangleScene_LastPointPlaced
    );

    $.Method({Static:false, Public:false, Virtual:true }, "StateChanges", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      TriangleScene_StateChanges
    );

    $.Field({Static:false, Public:false}, "trianglePoints", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])); 
    $.Field({Static:false, Public:false}, "normalisedTrianglePoints", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])); 
    $.Field({Static:false, Public:false}, "triangleSquares", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("HumanGraphicsPipelineXna.Square")])); 
    $.Field({Static:false, Public:false}, "triangleLines", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("HumanGraphicsPipelineXna.Line")])); 
    $.Field({Static:false, Public:false}, "minimum", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "maximum", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "check", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "previousPixelInBox", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "pixelInBox", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "boundingBox", $asm00.TypeRef("HumanGraphicsPipelineXna.Square")); 
    $.Field({Static:false, Public:false}, "listPixelCheck", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$.Boolean])])); 
    $.Field({Static:false, Public:false}, "listSquares", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("HumanGraphicsPipelineXna.Square")])])); 
    $.Field({Static:false, Public:false}, "listResults", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Single])])])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum HumanGraphicsPipelineXna.TriangleScene+TriangleState */ 

JSIL.MakeEnum(
  "HumanGraphicsPipelineXna.TriangleScene+TriangleState", false, {
    PickPoint1: 0, 
    PickPoint2: 1, 
    PickPoint3: 2, 
    Animate: 42
  }, false
);

/* class HumanGraphicsPipelineXna.Barycentric */ 

(function Barycentric$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.TriangleScene)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Scene)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.List$b1.Of(System.Array.Of($asm06.System.Single))))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of(System.Array.Of($asm06.System.Single)))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Helper)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Single")])]), null))) ();
  };

  function Barycentric__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Barycentric_Draw (spriteBatch) {
    $T00().prototype.Draw.call(this, spriteBatch);
    this.DrawText(spriteBatch);
  };

  function Barycentric_DrawText (spriteBatch) {
    var yPos = $T04().get_viewportHeight();
    yPos = ((yPos - 20) | 0);
    if (this.listResults.get_Count() > 0) {
      $T06().WriteStrokedLine(
        spriteBatch, 
        $T06().Fonts$arial14$value, 
        JSIL.ConcatString("S+T: ", this.listResults.get_Item(((this.pixelInBox.X) | 0)).get_Item(((this.pixelInBox.Y) | 0))[2]), 
        $S00().Construct(10, +(yPos = ((yPos - 20) | 0))), 
        $T0B().get_White(), 
        $T0B().get_Black()
      );
      $T06().WriteStrokedLine(
        spriteBatch, 
        $T06().Fonts$arial14$value, 
        JSIL.ConcatString("T: ", this.listResults.get_Item(((this.pixelInBox.X) | 0)).get_Item(((this.pixelInBox.Y) | 0))[1]), 
        $S00().Construct(10, +(yPos = ((yPos - 20) | 0))), 
        $T0B().get_White(), 
        $T0B().get_Black()
      );
      $T06().WriteStrokedLine(
        spriteBatch, 
        $T06().Fonts$arial14$value, 
        JSIL.ConcatString("S: ", this.listResults.get_Item(((this.pixelInBox.X) | 0)).get_Item(((this.pixelInBox.Y) | 0))[0]), 
        $S00().Construct(10, +((yPos - 20 | 0))), 
        $T0B().get_White(), 
        $T0B().get_Black()
      );
    }
  };

  function Barycentric_PerformFillingFunction (p, i, j) {
    if (i === this.listResults.get_Count()) {
      this.listResults.Add($S01().Construct());
    }
    var vs = $S00().Construct((this.normalisedTrianglePoints[1].X - this.normalisedTrianglePoints[0].X), (this.normalisedTrianglePoints[1].Y - this.normalisedTrianglePoints[0].Y));
    var vs2 = $S00().Construct((this.normalisedTrianglePoints[2].X - this.normalisedTrianglePoints[0].X), (this.normalisedTrianglePoints[2].Y - this.normalisedTrianglePoints[0].Y));
    var q = $S00().Construct((p.X - this.normalisedTrianglePoints[0].X), (p.Y - this.normalisedTrianglePoints[0].Y));
    var s = +($T0C().CrossProduct(q, vs2) / $T0C().CrossProduct(vs, vs2));
    var t = +($T0C().CrossProduct(vs, q) / $T0C().CrossProduct(vs, vs2));
    this.listResults.get_Item(i).Add(JSIL.Array.New($T09(), 3));
    this.listResults.get_Item(i).get_Item(j)[0] = +s;
    this.listResults.get_Item(i).get_Item(j)[1] = +t;
    this.listResults.get_Item(i).get_Item(j)[2] = +(s + t);
    return !((s < 0) || 
      (t < 0) || ((s + t) > 1));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("HumanGraphicsPipelineXna.TriangleScene"), 
      Name: "HumanGraphicsPipelineXna.Barycentric", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Barycentric__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Barycentric_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DrawText", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Barycentric_DrawText
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PerformFillingFunction", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Int32, 
          $.Int32
        ]), 
      Barycentric_PerformFillingFunction
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Button */ 

(function Button$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button_ThisOnClick)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Delegate)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm06.System.Threading.Interlocked)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button_ThisOnHold)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Inputs)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.System.Console)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Color))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm06.TypeRef("System.Int32"), 
        $asm06.TypeRef("System.Int32")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };

  function Button__ctor (s, f, dim, pos, col) {
    this.thresh = +500;
    this.pressTimer = $T04().Zero.MemberwiseClone();
    this.text = s;
    this.dimensions = $S00().Construct(dim.X, dim.Y);
    this.position = pos;
    this.SetColour(col);
    this.textSize = f.MeasureString(s).MemberwiseClone();
    this.textCentre = $S00().Construct(+(($T08().Globals$graphics$value.get_GraphicsDevice().get_Viewport().get_Width() / 2 | 0)), dim.Y);
    this.font = f;
  };

  function Button_add_OnClick (value) {
    var thisOnClick = this.OnClick;

    do {
      var thisOnClick2 = thisOnClick;
      var value2 = $T0A().Combine(thisOnClick2, value);
      thisOnClick = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "OnClick"), value2, thisOnClick2);
    } while (thisOnClick !== thisOnClick2);
  };

  function Button_add_OnHold (value) {
    var thisOnHold = this.OnHold;

    do {
      var thisOnHold2 = thisOnHold;
      var value2 = $T0A().Combine(thisOnHold2, value);
      thisOnHold = $T0B().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "OnHold"), value2, thisOnHold2);
    } while (thisOnHold !== thisOnHold2);
  };

  function Button_Draw (spriteBatch) {
    spriteBatch.DrawRect(this.tex, new ($T0E())(((this.position.X) | 0), ((this.position.Y) | 0), ((this.dimensions.X) | 0), ((this.dimensions.Y) | 0)), $T03().get_White());
    spriteBatch.DrawStringScaleF(
      this.font, 
      this.text, 
      $S00().Construct(((+(((this.position.X) | 0)) + (this.dimensions.X / 2)) - (this.textSize.X / 2)), ((+(((this.position.Y) | 0)) + (this.dimensions.Y / 2)) - (this.textSize.Y / 2))), 
      $T03().get_White(), 
      0, 
      $T02().get_Zero(), 
      1, 
      $T0F().None, 
      1
    );
  };

  function Button_EmulateClick () {
    if (this.OnClick !== null) {
      this.OnClick(this);
    }
  };

  function Button_IsClicked (gameTime) {
    if (!(!(new ($T0E())(((this.position.X) | 0), ((this.position.Y) | 0), ((this.dimensions.X) | 0), ((this.dimensions.Y) | 0))).Contains(
          $T12().Inputs$MouseState$value.get_X(), 
          $T12().Inputs$MouseState$value.get_Y()
        ) || ($T12().Inputs$MouseState$value.get_LeftButton() !== $T13().Pressed))) {
      this.pressTimer = $T04().op_Addition(this.pressTimer, gameTime.get_ElapsedGameTime()).MemberwiseClone();
      $T14().WriteLine(gameTime.get_ElapsedGameTime().get_TotalMilliseconds());
      if (this.pressTimer.get_TotalMilliseconds() <= gameTime.get_ElapsedGameTime().get_TotalMilliseconds()) {
        var result = true;
        return result;
      }
    } else if (!((this.pressTimer.get_TotalMilliseconds() <= 0) || ($T12().Inputs$MouseState$value.get_LeftButton() !== $T13().Released))) {
      this.pressTimer = $T04().Zero.MemberwiseClone();
    }
    result = false;
    return result;
  };

  function Button_remove_OnClick (value) {
    var thisOnClick = this.OnClick;

    do {
      var thisOnClick2 = thisOnClick;
      var value2 = $T0A().Remove(thisOnClick2, value);
      thisOnClick = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "OnClick"), value2, thisOnClick2);
    } while (thisOnClick !== thisOnClick2);
  };

  function Button_remove_OnHold (value) {
    var thisOnHold = this.OnHold;

    do {
      var thisOnHold2 = thisOnHold;
      var value2 = $T0A().Remove(thisOnHold2, value);
      thisOnHold = $T0B().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "OnHold"), value2, thisOnHold2);
    } while (thisOnHold !== thisOnHold2);
  };

  function Button_SetColour (col) {
    var pixels = JSIL.Array.New($T03(), [$jsilxna.ColorFromPremultipliedInts(null, col.get_R(), col.get_G(), col.get_B(), col.get_A())]);
    this.tex = $S01().Construct($T08().Globals$graphics$value.get_GraphicsDevice(), 1, 1);
    $S02().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.tex, pixels);
  };

  function Button_Update (gameTime) {
    if (!((this.OnClick === null) || !this.IsClicked(gameTime))) {
      this.OnClick(this);
    } else if (!((this.OnHold === null) || (this.pressTimer.get_TotalMilliseconds() <= this.thresh))) {
      this.OnHold(this);
    }
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Button", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      Button__ctor
    );

    $.Method({Static:false, Public:true }, "add_OnClick", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnClick")), 
      Button_add_OnClick
    );

    $.Method({Static:false, Public:true }, "add_OnHold", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnHold")), 
      Button_add_OnHold
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Button_Draw
    );

    $.Method({Static:false, Public:true }, "EmulateClick", 
      JSIL.MethodSignature.Void, 
      Button_EmulateClick
    );

    $.Method({Static:false, Public:true }, "IsClicked", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")]), 
      Button_IsClicked
    );

    $.Method({Static:false, Public:true }, "remove_OnClick", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnClick")), 
      Button_remove_OnClick
    );

    $.Method({Static:false, Public:true }, "remove_OnHold", 
      JSIL.MethodSignature.Action($asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnHold")), 
      Button_remove_OnHold
    );

    $.Method({Static:false, Public:true }, "SetColour", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Color")), 
      Button_SetColour
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Button_Update
    );

    $.Field({Static:false, Public:false}, "thresh", $.Single); 
    $.Field({Static:false, Public:false}, "text", $.String); 
    $.Field({Static:false, Public:false}, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "dimensions", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "textSize", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "textCentre", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "font", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:false, Public:false}, "tex", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "pressTimer", $asm06.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "OnClick", $asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnClick")); 
    $.Field({Static:false, Public:false}, "OnHold", $asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnHold")); 
    $.Event({Static:false, Public:true }, "OnClick", $asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnClick"));

    $.Event({Static:false, Public:true }, "OnHold", $asm00.TypeRef("HumanGraphicsPipelineXna.Button+ThisOnHold"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate HumanGraphicsPipelineXna.Button+ThisOnClick */ 

JSIL.MakeDelegate("HumanGraphicsPipelineXna.Button+ThisOnClick", false, []);

/* delegate HumanGraphicsPipelineXna.Button+ThisOnHold */ 

JSIL.MakeDelegate("HumanGraphicsPipelineXna.Button+ThisOnHold", false, []);

/* class HumanGraphicsPipelineXna.Fonts */ 

(function Fonts$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Int32)) ();
  };

  function Fonts__ctor () {
  };

  function Fonts_get_arial14 () {
    return $thisType.Fonts$arial14$value;
  };

  function Fonts_get_font14 () {
    return $thisType.Fonts$font14$value;
  };

  function Fonts_get_smallFont () {
    return $thisType.Fonts$smallFont$value;
  };

  function Fonts_Init () {
  };

  function Fonts_set_arial14 (value) {
    $thisType.Fonts$arial14$value = value;
  };

  function Fonts_set_font14 (value) {
    $thisType.Fonts$font14$value = value;
  };

  function Fonts_set_smallFont (value) {
    $thisType.Fonts$smallFont$value = value;
  };

  function Fonts_WriteStrokedLine (spriteBatch, font, text, position, textColour, strokeColour) {
    var $temp00;
    $temp00 = new ($T03())();

    for (var i = -1; i <= 1; i = ((i + 1) | 0)) {

      for (var j = -1; j <= 1; j = ((j + 1) | 0)) {
        if ((i !== 0) || (j !== 0)) {
          spriteBatch.DrawString(font, text, ($temp00._ctor((position.X + +(i)), (position.Y + +(j))), 
              $temp00), strokeColour);
        }
      }
    }
    spriteBatch.DrawString(font, text, position, textColour);
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Fonts", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Fonts__ctor
    );

    $.Method({Static:true , Public:true }, "get_arial14", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_get_arial14
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_font14", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_get_font14
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_smallFont", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_get_smallFont
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Fonts_Init
    );

    $.Method({Static:true , Public:true }, "set_arial14", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_set_arial14
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_font14", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_set_font14
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_smallFont", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")), 
      Fonts_set_smallFont
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "WriteStrokedLine", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), 
          $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      Fonts_WriteStrokedLine
    );

    $.Field({Static:true , Public:false}, "Fonts$smallFont$value", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Fonts$font14$value", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Fonts$arial14$value", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:true , Public:true }, "smallFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Property({Static:true , Public:true }, "font14", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Property({Static:true , Public:true }, "arial14", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Globals */ 

(function Globals$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Globals__ctor () {
  };

  function Globals_get_graphics () {
    return $thisType.Globals$graphics$value;
  };

  function Globals_get_graphicsDevice () {
    return $thisType.Globals$graphics$value.get_GraphicsDevice();
  };

  function Globals_get_pixelSize () {
    return $thisType.Globals$pixelSize$value;
  };

  function Globals_get_viewport () {
    return $S00().Construct(+($thisType.Globals$graphics$value.get_GraphicsDevice().get_Viewport().get_Width()), +($thisType.Globals$graphics$value.get_GraphicsDevice().get_Viewport().get_Height()));
  };

  function Globals_get_viewportHeight () {
    return (($thisType.get_viewport().Y) | 0);
  };

  function Globals_get_viewportWidth () {
    return (($thisType.get_viewport().X) | 0);
  };

  function Globals_Init () {
    $thisType.Globals$pixelSize$value = 10;
  };

  function Globals_set_graphics (value) {
    $thisType.Globals$graphics$value = value;
  };

  function Globals_set_pixelSize (value) {
    $thisType.Globals$pixelSize$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Globals", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Globals__ctor
    );

    $.Method({Static:true , Public:true }, "get_graphics", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")), 
      Globals_get_graphics
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_graphicsDevice", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      Globals_get_graphicsDevice
    );

    $.Method({Static:true , Public:true }, "get_pixelSize", 
      JSIL.MethodSignature.Return($.Int32), 
      Globals_get_pixelSize
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_viewport", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Globals_get_viewport
    );

    $.Method({Static:true , Public:true }, "get_viewportHeight", 
      JSIL.MethodSignature.Return($.Int32), 
      Globals_get_viewportHeight
    );

    $.Method({Static:true , Public:true }, "get_viewportWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      Globals_get_viewportWidth
    );

    $.Method({Static:true , Public:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Globals_Init
    );

    $.Method({Static:true , Public:true }, "set_graphics", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")), 
      Globals_set_graphics
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_pixelSize", 
      JSIL.MethodSignature.Action($.Int32), 
      Globals_set_pixelSize
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "Globals$graphics$value", $asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Globals$pixelSize$value", $.Int32)
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:true , Public:true }, "graphics", $asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager"));

    $.Property({Static:true , Public:true }, "graphicsDevice", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"));

    $.Property({Static:true , Public:true }, "viewport", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:true , Public:true }, "viewportWidth", $.Int32);

    $.Property({Static:true , Public:true }, "viewportHeight", $.Int32);

    $.Property({Static:true , Public:true }, "pixelSize", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.HalfSpace */ 

(function HalfSpace$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.TriangleScene)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm06.System.Collections.Generic.List$b1.Of(System.Array.Of($asm06.System.Single))))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of(System.Array.Of($asm06.System.Single)))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Single")])]), null))) ();
  };

  function HalfSpace__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function HalfSpace_DerivedInit () {
    $T00().prototype.DerivedInit.call(this);
    this.v0 = +0;
    this.v1 = +1;
    this.v2 = +0;
  };

  function HalfSpace_Draw (spriteBatch) {
    $T00().prototype.Draw.call(this, spriteBatch);
  };

  function HalfSpace_DrawText (spriteBatch) {
    var yPos = $T03().get_viewportHeight();
    $T04().WriteStrokedLine(
      spriteBatch, 
      $T04().Fonts$arial14$value, 
      "Place points clockwise for backface culling.", 
      $S00().Construct(+(($T03().get_viewportWidth() - 320 | 0)), 20), 
      $T06().get_White(), 
      $T06().get_Black()
    );
    if (this.listResults.get_Count() > 0) {
      $T04().WriteStrokedLine(
        spriteBatch, 
        $T04().Fonts$arial14$value, 
        JSIL.ConcatString("Orient CA: ", this.listResults.get_Item(((this.pixelInBox.X) | 0)).get_Item(((this.pixelInBox.Y) | 0))[2]), 
        $S00().Construct(10, +(yPos = ((yPos - 40) | 0))), 
        $T06().get_White(), 
        $T06().get_Black()
      );
      $T04().WriteStrokedLine(
        spriteBatch, 
        $T04().Fonts$arial14$value, 
        JSIL.ConcatString("Orient BC: ", this.listResults.get_Item(((this.pixelInBox.X) | 0)).get_Item(((this.pixelInBox.Y) | 0))[1]), 
        $S00().Construct(10, +(yPos = ((yPos - 20) | 0))), 
        $T06().get_White(), 
        $T06().get_Black()
      );
      $T04().WriteStrokedLine(
        spriteBatch, 
        $T04().Fonts$arial14$value, 
        JSIL.ConcatString("Orient AB: ", this.listResults.get_Item(((this.pixelInBox.X) | 0)).get_Item(((this.pixelInBox.Y) | 0))[0]), 
        $S00().Construct(10, +((yPos - 20 | 0))), 
        $T06().get_White(), 
        $T06().get_Black()
      );
    }
  };

  function HalfSpace_orient2d (a, b, p) {
    return +(((b.X - a.X) * (p.Y - a.Y)) - ((b.Y - a.Y) * (p.X - a.X)));
  };

  function HalfSpace_PerformFillingFunction (p, i, j) {
    if (i === this.listResults.get_Count()) {
      this.listResults.Add($S01().Construct());
    }
    this.v0 = +this.orient2d(this.normalisedTrianglePoints[0], this.normalisedTrianglePoints[1], p);
    this.v1 = +this.orient2d(this.normalisedTrianglePoints[1], this.normalisedTrianglePoints[2], p);
    this.v2 = +this.orient2d(this.normalisedTrianglePoints[2], this.normalisedTrianglePoints[0], p);
    this.listResults.get_Item(i).Add(JSIL.Array.New($T0A(), 3));
    this.listResults.get_Item(i).get_Item(j)[0] = +this.v0;
    this.listResults.get_Item(i).get_Item(j)[1] = +this.v1;
    this.listResults.get_Item(i).get_Item(j)[2] = +this.v2;
    return !((this.v0 < 0) || 
      (this.v1 < 0) || (this.v2 < 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("HumanGraphicsPipelineXna.TriangleScene"), 
      Name: "HumanGraphicsPipelineXna.HalfSpace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      HalfSpace__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DerivedInit", 
      JSIL.MethodSignature.Void, 
      HalfSpace_DerivedInit
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      HalfSpace_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DrawText", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      HalfSpace_DrawText
    );

    $.Method({Static:false, Public:false}, "orient2d", 
      new JSIL.MethodSignature($.Single, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      HalfSpace_orient2d
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PerformFillingFunction", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Int32, 
          $.Int32
        ]), 
      HalfSpace_PerformFillingFunction
    );

    $.Field({Static:false, Public:false}, "v0", $.Single); 
    $.Field({Static:false, Public:false}, "v1", $.Single); 
    $.Field({Static:false, Public:false}, "v2", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Helper */ 

(function Helper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };

  function Helper__ctor () {
  };

  function Helper_CrossProduct (a, b) {
    return +((a.X * b.Y) - (a.Y * b.X));
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Helper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Helper__ctor
    );

    $.Method({Static:true , Public:true }, "CrossProduct", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Helper_CrossProduct
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Inputs */ 

(function Inputs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Mouse)) ();
  };

  function Inputs__ctor () {
  };

  function Inputs_get_MouseState () {
    return $thisType.Inputs$MouseState$value;
  };

  function Inputs_get_MouseStatePrevious () {
    return $thisType.Inputs$MouseStatePrevious$value;
  };

  function Inputs_Init () {
  };

  function Inputs_set_MouseState (value) {
    $thisType.Inputs$MouseState$value = value;
  };

  function Inputs_set_MouseStatePrevious (value) {
    $thisType.Inputs$MouseStatePrevious$value = value;
  };

  function Inputs_Update (gameTime) {
    ($thisType.Inputs$MouseState$value = $thisType.Inputs$MouseStatePrevious$value.MemberwiseClone());
    ($thisType.Inputs$MouseStatePrevious$value = $T02().GetState().MemberwiseClone());
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Inputs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Inputs__ctor
    );

    $.Method({Static:true , Public:true }, "get_MouseState", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Inputs_get_MouseState
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MouseStatePrevious", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Inputs_get_MouseStatePrevious
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Inputs_Init
    );

    $.Method({Static:true , Public:false}, "set_MouseState", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Inputs_set_MouseState
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MouseStatePrevious", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Inputs_set_MouseStatePrevious
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "Update", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Inputs_Update
    );

    $.Field({Static:true , Public:false}, "Inputs$MouseState$value", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Inputs$MouseStatePrevious$value", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function Inputs__cctor () {
      $thisType.Inputs$MouseState$value = new $asm01.Microsoft.Xna.Framework.Input.MouseState();
      $thisType.Inputs$MouseStatePrevious$value = new $asm01.Microsoft.Xna.Framework.Input.MouseState();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Inputs__cctor
    );

    $.Property({Static:true , Public:true }, "MouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    $.Property({Static:true , Public:true }, "MouseStatePrevious", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Line */ 

(function Line$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Math)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Double)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm06.TypeRef("System.Int32"), 
        $asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Boolean"), 
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Line__ctor (point1, point2, col, thicknessIn) {
    this.p1 = point1;
    this.p2 = point2;
    this.color = col;
    this.thickness = +thicknessIn;
    this.pixel = $S00().Construct($T04().get_graphicsDevice(), 1, 1, true, $T05().Color);
    $S01().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.pixel, JSIL.Array.New($T01(), [this.color]));
    var direction = $T00().op_Subtraction(this.p2, this.p1);
    this.$length = +direction.Length();
    this.angle = Math.fround(Math.atan2(direction.Y, direction.X));
  };

  function Line_Draw (spriteBatch) {
    spriteBatch.Draw(
      this.pixel, 
      $S02().Construct(this.p1.X, this.p1.Y), 
      null, 
      this.color, 
      this.angle, 
      $S02().Construct(0, 0.5), 
      $S02().Construct(this.$length, this.thickness), 
      $T09().None, 
      1
    );
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Line", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Single
        ]), 
      Line__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Line_Draw
    );

    $.Field({Static:false, Public:false}, "pixel", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "p1", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "p2", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "$length", $.Single); 
    $.Field({Static:false, Public:false}, "angle", $.Single); 
    $.Field({Static:false, Public:false}, "color", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "thickness", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Program */ 

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm06.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Game1)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm06.System.IDisposable.Dispose)) ();
  };

  function Program_Main (args) {
    var game = new ($T01())();
    try {
      game.Run();
    } finally {
      if (game !== null) {
        $IM00().Call(game, null);
      }
    }
  };

  JSIL.MakeStaticClass("HumanGraphicsPipelineXna.Program", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "Main", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      Program_Main
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class HumanGraphicsPipelineXna.Game1 */ 

(function Game1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Game1_MenuState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.DepthStencilState)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Scene)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Button)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Fonts)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Inputs)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Game1__ctor () {
    this.menuState = $T00().TriangleFilling;
    $T01().prototype._ctor.call(this);
    $T02().Globals$graphics$value = new ($T03())(this);
    this.get_Content().set_RootDirectory("Content");
    this.set_IsFixedTimeStep(true);
    $T02().Init();
  };

  function Game1_BackToTriangleMenu () {
    this.scene = null;
    this.menuState = $T00().TriangleFilling;
  };

  function Game1_Draw (gameTime) {
    this.get_GraphicsDevice().InternalClear($T07().get_SlateGray());
    this.spriteBatch.Begin(
      $T09().Deferred, 
      $T0A().AlphaBlend, 
      $T0B().LinearClamp, 
      $T0C().None, 
      $T0D().CullNone
    );
    switch (this.menuState.valueOf()) {
      case 0: 
        this.DrawMainMenu(this.spriteBatch);
        break;

      case 1: 
        this.DrawTriangleFillingMenu(this.spriteBatch);
        break;

    }
    if (this.scene !== null) {
      this.scene.Draw(this.spriteBatch);
    }
    this.spriteBatch.End();
    $T01().prototype.Draw.call(this, gameTime);
  };

  function Game1_DrawMainMenu (spriteBatch) {
    this.buttonTriangleFilling.Draw(spriteBatch);
  };

  function Game1_DrawTriangleFillingMenu (spriteBatch) {
    this.buttonHalfSpace.Draw(spriteBatch);
    this.buttonBarycentric.Draw(spriteBatch);
  };

  function Game1_Initialize () {
    this.set_IsMouseVisible(true);
    $T01().prototype.Initialize.call(this);
  };

  function Game1_LoadContent () {
    this.spriteBatch = new ($T08())(this.get_GraphicsDevice());
    $T10().Fonts$font14$value = this.get_Content().Load$b1($T11())("Font14");
    $T10().Fonts$smallFont$value = this.get_Content().Load$b1($T11())("SmallFont");
    $T10().Fonts$arial14$value = this.get_Content().Load$b1($T11())("Arial14");
    this.SetButtons();
  };

  function Game1_SetButtons () {
    this.buttonTriangleFilling = new ($T0F())("Triangle filling", $T10().Fonts$font14$value, $S00().Construct(150, 50), $S00().Construct(10, 10), $T07().get_Red().MemberwiseClone());
    this.buttonHalfSpace = new ($T0F())("Half-space", $T10().Fonts$font14$value, $S00().Construct(150, 50), $S00().Construct(+(((($T02().get_viewportWidth() / 2) | 0) - 200 | 0)), +(((($T02().get_viewportHeight() / 2) | 0) - 25 | 0))), $T07().get_Red().MemberwiseClone());
    this.buttonBarycentric = new ($T0F())("Barycentric", $T10().Fonts$font14$value, $S00().Construct(150, 50), $S00().Construct(+(((($T02().get_viewportWidth() / 2) | 0) + 50 | 0)), +(((($T02().get_viewportHeight() / 2) | 0) - 25 | 0))), $T07().get_Red().MemberwiseClone());
    this.buttonTriangleFilling.add_OnClick(function (b) {
        this.menuState = $asm00.HumanGraphicsPipelineXna.Game1_MenuState.TriangleFilling;
      }.bind(this));
    this.buttonHalfSpace.add_OnClick(function (b) {
        this.menuState = $asm00.HumanGraphicsPipelineXna.Game1_MenuState.None;
        this.scene = new $asm00.HumanGraphicsPipelineXna.HalfSpace();
        this.scene.add_BackToMenu($asm00.HumanGraphicsPipelineXna.Scene_ThisBackToMenu.New(this, $thisType.prototype.BackToTriangleMenu));
      }.bind(this));
    this.buttonBarycentric.add_OnClick(function (b) {
        this.menuState = $asm00.HumanGraphicsPipelineXna.Game1_MenuState.None;
        this.scene = new $asm00.HumanGraphicsPipelineXna.Barycentric();
        this.scene.add_BackToMenu($asm00.HumanGraphicsPipelineXna.Scene_ThisBackToMenu.New(this, $thisType.prototype.BackToTriangleMenu));
      }.bind(this));
  };

  function Game1_UnloadContent () {
  };

  function Game1_Update (gameTime) {
    $T13().Update(gameTime);
    if (this.scene !== null) {
      this.scene.Update(gameTime);
    }
    switch (this.menuState.valueOf()) {
      case 0: 
        this.buttonTriangleFilling.Update(gameTime);
        break;

      case 1: 
        this.buttonHalfSpace.Update(gameTime);
        this.buttonBarycentric.Update(gameTime);
        break;

    }
    $T01().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.Game"), 
      Name: "HumanGraphicsPipelineXna.Game1", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Game1__ctor
    );

    $.Method({Static:false, Public:false}, "BackToTriangleMenu", 
      JSIL.MethodSignature.Void, 
      Game1_BackToTriangleMenu
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Game1_Draw
    );

    $.Method({Static:false, Public:false}, "DrawMainMenu", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Game1_DrawMainMenu
    );

    $.Method({Static:false, Public:false}, "DrawTriangleFillingMenu", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Game1_DrawTriangleFillingMenu
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      Game1_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      JSIL.MethodSignature.Void, 
      Game1_LoadContent
    );

    $.Method({Static:false, Public:true }, "SetButtons", 
      JSIL.MethodSignature.Void, 
      Game1_SetButtons
    );

    $.Method({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      JSIL.MethodSignature.Void, 
      Game1_UnloadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Game1_Update
    );

    $.Field({Static:false, Public:false}, "spriteBatch", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")); 
    $.Field({Static:false, Public:false}, "buttonHalfSpace", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonBarycentric", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "buttonTriangleFilling", $asm00.TypeRef("HumanGraphicsPipelineXna.Button")); 
    $.Field({Static:false, Public:false}, "scene", $asm00.TypeRef("HumanGraphicsPipelineXna.Scene")); 
    $.Field({Static:false, Public:false}, "menuState", $asm00.TypeRef("HumanGraphicsPipelineXna.Game1+MenuState")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum HumanGraphicsPipelineXna.Game1+MenuState */ 

JSIL.MakeEnum(
  "HumanGraphicsPipelineXna.Game1+MenuState", false, {
    Main: 0, 
    TriangleFilling: 1, 
    None: 2
  }, false
);

/* class HumanGraphicsPipelineXna.Square */ 

(function Square$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.HumanGraphicsPipelineXna.Globals)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm06.TypeRef("System.Int32"), 
        $asm06.TypeRef("System.Int32"), $asm06.TypeRef("System.Boolean"), 
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };

  function Square__ctor (pos, sizeIn, col) {
    this.pixels = JSIL.Array.New($T01(), [$T01().get_Black()]);
    this.pixels[0] = col;
    (this.Square$position$value = pos);
    this.size = sizeIn;
    this.tex = $S00().Construct($T03().get_graphicsDevice(), 1, 1, true, $T04().Color);
    $S01().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.tex, this.pixels);
  };

  function Square_Draw (spriteBatch) {
    spriteBatch.DrawRect(this.tex, new ($T06())(((this.Square$position$value.X) | 0), ((this.Square$position$value.Y) | 0), ((this.size.X) | 0), ((this.size.Y) | 0)), this.pixels[0]);
  };

  function Square_get_position () {
    return this.Square$position$value;
  };

  function Square_set_position (value) {
    this.Square$position$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "HumanGraphicsPipelineXna.Square", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      Square__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Square_Draw
    );

    $.Method({Static:false, Public:true }, "get_position", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Square_get_position
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_position", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Square_set_position
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "tex", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "pixels", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")])); 
    $.Field({Static:false, Public:false}, "size", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "Square$position$value", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

