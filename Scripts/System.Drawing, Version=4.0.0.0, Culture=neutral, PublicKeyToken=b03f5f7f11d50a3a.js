/* Generated by JSIL v0.7.9 build 30861. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm0B = JSIL.DeclareAssembly("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Drawing");
/* interface System.Drawing.IDeviceContext */ 

JSIL.MakeInterface(
  "System.Drawing.IDeviceContext", true, [], function ($) {
    $.Method({}, "GetHdc", JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr")));
    $.Method({}, "ReleaseHdc", JSIL.MethodSignature.Void);
  }, [$asm06.TypeRef("System.IDisposable")]);

JSIL.DeclareNamespace("System.Drawing.Internal");
/* class System.Drawing.Internal.DeviceContext */ 

(function DeviceContext$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Internal.DeviceContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Internal.DeviceContextType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheInitialState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDC", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateIC", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteObject", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Internal.GdiObjectType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromCompatibleDC", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHdc", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHwnd", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeviceContextType", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Internal.DeviceContextType"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_GraphicsMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Internal.DeviceContextGraphicsMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hdc", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "IntersectClip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Internal.WindowsRegion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RestoreHdc", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveHdc", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetClip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Internal.WindowsRegion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetGraphicsMode", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.DeviceContextGraphicsMode"), [$asm0B.TypeRef("System.Drawing.Internal.DeviceContextGraphicsMode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Drawing.IDeviceContext.GetHdc", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    )
      .Overrides($asm0B.TypeRef("System.Drawing.IDeviceContext"), "GetHdc");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Drawing.IDeviceContext.ReleaseHdc", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0B.TypeRef("System.Drawing.IDeviceContext"), "ReleaseHdc");

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "hDC", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "dcType", $asm0B.TypeRef("System.Drawing.Internal.DeviceContextType")); 
    $.Field({Static:false, Public:false}, "Disposing", $asm06.TypeRef("System.EventHandler")); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "hWnd", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hInitialPen", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hInitialBrush", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hInitialBmp", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hInitialFont", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hCurrentPen", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hCurrentBrush", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hCurrentBmp", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hCurrentFont", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "contextStack", $asm06.TypeRef("System.Collections.Stack")); 
    $.Property({Static:false, Public:true }, "DeviceContextType", $asm0B.TypeRef("System.Drawing.Internal.DeviceContextType"));

    $.Property({Static:false, Public:true }, "Hdc", $asm06.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "GraphicsMode", $asm0B.TypeRef("System.Drawing.Internal.DeviceContextGraphicsMode"));

    $.Event({Static:false, Public:true }, "Disposing", $asm06.TypeRef("System.EventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm0B.TypeRef("System.Drawing.IDeviceContext"), 
      /* 1 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.DeviceContext+GraphicsState */ 

(function GraphicsState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.DeviceContext+GraphicsState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "hBrush", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hFont", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hPen", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "hBitmap", $asm06.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Internal.DeviceContextGraphicsMode */ 

JSIL.MakeEnum(
  "System.Drawing.Internal.DeviceContextGraphicsMode", false, {
    ModifyWorldIdentity: 1, 
    Compatible: 1, 
    Advanced: 2
  }, false
);

/* enum System.Drawing.Internal.DeviceContextType */ 

JSIL.MakeEnum(
  "System.Drawing.Internal.DeviceContextType", false, {
    Unknown: 0, 
    Display: 1, 
    NCWindow: 2, 
    NamedDevice: 3, 
    Information: 4, 
    Memory: 5, 
    Metafile: 6
  }, false
);

/* enum System.Drawing.Internal.GdiObjectType */ 

JSIL.MakeEnum(
  "System.Drawing.Internal.GdiObjectType", false, {
    Pen: 1, 
    Brush: 2, 
    DisplayDC: 3, 
    MetafileDC: 4, 
    Palette: 5, 
    Font: 6, 
    Bitmap: 7, 
    Region: 8, 
    Metafile: 9, 
    MemoryDC: 10, 
    ExtendedPen: 11, 
    EnhancedMetafileDC: 12, 
    EnhMetafile: 13, 
    ColorSpace: 14
  }, false
);

/* class System.Drawing.Internal.WindowsRegion */ 

(function WindowsRegion$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Internal.WindowsRegion", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "CombineRegion", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RegionFlags"), [
          $.Type, $.Type, 
          $asm0B.TypeRef("System.Drawing.Internal.RegionCombineMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRegion", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHregion", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromRegion", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.Region"), $asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HRegion", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsInfinite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToRectangle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.Field({Static:false, Public:false}, "nativeHandle", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "ownHandle", $.Boolean); 
    $.Property({Static:false, Public:true }, "HRegion", $asm06.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "IsInfinite", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.ICloneable"), 
      /* 1 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Internal.RegionCombineMode */ 

JSIL.MakeEnum(
  "System.Drawing.Internal.RegionCombineMode", false, {
    AND: 1, 
    MIN: 1, 
    OR: 2, 
    XOR: 3, 
    DIFF: 4, 
    MAX: 5, 
    COPY: 5
  }, false
);

/* class System.Drawing.Internal.IntNativeMethods */ 

(function IntNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.IntNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "MaxTextLengthInWin9x", 8192); 
    $.Constant({Static:true , Public:true }, "DT_TOP", 0); 
    $.Constant({Static:true , Public:true }, "DT_LEFT", 0); 
    $.Constant({Static:true , Public:true }, "DT_CENTER", 1); 
    $.Constant({Static:true , Public:true }, "DT_RIGHT", 2); 
    $.Constant({Static:true , Public:true }, "DT_VCENTER", 4); 
    $.Constant({Static:true , Public:true }, "DT_BOTTOM", 8); 
    $.Constant({Static:true , Public:true }, "DT_WORDBREAK", 16); 
    $.Constant({Static:true , Public:true }, "DT_SINGLELINE", 32); 
    $.Constant({Static:true , Public:true }, "DT_EXPANDTABS", 64); 
    $.Constant({Static:true , Public:true }, "DT_TABSTOP", 128); 
    $.Constant({Static:true , Public:true }, "DT_NOCLIP", 256); 
    $.Constant({Static:true , Public:true }, "DT_EXTERNALLEADING", 512); 
    $.Constant({Static:true , Public:true }, "DT_CALCRECT", 1024); 
    $.Constant({Static:true , Public:true }, "DT_NOPREFIX", 2048); 
    $.Constant({Static:true , Public:true }, "DT_INTERNAL", 4096); 
    $.Constant({Static:true , Public:true }, "DT_EDITCONTROL", 8192); 
    $.Constant({Static:true , Public:true }, "DT_PATH_ELLIPSIS", 16384); 
    $.Constant({Static:true , Public:true }, "DT_END_ELLIPSIS", 32768); 
    $.Constant({Static:true , Public:true }, "DT_MODIFYSTRING", 65536); 
    $.Constant({Static:true , Public:true }, "DT_RTLREADING", 131072); 
    $.Constant({Static:true , Public:true }, "DT_WORD_ELLIPSIS", 262144); 
    $.Constant({Static:true , Public:true }, "DT_NOFULLWIDTHCHARBREAK", 524288); 
    $.Constant({Static:true , Public:true }, "DT_HIDEPREFIX", 1048576); 
    $.Constant({Static:true , Public:true }, "DT_PREFIXONLY", 2097152); 
    $.Constant({Static:true , Public:true }, "DIB_RGB_COLORS", 0); 
    $.Constant({Static:true , Public:true }, "BI_BITFIELDS", 3); 
    $.Constant({Static:true , Public:true }, "BI_RGB", 0); 
    $.Constant({Static:true , Public:true }, "BITMAPINFO_MAX_COLORSIZE", 256); 
    $.Constant({Static:true , Public:true }, "SPI_GETICONTITLELOGFONT", 31); 
    $.Constant({Static:true , Public:true }, "SPI_GETNONCLIENTMETRICS", 41); 
    $.Constant({Static:true , Public:true }, "DEFAULT_GUI_FONT", 17); 
    $.Constant({Static:true , Public:true }, "HOLLOW_BRUSH", 5); 
    $.Constant({Static:true , Public:true }, "BITSPIXEL", 12); 
    $.Constant({Static:true , Public:true }, "ALTERNATE", 1); 
    $.Constant({Static:true , Public:true }, "WINDING", 2); 
    $.Constant({Static:true , Public:true }, "SRCCOPY", 13369376); 
    $.Constant({Static:true , Public:true }, "SRCPAINT", 15597702); 
    $.Constant({Static:true , Public:true }, "SRCAND", 8913094); 
    $.Constant({Static:true , Public:true }, "SRCINVERT", 6684742); 
    $.Constant({Static:true , Public:true }, "SRCERASE", 4457256); 
    $.Constant({Static:true , Public:true }, "NOTSRCCOPY", 3342344); 
    $.Constant({Static:true , Public:true }, "NOTSRCERASE", 1114278); 
    $.Constant({Static:true , Public:true }, "MERGECOPY", 12583114); 
    $.Constant({Static:true , Public:true }, "MERGEPAINT", 12255782); 
    $.Constant({Static:true , Public:true }, "PATCOPY", 15728673); 
    $.Constant({Static:true , Public:true }, "PATPAINT", 16452105); 
    $.Constant({Static:true , Public:true }, "PATINVERT", 5898313); 
    $.Constant({Static:true , Public:true }, "DSTINVERT", 5570569); 
    $.Constant({Static:true , Public:true }, "BLACKNESS", 66); 
    $.Constant({Static:true , Public:true }, "WHITENESS", 16711778); 
    $.Constant({Static:true , Public:true }, "CAPTUREBLT", 1073741824); 
    $.Constant({Static:true , Public:true }, "FW_DONTCARE", 0); 
    $.Constant({Static:true , Public:true }, "FW_NORMAL", 400); 
    $.Constant({Static:true , Public:true }, "FW_BOLD", 700); 
    $.Constant({Static:true , Public:true }, "ANSI_CHARSET", 0); 
    $.Constant({Static:true , Public:true }, "DEFAULT_CHARSET", 1); 
    $.Constant({Static:true , Public:true }, "OUT_DEFAULT_PRECIS", 0); 
    $.Constant({Static:true , Public:true }, "OUT_TT_PRECIS", 4); 
    $.Constant({Static:true , Public:true }, "OUT_TT_ONLY_PRECIS", 7); 
    $.Constant({Static:true , Public:true }, "CLIP_DEFAULT_PRECIS", 0); 
    $.Constant({Static:true , Public:true }, "DEFAULT_QUALITY", 0); 
    $.Constant({Static:true , Public:true }, "DRAFT_QUALITY", 1); 
    $.Constant({Static:true , Public:true }, "PROOF_QUALITY", 2); 
    $.Constant({Static:true , Public:true }, "NONANTIALIASED_QUALITY", 3); 
    $.Constant({Static:true , Public:true }, "ANTIALIASED_QUALITY", 4); 
    $.Constant({Static:true , Public:true }, "CLEARTYPE_QUALITY", 5); 
    $.Constant({Static:true , Public:true }, "CLEARTYPE_NATURAL_QUALITY", 6); 
    $.Constant({Static:true , Public:true }, "OBJ_PEN", 1); 
    $.Constant({Static:true , Public:true }, "OBJ_BRUSH", 2); 
    $.Constant({Static:true , Public:true }, "OBJ_DC", 3); 
    $.Constant({Static:true , Public:true }, "OBJ_METADC", 4); 
    $.Constant({Static:true , Public:true }, "OBJ_FONT", 6); 
    $.Constant({Static:true , Public:true }, "OBJ_BITMAP", 7); 
    $.Constant({Static:true , Public:true }, "OBJ_MEMDC", 10); 
    $.Constant({Static:true , Public:true }, "OBJ_EXTPEN", 11); 
    $.Constant({Static:true , Public:true }, "OBJ_ENHMETADC", 12); 
    $.Constant({Static:true , Public:true }, "BS_SOLID", 0); 
    $.Constant({Static:true , Public:true }, "BS_HATCHED", 2); 
    $.Constant({Static:true , Public:true }, "CP_ACP", 0); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_ALLOCATE_BUFFER", 256); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_IGNORE_INSERTS", 512); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_SYSTEM", 4096); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_DEFAULT", 4608); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Internal.IntNativeMethods+RegionFlags */ 

JSIL.MakeEnum(
  "System.Drawing.Internal.IntNativeMethods+RegionFlags", false, {
    ERROR: 0, 
    NULLREGION: 1, 
    SIMPLEREGION: 2, 
    COMPLEXREGION: 3
  }, false
);

/* struct System.Drawing.Internal.IntNativeMethods+RECT */ 

(function RECT$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.Internal.IntNativeMethods+RECT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:true , Public:true }, "FromXYWH", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Size"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToRectangle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.Field({Static:false, Public:true }, "left", $.Int32); 
    $.Field({Static:false, Public:true }, "top", $.Int32); 
    $.Field({Static:false, Public:true }, "right", $.Int32); 
    $.Field({Static:false, Public:true }, "bottom", $.Int32); 
    $.Property({Static:false, Public:true }, "Size", $asm0B.TypeRef("System.Drawing.Size"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.IntNativeMethods+POINT */ 

(function POINT$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.IntNativeMethods+POINT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToPoint", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Point"))
    );

    $.Field({Static:false, Public:true }, "x", $.Int32); 
    $.Field({Static:false, Public:true }, "y", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.IntNativeMethods+DRAWTEXTPARAMS */ 

(function DRAWTEXTPARAMS$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.IntNativeMethods+DRAWTEXTPARAMS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "cbSize", $.Int32); 
    $.Field({Static:false, Public:true }, "iTabLength", $.Int32); 
    $.Field({Static:false, Public:true }, "iLeftMargin", $.Int32); 
    $.Field({Static:false, Public:true }, "iRightMargin", $.Int32); 
    $.Field({Static:false, Public:true }, "uiLengthDrawn", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.IntNativeMethods+LOGBRUSH */ 

(function LOGBRUSH$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.IntNativeMethods+LOGBRUSH", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "lbStyle", $.Int32); 
    $.Field({Static:false, Public:true }, "lbColor", $.Int32); 
    $.Field({Static:false, Public:true }, "lbHatch", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.IntNativeMethods+LOGFONT */ 

(function LOGFONT$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.IntNativeMethods+LOGFONT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:true }, "lfHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "lfWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "lfEscapement", $.Int32); 
    $.Field({Static:false, Public:true }, "lfOrientation", $.Int32); 
    $.Field({Static:false, Public:true }, "lfWeight", $.Int32); 
    $.Field({Static:false, Public:true }, "lfItalic", $.Byte); 
    $.Field({Static:false, Public:true }, "lfUnderline", $.Byte); 
    $.Field({Static:false, Public:true }, "lfStrikeOut", $.Byte); 
    $.Field({Static:false, Public:true }, "lfCharSet", $.Byte); 
    $.Field({Static:false, Public:true }, "lfOutPrecision", $.Byte); 
    $.Field({Static:false, Public:true }, "lfClipPrecision", $.Byte); 
    $.Field({Static:false, Public:true }, "lfQuality", $.Byte); 
    $.Field({Static:false, Public:true }, "lfPitchAndFamily", $.Byte); 
    $.Field({Static:false, Public:true }, "lfFaceName", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.Internal.IntNativeMethods+TEXTMETRIC */ 

(function TEXTMETRIC$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.Internal.IntNativeMethods+TEXTMETRIC", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "tmHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "tmAscent", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDescent", $.Int32); 
    $.Field({Static:false, Public:true }, "tmInternalLeading", $.Int32); 
    $.Field({Static:false, Public:true }, "tmExternalLeading", $.Int32); 
    $.Field({Static:false, Public:true }, "tmAveCharWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "tmMaxCharWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "tmWeight", $.Int32); 
    $.Field({Static:false, Public:true }, "tmOverhang", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDigitizedAspectX", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDigitizedAspectY", $.Int32); 
    $.Field({Static:false, Public:true }, "tmFirstChar", $.Char); 
    $.Field({Static:false, Public:true }, "tmLastChar", $.Char); 
    $.Field({Static:false, Public:true }, "tmDefaultChar", $.Char); 
    $.Field({Static:false, Public:true }, "tmBreakChar", $.Char); 
    $.Field({Static:false, Public:true }, "tmItalic", $.Byte); 
    $.Field({Static:false, Public:true }, "tmUnderlined", $.Byte); 
    $.Field({Static:false, Public:true }, "tmStruckOut", $.Byte); 
    $.Field({Static:false, Public:true }, "tmPitchAndFamily", $.Byte); 
    $.Field({Static:false, Public:true }, "tmCharSet", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.Internal.IntNativeMethods+TEXTMETRICA */ 

(function TEXTMETRICA$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.Internal.IntNativeMethods+TEXTMETRICA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "tmHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "tmAscent", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDescent", $.Int32); 
    $.Field({Static:false, Public:true }, "tmInternalLeading", $.Int32); 
    $.Field({Static:false, Public:true }, "tmExternalLeading", $.Int32); 
    $.Field({Static:false, Public:true }, "tmAveCharWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "tmMaxCharWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "tmWeight", $.Int32); 
    $.Field({Static:false, Public:true }, "tmOverhang", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDigitizedAspectX", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDigitizedAspectY", $.Int32); 
    $.Field({Static:false, Public:true }, "tmFirstChar", $.Byte); 
    $.Field({Static:false, Public:true }, "tmLastChar", $.Byte); 
    $.Field({Static:false, Public:true }, "tmDefaultChar", $.Byte); 
    $.Field({Static:false, Public:true }, "tmBreakChar", $.Byte); 
    $.Field({Static:false, Public:true }, "tmItalic", $.Byte); 
    $.Field({Static:false, Public:true }, "tmUnderlined", $.Byte); 
    $.Field({Static:false, Public:true }, "tmStruckOut", $.Byte); 
    $.Field({Static:false, Public:true }, "tmPitchAndFamily", $.Byte); 
    $.Field({Static:false, Public:true }, "tmCharSet", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.IntNativeMethods+SIZE */ 

(function SIZE$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.IntNativeMethods+SIZE", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSize", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Size"))
    );

    $.Field({Static:false, Public:true }, "cx", $.Int32); 
    $.Field({Static:false, Public:true }, "cy", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Image */ 

(function Image$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Image", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetColorPalette", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.ColorPalette"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetPhysicalDimension", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.SizeF"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetColorPalette", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorPalette"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateImageObject", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureSave", 
      new JSIL.MethodSignature(null, [
          $.Type, $.String, 
          $asm06.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromFile", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "FromFile", 
      new JSIL.MethodSignature($.Type, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHbitmap", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Bitmap"), [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHbitmap", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Bitmap"), [$asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromStream", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IO.Stream")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "FromStream", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IO.Stream"), $.Boolean])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "FromStream", 
      new JSIL.MethodSignature($.Type, [
          $asm06.TypeRef("System.IO.Stream"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Flags", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameDimensionsList", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HorizontalResolution", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Palette", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.ColorPalette"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PhysicalDimension", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.SizeF"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PixelFormat", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PropertyIdList", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertyItems", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.PropertyItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RawFormat", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.ImageFormat"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Size"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_VerticalResolution", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.RectangleF"), [$jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.GraphicsUnit")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEncoderParameterList", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Imaging.EncoderParameters"), [$asm06.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFrameCount", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Imaging.FrameDimension")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPixelFormatSize", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPropertyItem", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Imaging.PropertyItem"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetThumbnailImage", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Image+GetThumbnailImageAbort"), $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeFromStream", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:true , Public:true }, "IsAlphaPixelFormat", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsCanonicalPixelFormat", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsExtendedPixelFormat", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemovePropertyItem", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "RotateFlip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RotateFlipType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$.String, $asm0B.TypeRef("System.Drawing.Imaging.ImageFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.Imaging.ImageCodecInfo"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameters")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IO.Stream"), $asm0B.TypeRef("System.Drawing.Imaging.ImageFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm0B.TypeRef("System.Drawing.Imaging.ImageCodecInfo"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameters")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Save", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IO.MemoryStream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveAdd", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.EncoderParameters"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveAdd", 
      new JSIL.MethodSignature(null, [$.Type, $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameters")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SelectActiveFrame", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Imaging.FrameDimension"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Palette", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorPalette"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Tag", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetNativeImage", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetPropertyItem", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.PropertyItem"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm06.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.Field({Static:false, Public:false}, "nativeImage", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "rawData", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "userData", $.Object); 
    $.Property({Static:false, Public:true }, "Tag", $.Object)
      .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm07.System.ComponentModel.StringConverter.__Type__]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.LocalizableAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.BindableAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "PhysicalDimension", $asm0B.TypeRef("System.Drawing.SizeF"));

    $.Property({Static:false, Public:true }, "Size", $asm0B.TypeRef("System.Drawing.Size"));

    $.Property({Static:false, Public:true }, "Width", $.Int32)
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Height", $.Int32)
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "HorizontalResolution", $.Single);

    $.Property({Static:false, Public:true }, "VerticalResolution", $.Single);

    $.Property({Static:false, Public:true }, "Flags", $.Int32)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "RawFormat", $asm0B.TypeRef("System.Drawing.Imaging.ImageFormat"));

    $.Property({Static:false, Public:true }, "PixelFormat", $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"));

    $.Property({Static:false, Public:true }, "Palette", $asm0B.TypeRef("System.Drawing.Imaging.ColorPalette"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "FrameDimensionsList", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Guid")]))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "PropertyIdList", $jsilcore.TypeRef("System.Array", [$.Int32]))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "PropertyItems", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.PropertyItem")]))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 1 */ $asm06.TypeRef("System.ICloneable"), 
      /* 2 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.ImmutableObjectAttribute"), function () { return [true]; })
    .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.ImageEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.System.Drawing.Design.UITypeEditor.__Type__]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.ImageConverter.__Type__]; });

})();

/* delegate System.Drawing.Image+GetThumbnailImageAbort */ 

JSIL.MakeDelegate("System.Drawing.Image+GetThumbnailImageAbort", false, []);

/* enum System.Drawing.Image+ImageTypeEnum */ 

JSIL.MakeEnum(
  "System.Drawing.Image+ImageTypeEnum", false, {
    Bitmap: 1, 
    Metafile: 2
  }, false
);

/* class System.Drawing.Bitmap */ 

(function Bitmap$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Image"), 
      Name: "System.Drawing.Bitmap", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"), 
          $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Image"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Size")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromGDIplus", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHicon", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromResource", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHbitmap", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "GetHbitmap", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm0B.TypeRef("System.Drawing.Color")])
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "GetHicon", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "GetPixel", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Color"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "LockBits", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Imaging.BitmapData"), [
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.ImageLockMode"), 
          $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LockBits", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Imaging.BitmapData"), [
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.ImageLockMode"), 
          $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"), $asm0B.TypeRef("System.Drawing.Imaging.BitmapData")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeTransparent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeTransparent", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetPixel", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Color")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetResolution", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnlockBits", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.BitmapData"))
    );

    $.Field({Static:true , Public:false}, "defaultTransparentColor", $asm0B.TypeRef("System.Drawing.Color")); 
    function Bitmap__cctor () {
      $thisType.defaultTransparentColor = new $asm0B.System.Drawing.Color();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Bitmap__cctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.BitmapEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.System.Drawing.Design.UITypeEditor.__Type__]; })
    .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Drawing.BitmapSuffixInSameAssemblyAttribute */ 

(function BitmapSuffixInSameAssemblyAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Attribute"), 
      Name: "System.Drawing.BitmapSuffixInSameAssemblyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Assembly]; });

})();

/* class System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute */ 

(function BitmapSuffixInSatelliteAssemblyAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Attribute"), 
      Name: "System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Assembly]; });

})();

/* class System.Drawing.Brush */ 

(function Brush$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Brush", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NativeBrush", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNativeBrush", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNativeBrushInternal", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.Field({Static:false, Public:false}, "nativeBrush", $asm06.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:false}, "NativeBrush", $asm06.TypeRef("System.IntPtr"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.ICloneable"), 
      /* 1 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Brushes */ 

(function Brushes$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Brushes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AliceBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AntiqueWhite", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Aqua", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Aquamarine", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Azure", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Beige", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Bisque", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Black", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BlanchedAlmond", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Blue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BlueViolet", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Brown", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BurlyWood", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CadetBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Chartreuse", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Chocolate", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Coral", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CornflowerBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Cornsilk", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Crimson", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Cyan", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkCyan", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGoldenrod", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkKhaki", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkMagenta", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOliveGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOrange", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOrchid", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkRed", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSalmon", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSeaGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkTurquoise", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkViolet", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DeepPink", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DeepSkyBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DimGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DodgerBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Firebrick", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_FloralWhite", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ForestGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Fuchsia", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gainsboro", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GhostWhite", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gold", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Goldenrod", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Green", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GreenYellow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Honeydew", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HotPink", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IndianRed", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Indigo", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Ivory", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Khaki", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Lavender", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LavenderBlush", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LawnGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LemonChiffon", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightCoral", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightCyan", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGoldenrodYellow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightPink", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSalmon", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSeaGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSkyBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSlateGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSteelBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightYellow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Lime", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LimeGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Linen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Magenta", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Maroon", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumAquamarine", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumOrchid", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumPurple", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSeaGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSlateBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSpringGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumTurquoise", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumVioletRed", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MidnightBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MintCream", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MistyRose", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Moccasin", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_NavajoWhite", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Navy", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OldLace", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Olive", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OliveDrab", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Orange", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OrangeRed", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Orchid", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleGoldenrod", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleTurquoise", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleVioletRed", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PapayaWhip", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PeachPuff", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Peru", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Pink", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Plum", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PowderBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Purple", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Red", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_RosyBrown", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_RoyalBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SaddleBrown", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Salmon", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SandyBrown", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SeaGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SeaShell", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sienna", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Silver", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SkyBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SlateBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SlateGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Snow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SpringGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SteelBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Tan", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Teal", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Thistle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Tomato", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Transparent", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Turquoise", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Violet", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Wheat", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_White", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WhiteSmoke", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Yellow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_YellowGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "TransparentKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AliceBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AntiqueWhiteKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AquaKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AquamarineKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AzureKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BeigeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BisqueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BlackKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BlanchedAlmondKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BlueVioletKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BrownKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BurlyWoodKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CadetBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ChartreuseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ChocolateKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ChoralKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CornflowerBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CornsilkKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CrimsonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CyanKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkCyanKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGoldenrodKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkKhakiKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkMagentaKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOliveGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOrangeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOrchidKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkRedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSalmonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSeaGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSlateBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSlateGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkTurquoiseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkVioletKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DeepPinkKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DeepSkyBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DimGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DodgerBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FirebrickKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FloralWhiteKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ForestGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FuchiaKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GainsboroKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GhostWhiteKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GoldKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GoldenrodKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GreenYellowKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "HoneydewKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "HotPinkKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IndianRedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IndigoKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IvoryKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "KhakiKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LavenderKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LavenderBlushKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LawnGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LemonChiffonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightCoralKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightCyanKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightGoldenrodYellowKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightPinkKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightSalmonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightSeaGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightSkyBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightSlateGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightSteelBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightYellowKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LimeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LimeGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LinenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MagentaKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MaroonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumAquamarineKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumOrchidKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumPurpleKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSeaGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSlateBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSpringGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumTurquoiseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumVioletRedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MidnightBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MintCreamKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MistyRoseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MoccasinKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NavajoWhiteKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NavyKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OldLaceKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OliveKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OliveDrabKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OrangeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OrangeRedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OrchidKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PaleGoldenrodKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PaleGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PaleTurquoiseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PaleVioletRedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PapayaWhipKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PeachPuffKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PeruKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PinkKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PlumKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PowderBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PurpleKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "RedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "RosyBrownKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "RoyalBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SaddleBrownKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SalmonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SandyBrownKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SeaGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SeaShellKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SiennaKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SilverKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SkyBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SlateBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SlateGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SnowKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SpringGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SteelBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TanKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TealKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ThistleKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TomatoKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TurquoiseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "VioletKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WheatKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WhiteKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WhiteSmokeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "YellowKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "YellowGreenKey", $.Object); 
    $.Property({Static:true , Public:true }, "Transparent", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "AliceBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "AntiqueWhite", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Aqua", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Aquamarine", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Azure", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Beige", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Bisque", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Black", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "BlanchedAlmond", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Blue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "BlueViolet", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Brown", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "BurlyWood", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "CadetBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Chartreuse", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Chocolate", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Coral", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "CornflowerBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Cornsilk", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Crimson", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Cyan", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkCyan", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkGoldenrod", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkGray", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkKhaki", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkMagenta", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkOliveGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkOrange", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkOrchid", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkRed", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkSalmon", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkSeaGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkSlateBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkSlateGray", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkTurquoise", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DarkViolet", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DeepPink", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DeepSkyBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DimGray", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "DodgerBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Firebrick", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "FloralWhite", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ForestGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Fuchsia", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Gainsboro", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "GhostWhite", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Gold", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Goldenrod", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Gray", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Green", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "GreenYellow", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Honeydew", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "HotPink", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "IndianRed", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Indigo", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Ivory", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Khaki", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Lavender", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LavenderBlush", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LawnGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LemonChiffon", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightCoral", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightCyan", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightGoldenrodYellow", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightGray", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightPink", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightSalmon", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightSeaGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightSkyBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightSlateGray", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightSteelBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LightYellow", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Lime", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "LimeGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Linen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Magenta", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Maroon", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MediumAquamarine", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MediumBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MediumOrchid", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MediumPurple", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MediumSeaGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MediumSlateBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MediumSpringGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MediumTurquoise", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MediumVioletRed", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MidnightBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MintCream", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MistyRose", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Moccasin", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "NavajoWhite", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Navy", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "OldLace", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Olive", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "OliveDrab", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Orange", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "OrangeRed", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Orchid", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "PaleGoldenrod", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "PaleGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "PaleTurquoise", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "PaleVioletRed", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "PapayaWhip", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "PeachPuff", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Peru", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Pink", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Plum", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "PowderBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Purple", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Red", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "RosyBrown", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "RoyalBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "SaddleBrown", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Salmon", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "SandyBrown", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "SeaGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "SeaShell", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Sienna", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Silver", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "SkyBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "SlateBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "SlateGray", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Snow", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "SpringGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "SteelBlue", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Tan", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Teal", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Thistle", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Tomato", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Turquoise", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Violet", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Wheat", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "White", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "WhiteSmoke", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Yellow", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "YellowGreen", $asm0B.TypeRef("System.Drawing.Brush"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.BufferedGraphics */ 

(function BufferedGraphics$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.BufferedGraphics", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.BufferedGraphicsContext"), 
          $asm0B.TypeRef("System.Drawing.Graphics"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Size")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DisposeContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Graphics", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Graphics"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Render", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Render", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Graphics"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Render", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RenderInternal", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DisposeContext", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "bufferedGraphicsSurface", $asm0B.TypeRef("System.Drawing.Graphics")); 
    $.Field({Static:false, Public:false}, "targetGraphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
    $.Field({Static:false, Public:false}, "context", $asm0B.TypeRef("System.Drawing.BufferedGraphicsContext")); 
    $.Field({Static:false, Public:false}, "targetDC", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "targetLoc", $asm0B.TypeRef("System.Drawing.Point")); 
    $.Field({Static:false, Public:false}, "virtualSize", $asm0B.TypeRef("System.Drawing.Size")); 
    $.Field({Static:false, Public:false}, "disposeContext", $.Boolean); 
    $.Field({Static:true , Public:false}, "rop", $.Int32, 13369376); 
    $.Property({Static:false, Public:false}, "DisposeContext", $.Boolean);

    $.Property({Static:false, Public:true }, "Graphics", $asm0B.TypeRef("System.Drawing.Graphics"));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.BufferedGraphicsContext */ 

(function BufferedGraphicsContext$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.BufferedGraphicsContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Allocate", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.BufferedGraphics"), [$asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Allocate", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.BufferedGraphics"), [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocBuffer", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.BufferedGraphics"), [
          $asm0B.TypeRef("System.Drawing.Graphics"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocBufferInTempManager", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.BufferedGraphics"), [
          $asm0B.TypeRef("System.Drawing.Graphics"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "bFillBitmapInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.NativeMethods+BITMAPINFO_FLAT")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "bFillColorTable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.NativeMethods+BITMAPINFO_FLAT")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateBuffer", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Graphics"), [
          $asm06.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCompatibleDIB", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr"), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeBitmap", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeDC", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DoubleBuffering", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.TraceSwitch"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumBuffer", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Size"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Invalidate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseBuffer", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.BufferedGraphics"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaximumBuffer", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Size"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldUseTempManager", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.Field({Static:false, Public:false}, "maximumBuffer", $asm0B.TypeRef("System.Drawing.Size")); 
    $.Field({Static:false, Public:false}, "bufferSize", $asm0B.TypeRef("System.Drawing.Size")); 
    $.Field({Static:false, Public:false}, "virtualSize", $asm0B.TypeRef("System.Drawing.Size")); 
    $.Field({Static:false, Public:false}, "targetLoc", $asm0B.TypeRef("System.Drawing.Point")); 
    $.Field({Static:false, Public:false}, "compatDC", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "dib", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "oldBitmap", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "compatGraphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
    $.Field({Static:false, Public:false}, "buffer", $asm0B.TypeRef("System.Drawing.BufferedGraphics")); 
    $.Field({Static:false, Public:false}, "busy", $.Int32); 
    $.Field({Static:false, Public:false}, "invalidateWhenFree", $.Boolean); 
    $.Field({Static:true , Public:false}, "doubleBuffering", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
    $.Constant({Static:true , Public:false}, "BUFFER_FREE", 0); 
    $.Constant({Static:true , Public:false}, "BUFFER_BUSY_PAINTING", 1); 
    $.Constant({Static:true , Public:false}, "BUFFER_BUSY_DISPOSING", 2); 
    $.Property({Static:true , Public:false}, "DoubleBuffering", $asm07.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:false, Public:true }, "MaximumBuffer", $asm0B.TypeRef("System.Drawing.Size"));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.BufferedGraphicsManager */ 

(function BufferedGraphicsManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.BufferedGraphicsManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.BufferedGraphicsContext"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "OnShutdown", 
      new JSIL.MethodSignature(null, [$.Object, $asm06.TypeRef("System.EventArgs")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.Field({Static:true , Public:false}, "bufferedGraphicsContext", $asm0B.TypeRef("System.Drawing.BufferedGraphicsContext")); 
    $.Property({Static:true , Public:true }, "Current", $asm0B.TypeRef("System.Drawing.BufferedGraphicsContext"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.Color */ 

(function Color$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.Color", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.KnownColor"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int16, 
          $.String, $asm0B.TypeRef("System.Drawing.KnownColor")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckByte", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromArgb", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "FromArgb", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromArgb", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromArgb", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "FromKnownColor", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.KnownColor")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromName", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_A", 
      JSIL.MethodSignature.Return($.Byte)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_AliceBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AntiqueWhite", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Aqua", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Aquamarine", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Azure", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_B", 
      JSIL.MethodSignature.Return($.Byte)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Beige", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Bisque", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Black", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BlanchedAlmond", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Blue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BlueViolet", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Brown", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BurlyWood", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CadetBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Chartreuse", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Chocolate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Coral", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CornflowerBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Cornsilk", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Crimson", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Cyan", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkCyan", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGoldenrod", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGray", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkKhaki", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkMagenta", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOliveGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOrange", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOrchid", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkRed", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSalmon", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSeaGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateGray", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkTurquoise", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkViolet", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DeepPink", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DeepSkyBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DimGray", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DodgerBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Firebrick", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_FloralWhite", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ForestGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Fuchsia", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_G", 
      JSIL.MethodSignature.Return($.Byte)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Gainsboro", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GhostWhite", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gold", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Goldenrod", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gray", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Green", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GreenYellow", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Honeydew", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HotPink", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IndianRed", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Indigo", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsKnownColor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNamedColor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsSystemColor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Ivory", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Khaki", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Lavender", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LavenderBlush", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LawnGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LemonChiffon", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightCoral", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightCyan", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGoldenrodYellow", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGray", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightPink", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSalmon", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSeaGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSkyBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSlateGray", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSteelBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightYellow", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Lime", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LimeGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Linen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Magenta", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Maroon", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumAquamarine", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumOrchid", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumPurple", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSeaGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSlateBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSpringGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumTurquoise", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumVioletRed", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MidnightBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MintCream", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MistyRose", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Moccasin", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameAndARGBValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_NavajoWhite", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Navy", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OldLace", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Olive", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OliveDrab", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Orange", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OrangeRed", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Orchid", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleGoldenrod", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleTurquoise", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleVioletRed", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PapayaWhip", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PeachPuff", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Peru", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Pink", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Plum", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PowderBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Purple", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_R", 
      JSIL.MethodSignature.Return($.Byte)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Red", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_RosyBrown", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_RoyalBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SaddleBrown", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Salmon", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SandyBrown", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SeaGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SeaShell", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sienna", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Silver", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SkyBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SlateBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SlateGray", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Snow", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SpringGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SteelBlue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Tan", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Teal", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Thistle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Tomato", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Transparent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Turquoise", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Violet", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Wheat", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_White", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_WhiteSmoke", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Yellow", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_YellowGreen", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBrightness", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHue", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSaturation", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeArgb", 
      new JSIL.MethodSignature($.Int64, [
          $.Byte, $.Byte, 
          $.Byte, $.Byte
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ToArgb", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToKnownColor", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.KnownColor"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:true , Public:false}, "StateKnownColorValid", $.Int16, 1); 
    $.Field({Static:true , Public:false}, "StateARGBValueValid", $.Int16, 2); 
    $.Field({Static:true , Public:false}, "StateValueMask", $.Int16, function ($pi) {
        return $pi.StateARGBValueValid;
      }); 
    $.Field({Static:true , Public:false}, "StateNameValid", $.Int16, 8); 
    $.Field({Static:true , Public:false}, "NotDefinedValue", $.Int64, function ($pi) {
        return $asm06.System.Int64.FromNumber(0);
      }); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "value", $.Int64); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "knownColor", $.Int16); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "state", $.Int16); 
    $.Constant({Static:true , Public:false}, "ARGBAlphaShift", 24); 
    $.Constant({Static:true , Public:false}, "ARGBRedShift", 16); 
    $.Constant({Static:true , Public:false}, "ARGBGreenShift", 8); 
    $.Constant({Static:true , Public:false}, "ARGBBlueShift", 0); 
    function Color__cctor () {
      $thisType.Empty = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Color__cctor
    );

    $.Property({Static:true , Public:true }, "Transparent", $.Type);

    $.Property({Static:true , Public:true }, "AliceBlue", $.Type);

    $.Property({Static:true , Public:true }, "AntiqueWhite", $.Type);

    $.Property({Static:true , Public:true }, "Aqua", $.Type);

    $.Property({Static:true , Public:true }, "Aquamarine", $.Type);

    $.Property({Static:true , Public:true }, "Azure", $.Type);

    $.Property({Static:true , Public:true }, "Beige", $.Type);

    $.Property({Static:true , Public:true }, "Bisque", $.Type);

    $.Property({Static:true , Public:true }, "Black", $.Type);

    $.Property({Static:true , Public:true }, "BlanchedAlmond", $.Type);

    $.Property({Static:true , Public:true }, "Blue", $.Type);

    $.Property({Static:true , Public:true }, "BlueViolet", $.Type);

    $.Property({Static:true , Public:true }, "Brown", $.Type);

    $.Property({Static:true , Public:true }, "BurlyWood", $.Type);

    $.Property({Static:true , Public:true }, "CadetBlue", $.Type);

    $.Property({Static:true , Public:true }, "Chartreuse", $.Type);

    $.Property({Static:true , Public:true }, "Chocolate", $.Type);

    $.Property({Static:true , Public:true }, "Coral", $.Type);

    $.Property({Static:true , Public:true }, "CornflowerBlue", $.Type);

    $.Property({Static:true , Public:true }, "Cornsilk", $.Type);

    $.Property({Static:true , Public:true }, "Crimson", $.Type);

    $.Property({Static:true , Public:true }, "Cyan", $.Type);

    $.Property({Static:true , Public:true }, "DarkBlue", $.Type);

    $.Property({Static:true , Public:true }, "DarkCyan", $.Type);

    $.Property({Static:true , Public:true }, "DarkGoldenrod", $.Type);

    $.Property({Static:true , Public:true }, "DarkGray", $.Type);

    $.Property({Static:true , Public:true }, "DarkGreen", $.Type);

    $.Property({Static:true , Public:true }, "DarkKhaki", $.Type);

    $.Property({Static:true , Public:true }, "DarkMagenta", $.Type);

    $.Property({Static:true , Public:true }, "DarkOliveGreen", $.Type);

    $.Property({Static:true , Public:true }, "DarkOrange", $.Type);

    $.Property({Static:true , Public:true }, "DarkOrchid", $.Type);

    $.Property({Static:true , Public:true }, "DarkRed", $.Type);

    $.Property({Static:true , Public:true }, "DarkSalmon", $.Type);

    $.Property({Static:true , Public:true }, "DarkSeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "DarkSlateBlue", $.Type);

    $.Property({Static:true , Public:true }, "DarkSlateGray", $.Type);

    $.Property({Static:true , Public:true }, "DarkTurquoise", $.Type);

    $.Property({Static:true , Public:true }, "DarkViolet", $.Type);

    $.Property({Static:true , Public:true }, "DeepPink", $.Type);

    $.Property({Static:true , Public:true }, "DeepSkyBlue", $.Type);

    $.Property({Static:true , Public:true }, "DimGray", $.Type);

    $.Property({Static:true , Public:true }, "DodgerBlue", $.Type);

    $.Property({Static:true , Public:true }, "Firebrick", $.Type);

    $.Property({Static:true , Public:true }, "FloralWhite", $.Type);

    $.Property({Static:true , Public:true }, "ForestGreen", $.Type);

    $.Property({Static:true , Public:true }, "Fuchsia", $.Type);

    $.Property({Static:true , Public:true }, "Gainsboro", $.Type);

    $.Property({Static:true , Public:true }, "GhostWhite", $.Type);

    $.Property({Static:true , Public:true }, "Gold", $.Type);

    $.Property({Static:true , Public:true }, "Goldenrod", $.Type);

    $.Property({Static:true , Public:true }, "Gray", $.Type);

    $.Property({Static:true , Public:true }, "Green", $.Type);

    $.Property({Static:true , Public:true }, "GreenYellow", $.Type);

    $.Property({Static:true , Public:true }, "Honeydew", $.Type);

    $.Property({Static:true , Public:true }, "HotPink", $.Type);

    $.Property({Static:true , Public:true }, "IndianRed", $.Type);

    $.Property({Static:true , Public:true }, "Indigo", $.Type);

    $.Property({Static:true , Public:true }, "Ivory", $.Type);

    $.Property({Static:true , Public:true }, "Khaki", $.Type);

    $.Property({Static:true , Public:true }, "Lavender", $.Type);

    $.Property({Static:true , Public:true }, "LavenderBlush", $.Type);

    $.Property({Static:true , Public:true }, "LawnGreen", $.Type);

    $.Property({Static:true , Public:true }, "LemonChiffon", $.Type);

    $.Property({Static:true , Public:true }, "LightBlue", $.Type);

    $.Property({Static:true , Public:true }, "LightCoral", $.Type);

    $.Property({Static:true , Public:true }, "LightCyan", $.Type);

    $.Property({Static:true , Public:true }, "LightGoldenrodYellow", $.Type);

    $.Property({Static:true , Public:true }, "LightGreen", $.Type);

    $.Property({Static:true , Public:true }, "LightGray", $.Type);

    $.Property({Static:true , Public:true }, "LightPink", $.Type);

    $.Property({Static:true , Public:true }, "LightSalmon", $.Type);

    $.Property({Static:true , Public:true }, "LightSeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "LightSkyBlue", $.Type);

    $.Property({Static:true , Public:true }, "LightSlateGray", $.Type);

    $.Property({Static:true , Public:true }, "LightSteelBlue", $.Type);

    $.Property({Static:true , Public:true }, "LightYellow", $.Type);

    $.Property({Static:true , Public:true }, "Lime", $.Type);

    $.Property({Static:true , Public:true }, "LimeGreen", $.Type);

    $.Property({Static:true , Public:true }, "Linen", $.Type);

    $.Property({Static:true , Public:true }, "Magenta", $.Type);

    $.Property({Static:true , Public:true }, "Maroon", $.Type);

    $.Property({Static:true , Public:true }, "MediumAquamarine", $.Type);

    $.Property({Static:true , Public:true }, "MediumBlue", $.Type);

    $.Property({Static:true , Public:true }, "MediumOrchid", $.Type);

    $.Property({Static:true , Public:true }, "MediumPurple", $.Type);

    $.Property({Static:true , Public:true }, "MediumSeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "MediumSlateBlue", $.Type);

    $.Property({Static:true , Public:true }, "MediumSpringGreen", $.Type);

    $.Property({Static:true , Public:true }, "MediumTurquoise", $.Type);

    $.Property({Static:true , Public:true }, "MediumVioletRed", $.Type);

    $.Property({Static:true , Public:true }, "MidnightBlue", $.Type);

    $.Property({Static:true , Public:true }, "MintCream", $.Type);

    $.Property({Static:true , Public:true }, "MistyRose", $.Type);

    $.Property({Static:true , Public:true }, "Moccasin", $.Type);

    $.Property({Static:true , Public:true }, "NavajoWhite", $.Type);

    $.Property({Static:true , Public:true }, "Navy", $.Type);

    $.Property({Static:true , Public:true }, "OldLace", $.Type);

    $.Property({Static:true , Public:true }, "Olive", $.Type);

    $.Property({Static:true , Public:true }, "OliveDrab", $.Type);

    $.Property({Static:true , Public:true }, "Orange", $.Type);

    $.Property({Static:true , Public:true }, "OrangeRed", $.Type);

    $.Property({Static:true , Public:true }, "Orchid", $.Type);

    $.Property({Static:true , Public:true }, "PaleGoldenrod", $.Type);

    $.Property({Static:true , Public:true }, "PaleGreen", $.Type);

    $.Property({Static:true , Public:true }, "PaleTurquoise", $.Type);

    $.Property({Static:true , Public:true }, "PaleVioletRed", $.Type);

    $.Property({Static:true , Public:true }, "PapayaWhip", $.Type);

    $.Property({Static:true , Public:true }, "PeachPuff", $.Type);

    $.Property({Static:true , Public:true }, "Peru", $.Type);

    $.Property({Static:true , Public:true }, "Pink", $.Type);

    $.Property({Static:true , Public:true }, "Plum", $.Type);

    $.Property({Static:true , Public:true }, "PowderBlue", $.Type);

    $.Property({Static:true , Public:true }, "Purple", $.Type);

    $.Property({Static:true , Public:true }, "Red", $.Type);

    $.Property({Static:true , Public:true }, "RosyBrown", $.Type);

    $.Property({Static:true , Public:true }, "RoyalBlue", $.Type);

    $.Property({Static:true , Public:true }, "SaddleBrown", $.Type);

    $.Property({Static:true , Public:true }, "Salmon", $.Type);

    $.Property({Static:true , Public:true }, "SandyBrown", $.Type);

    $.Property({Static:true , Public:true }, "SeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "SeaShell", $.Type);

    $.Property({Static:true , Public:true }, "Sienna", $.Type);

    $.Property({Static:true , Public:true }, "Silver", $.Type);

    $.Property({Static:true , Public:true }, "SkyBlue", $.Type);

    $.Property({Static:true , Public:true }, "SlateBlue", $.Type);

    $.Property({Static:true , Public:true }, "SlateGray", $.Type);

    $.Property({Static:true , Public:true }, "Snow", $.Type);

    $.Property({Static:true , Public:true }, "SpringGreen", $.Type);

    $.Property({Static:true , Public:true }, "SteelBlue", $.Type);

    $.Property({Static:true , Public:true }, "Tan", $.Type);

    $.Property({Static:true , Public:true }, "Teal", $.Type);

    $.Property({Static:true , Public:true }, "Thistle", $.Type);

    $.Property({Static:true , Public:true }, "Tomato", $.Type);

    $.Property({Static:true , Public:true }, "Turquoise", $.Type);

    $.Property({Static:true , Public:true }, "Violet", $.Type);

    $.Property({Static:true , Public:true }, "Wheat", $.Type);

    $.Property({Static:true , Public:true }, "White", $.Type);

    $.Property({Static:true , Public:true }, "WhiteSmoke", $.Type);

    $.Property({Static:true , Public:true }, "Yellow", $.Type);

    $.Property({Static:true , Public:true }, "YellowGreen", $.Type);

    $.Property({Static:false, Public:true }, "R", $.Byte);

    $.Property({Static:false, Public:true }, "G", $.Byte);

    $.Property({Static:false, Public:true }, "B", $.Byte);

    $.Property({Static:false, Public:true }, "A", $.Byte);

    $.Property({Static:false, Public:true }, "IsKnownColor", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNamedColor", $.Boolean);

    $.Property({Static:false, Public:true }, "IsSystemColor", $.Boolean);

    $.Property({Static:false, Public:false}, "NameAndARGBValue", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "Value", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.ColorConverter.__Type__]; })
    .Attribute($asm06.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{NameAndARGBValue}"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.ColorEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.System.Drawing.Design.UITypeEditor.__Type__]; });

})();

/* class System.Drawing.ColorConverter */ 

(function ColorConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Drawing.ColorConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm06.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillConstants", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Collections.Hashtable"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Colors", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SystemColors", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamedColor", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.Field({Static:true , Public:false}, "ColorConstantsLock", $.String, "colorConstants"); 
    $.Field({Static:true , Public:false}, "colorConstants", $asm06.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "SystemColorConstantsLock", $.String, "systemColorConstants"); 
    $.Field({Static:true , Public:false}, "systemColorConstants", $asm06.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "ValuesLock", $.String, "values"); 
    $.Field({Static:true , Public:false}, "values", $asm07.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection")); 
    $.Property({Static:true , Public:false}, "Colors", $asm06.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:true , Public:false}, "SystemColors", $asm06.TypeRef("System.Collections.Hashtable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.ColorConverter+ColorComparer */ 

(function ColorComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.ColorConverter+ColorComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.ContentAlignment */ 

JSIL.MakeEnum(
  "System.Drawing.ContentAlignment", true, {
    TopLeft: 1, 
    TopCenter: 2, 
    TopRight: 4, 
    MiddleLeft: 16, 
    MiddleCenter: 32, 
    MiddleRight: 64, 
    BottomLeft: 256, 
    BottomCenter: 512, 
    BottomRight: 1024
  }, false
);

/* enum System.Drawing.CopyPixelOperation */ 

JSIL.MakeEnum(
  "System.Drawing.CopyPixelOperation", true, {
    NoMirrorBitmap: -2147483648, 
    Blackness: 66, 
    NotSourceErase: 1114278, 
    NotSourceCopy: 3342344, 
    SourceErase: 4457256, 
    DestinationInvert: 5570569, 
    PatInvert: 5898313, 
    SourceInvert: 6684742, 
    SourceAnd: 8913094, 
    MergePaint: 12255782, 
    MergeCopy: 12583114, 
    SourceCopy: 13369376, 
    SourcePaint: 15597702, 
    PatCopy: 15728673, 
    PatPaint: 16452105, 
    Whiteness: 16711778, 
    CaptureBlt: 1073741824
  }, false
);

JSIL.DeclareNamespace("System.Drawing.Drawing2D");
/* enum System.Drawing.Drawing2D.DashCap */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.DashCap", true, {
    Flat: 0, 
    Round: 2, 
    Triangle: 3
  }, false
);

/* class System.Drawing.FontConverter */ 

(function FontConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Drawing.FontConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm06.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCreateInstanceSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFormatException", 
      new JSIL.MethodSignature($asm06.TypeRef("System.ArgumentException"), [$.String, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGraphicsUnitText", 
      new JSIL.MethodSignature($.String, [$asm0B.TypeRef("System.Drawing.GraphicsUnit")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperties", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPropertiesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseGraphicsUnits", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.GraphicsUnit"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSizeTokens", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.Char])
    );

    $.Field({Static:false, Public:false}, "fontNameConverter", $asm0B.TypeRef("System.Drawing.FontConverter+FontNameConverter")); 
    $.Constant({Static:true , Public:false}, "styleHdr", "style="); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.FontConverter+FontNameConverter */ 

(function FontNameConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Drawing.FontConverter+FontNameConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesExclusive", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchFontName", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnInstalledFontsChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm06.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm06.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "values", $asm07.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection")); 
    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.FontConverter+FontUnitConverter */ 

(function FontUnitConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.EnumConverter"), 
      Name: "System.Drawing.FontConverter+FontUnitConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.FontConverter+UnitName */ 

(function UnitName$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.FontConverter+UnitName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0B.TypeRef("System.Drawing.GraphicsUnit")])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "unit", $asm0B.TypeRef("System.Drawing.GraphicsUnit")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "names", $jsilcore.TypeRef("System.Array", [$.Type])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.GraphicsContext */ 

(function GraphicsContext$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.GraphicsContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Graphics"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Clip", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Region"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsCumulative", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Next", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Previous", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_TransformOffset", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.PointF"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_IsCumulative", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Next", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Previous", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_State", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "contextState", $.Int32); 
    $.Field({Static:false, Public:false}, "transformOffset", $asm0B.TypeRef("System.Drawing.PointF")); 
    $.Field({Static:false, Public:false}, "clipRegion", $asm0B.TypeRef("System.Drawing.Region")); 
    $.Field({Static:false, Public:false}, "nextContext", $.Type); 
    $.Field({Static:false, Public:false}, "prevContext", $.Type); 
    $.Field({Static:false, Public:false}, "isCumulative", $.Boolean); 
    $.Property({Static:false, Public:true }, "State", $.Int32);

    $.Property({Static:false, Public:true }, "TransformOffset", $asm0B.TypeRef("System.Drawing.PointF"));

    $.Property({Static:false, Public:true }, "Clip", $asm0B.TypeRef("System.Drawing.Region"));

    $.Property({Static:false, Public:true }, "Next", $.Type);

    $.Property({Static:false, Public:true }, "Previous", $.Type);

    $.Property({Static:false, Public:true }, "IsCumulative", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Graphics */ 

(function Graphics$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Graphics", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMetafileComment", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginContainer", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsContainer"), [
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginContainer", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsContainer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginContainer", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsContainer"), [
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckErrorStatus", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyFromScreen", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Size")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyFromScreen", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Size")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "CopyFromScreen", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Size"), $asm0B.TypeRef("System.Drawing.CopyPixelOperation")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyFromScreen", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Size"), $asm0B.TypeRef("System.Drawing.CopyPixelOperation")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawArc", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawArc", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawArc", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawArc", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawBezier", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawBezier", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.PointF")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawBezier", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Point")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawBeziers", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawBeziers", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawClosedCurve", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawClosedCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawClosedCurve", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawClosedCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $.Int32, $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $.Int32, $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawEllipse", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.RectangleF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawEllipse", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawEllipse", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawEllipse", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawIcon", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Icon"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawIcon", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Icon"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawIconUnstretched", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Icon"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.PointF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.RectangleF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Point")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), 
          $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), 
          $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort"), $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), 
          $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImage", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit"), $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes"), 
          $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort"), $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImageUnscaled", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Point")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImageUnscaled", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImageUnscaled", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawImageUnscaled", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawImageUnscaledAndClipped", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawLine", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawLine", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.PointF")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawLine", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawLine", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Point")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawLines", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawLines", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawPath", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawPie", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawPie", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawPie", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawPie", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawPolygon", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawPolygon", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawRectangle", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawRectangle", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawRectangle", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawRectangles", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.RectangleF")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawRectangles", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Rectangle")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.Brush"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.PointF")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.Brush"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.RectangleF")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndContainer", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsContainer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMetafile", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Metafile"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExcludeClip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExcludeClip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Region"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode"), $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "FillClosedCurve", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode"), $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillEllipse", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.RectangleF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillEllipse", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillEllipse", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillEllipse", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillPath", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillPie", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillPie", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillPie", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillPolygon", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "FillPolygon", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillPolygon", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "FillPolygon", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillRectangle", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.RectangleF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillRectangle", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillRectangle", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillRectangle", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Brush"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillRectangles", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.RectangleF")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillRectangles", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Rectangle")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillRegion", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $asm0B.TypeRef("System.Drawing.Region")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Flush", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Flush", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.FlushIntention"))
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHdc", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:true , Public:true }, "FromHdc", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")])
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:true , Public:true }, "FromHdcInternal", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:true , Public:true }, "FromHwnd", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:true , Public:true }, "FromHwndInternal", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:true , Public:true }, "FromImage", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.Image")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Clip", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Region"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClipBounds", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompositingMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.CompositingMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompositingQuality", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.CompositingQuality"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DpiX", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DpiY", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InterpolationMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.InterpolationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsClipEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsVisibleClipEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NativeGraphics", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageScale", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageUnit", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.GraphicsUnit"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PixelOffsetMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.PixelOffsetMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrintingHelper", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RenderingOrigin", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Point"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SmoothingMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.SmoothingMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TextContrast", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TextRenderingHint", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Text.TextRenderingHint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VisibleClipBounds", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetContextInfo", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "GetHalftonePalette", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHdc", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNearestColor", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Color"), [$asm0B.TypeRef("System.Drawing.Color")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IgnoreMetafileErrors", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "IntersectClip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IntersectClip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IntersectClip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Region"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Point")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.PointF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.RectangleF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "MeasureCharacterRanges", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Region")]), [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.SizeF"), [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.SizeF"), $asm0B.TypeRef("System.Drawing.StringFormat"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.SizeF"), [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.SizeF"), [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.SizeF")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.SizeF"), [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $asm0B.TypeRef("System.Drawing.SizeF"), $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.SizeF"), [$.String, $asm0B.TypeRef("System.Drawing.Font")])
    );

    $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.SizeF"), [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MeasureString", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.SizeF"), [
          $.String, $asm0B.TypeRef("System.Drawing.Font"), 
          $.Int32, $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnDomainUnload", 
      new JSIL.MethodSignature(null, [$.Object, $asm06.TypeRef("System.EventArgs")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "PopContext", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PushContext", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.GraphicsContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReleaseHdc", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReleaseHdc", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ReleaseHdcInternal", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "ResetClip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetTransform", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Restore", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
      new JSIL.MethodSignature(null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Clip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Region"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_CompositingMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.CompositingMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CompositingQuality", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.CompositingQuality"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InterpolationMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.InterpolationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PageScale", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PageUnit", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.GraphicsUnit"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PixelOffsetMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.PixelOffsetMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PrintingHelper", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RenderingOrigin", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Point"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SmoothingMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.SmoothingMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TextContrast", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TextRenderingHint", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Text.TextRenderingHint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetClip", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetClip", 
      new JSIL.MethodSignature(null, [$.Type, $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetClip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetClip", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetClip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetClip", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetClip", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetClip", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetClip", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Region"), $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TransformPoints", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Drawing2D.CoordinateSpace"), $asm0B.TypeRef("System.Drawing.Drawing2D.CoordinateSpace"), 
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "TransformPoints", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Drawing2D.CoordinateSpace"), $asm0B.TypeRef("System.Drawing.Drawing2D.CoordinateSpace"), 
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "TranslateClip", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "TranslateClip", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.Field({Static:false, Public:false}, "previousContext", $asm0B.TypeRef("System.Drawing.GraphicsContext")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "syncObject", $.Object); 
    $.Field({Static:false, Public:false}, "nativeGraphics", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "nativeHdc", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "printingHelper", $.Object); 
    $.Field({Static:true , Public:false}, "halftonePalette", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "backingImage", $asm0B.TypeRef("System.Drawing.Image")); 
    $.Property({Static:false, Public:false}, "NativeGraphics", $asm06.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "CompositingMode", $asm0B.TypeRef("System.Drawing.Drawing2D.CompositingMode"));

    $.Property({Static:false, Public:true }, "RenderingOrigin", $asm0B.TypeRef("System.Drawing.Point"));

    $.Property({Static:false, Public:true }, "CompositingQuality", $asm0B.TypeRef("System.Drawing.Drawing2D.CompositingQuality"));

    $.Property({Static:false, Public:true }, "TextRenderingHint", $asm0B.TypeRef("System.Drawing.Text.TextRenderingHint"));

    $.Property({Static:false, Public:true }, "TextContrast", $.Int32);

    $.Property({Static:false, Public:true }, "SmoothingMode", $asm0B.TypeRef("System.Drawing.Drawing2D.SmoothingMode"));

    $.Property({Static:false, Public:true }, "PixelOffsetMode", $asm0B.TypeRef("System.Drawing.Drawing2D.PixelOffsetMode"));

    $.Property({Static:false, Public:false}, "PrintingHelper", $.Object);

    $.Property({Static:false, Public:true }, "InterpolationMode", $asm0B.TypeRef("System.Drawing.Drawing2D.InterpolationMode"));

    $.Property({Static:false, Public:true }, "Transform", $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"));

    $.Property({Static:false, Public:true }, "PageUnit", $asm0B.TypeRef("System.Drawing.GraphicsUnit"));

    $.Property({Static:false, Public:true }, "PageScale", $.Single);

    $.Property({Static:false, Public:true }, "DpiX", $.Single);

    $.Property({Static:false, Public:true }, "DpiY", $.Single);

    $.Property({Static:false, Public:true }, "Clip", $asm0B.TypeRef("System.Drawing.Region"));

    $.Property({Static:false, Public:true }, "ClipBounds", $asm0B.TypeRef("System.Drawing.RectangleF"));

    $.Property({Static:false, Public:true }, "IsClipEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "VisibleClipBounds", $asm0B.TypeRef("System.Drawing.RectangleF"));

    $.Property({Static:false, Public:true }, "IsVisibleClipEmpty", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0B.TypeRef("System.Drawing.IDeviceContext"), 
      /* 1 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Drawing.Graphics+DrawImageAbort */ 

JSIL.MakeDelegate("System.Drawing.Graphics+DrawImageAbort", false, []);

/* delegate System.Drawing.Graphics+EnumerateMetafileProc */ 

JSIL.MakeDelegate("System.Drawing.Graphics+EnumerateMetafileProc", false, []);

/* class System.Drawing.Icon */ 

(function Icon$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Icon", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0B.TypeRef("System.Drawing.Size")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm0B.TypeRef("System.Drawing.Size")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IO.Stream"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IO.Stream"), $asm0B.TypeRef("System.Drawing.Size")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BitmapHasAlpha", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Imaging.BitmapData")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyBitmapData", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.BitmapData"), $asm0B.TypeRef("System.Drawing.Imaging.BitmapData")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DestroyHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Graphics"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Draw", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DrawIcon", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DrawUnstretched", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExtractAssociatedIcon", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ExtractAssociatedIcon", 
      new JSIL.MethodSignature($.Type, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHandle", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Handle", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Size"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetShort", 
      new JSIL.MethodSignature($.Int16, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm06.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:true }, "ToBitmap", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Bitmap"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "bitDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "iconData", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "bestImageOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "bestBitDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "iconSize", $asm0B.TypeRef("System.Drawing.Size")); 
    $.Field({Static:false, Public:false}, "handle", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "ownHandle", $.Boolean); 
    $.Property({Static:false, Public:true }, "Handle", $asm06.TypeRef("System.IntPtr"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Height", $.Int32)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Size", $asm0B.TypeRef("System.Drawing.Size"));

    $.Property({Static:false, Public:true }, "Width", $.Int32)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 1 */ $asm06.TypeRef("System.ICloneable"), 
      /* 2 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.IconConverter.__Type__]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.IconEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.System.Drawing.Design.UITypeEditor.__Type__]; });

})();

/* class System.Drawing.IconConverter */ 

(function IconConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Drawing.IconConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm06.TypeRef("System.Type")
        ])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.ImageAnimator */ 

(function ImageAnimator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.ImageAnimator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Animate", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm06.TypeRef("System.EventHandler")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnimateImages50ms", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CanAnimate", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Image")])
    );

    $.ExternalMethod({Static:true , Public:true }, "StopAnimate", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm06.TypeRef("System.EventHandler")])
    );

    $.ExternalMethod({Static:true , Public:true }, "UpdateFrames", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Image"))
    );

    $.ExternalMethod({Static:true , Public:true }, "UpdateFrames", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "imageInfoList", $asm06.TypeRef("System.Collections.Generic.List`1", [$asm0B.TypeRef("System.Drawing.ImageAnimator+ImageInfo")])); 
    $.Field({Static:true , Public:false}, "anyFrameDirty", $.Boolean); 
    $.Field({Static:true , Public:false}, "animationThread", $asm06.TypeRef("System.Threading.Thread")); 
    $.Field({Static:true , Public:false}, "rwImgListLock", $asm06.TypeRef("System.Threading.ReaderWriterLock")); 
    $.Field({Static:true , Public:false}, "threadWriterLockWaitCount", $.Int32)
      .Attribute($asm06.TypeRef("System.ThreadStaticAttribute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.ImageAnimator+ImageInfo */ 

(function ImageInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.ImageAnimator+ImageInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Image"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FrameDelay", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Animated", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Frame", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_FrameChangedHandler", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.EventHandler"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_FrameCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_FrameDirty", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_FrameTimer", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Image", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Image"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnFrameChanged", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Frame", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FrameChangedHandler", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_FrameTimer", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateFrame", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "image", $asm0B.TypeRef("System.Drawing.Image")); 
    $.Field({Static:false, Public:false}, "frame", $.Int32); 
    $.Field({Static:false, Public:false}, "frameCount", $.Int32); 
    $.Field({Static:false, Public:false}, "frameDirty", $.Boolean); 
    $.Field({Static:false, Public:false}, "animated", $.Boolean); 
    $.Field({Static:false, Public:false}, "onFrameChangedHandler", $asm06.TypeRef("System.EventHandler")); 
    $.Field({Static:false, Public:false}, "frameDelay", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "frameTimer", $.Int32); 
    $.Constant({Static:true , Public:false}, "PropertyTagFrameDelay", 20736); 
    $.Property({Static:false, Public:true }, "Animated", $.Boolean);

    $.Property({Static:false, Public:true }, "Frame", $.Int32);

    $.Property({Static:false, Public:true }, "FrameDirty", $.Boolean);

    $.Property({Static:false, Public:true }, "FrameChangedHandler", $asm06.TypeRef("System.EventHandler"));

    $.Property({Static:false, Public:true }, "FrameCount", $.Int32);

    $.Property({Static:false, Public:false}, "FrameTimer", $.Int32);

    $.Property({Static:false, Public:false}, "Image", $asm0B.TypeRef("System.Drawing.Image"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.ImageConverter */ 

(function ImageConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Drawing.ImageConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm06.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBitmapStream", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IO.Stream"), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperties", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPropertiesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.Field({Static:false, Public:false}, "iconType", $asm06.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.KnownColor */ 

JSIL.MakeEnum(
  "System.Drawing.KnownColor", true, {
    ActiveBorder: 1, 
    ActiveCaption: 2, 
    ActiveCaptionText: 3, 
    AppWorkspace: 4, 
    Control: 5, 
    ControlDark: 6, 
    ControlDarkDark: 7, 
    ControlLight: 8, 
    ControlLightLight: 9, 
    ControlText: 10, 
    Desktop: 11, 
    GrayText: 12, 
    Highlight: 13, 
    HighlightText: 14, 
    HotTrack: 15, 
    InactiveBorder: 16, 
    InactiveCaption: 17, 
    InactiveCaptionText: 18, 
    Info: 19, 
    InfoText: 20, 
    Menu: 21, 
    MenuText: 22, 
    ScrollBar: 23, 
    Window: 24, 
    WindowFrame: 25, 
    WindowText: 26, 
    Transparent: 27, 
    AliceBlue: 28, 
    AntiqueWhite: 29, 
    Aqua: 30, 
    Aquamarine: 31, 
    Azure: 32, 
    Beige: 33, 
    Bisque: 34, 
    Black: 35, 
    BlanchedAlmond: 36, 
    Blue: 37, 
    BlueViolet: 38, 
    Brown: 39, 
    BurlyWood: 40, 
    CadetBlue: 41, 
    Chartreuse: 42, 
    Chocolate: 43, 
    Coral: 44, 
    CornflowerBlue: 45, 
    Cornsilk: 46, 
    Crimson: 47, 
    Cyan: 48, 
    DarkBlue: 49, 
    DarkCyan: 50, 
    DarkGoldenrod: 51, 
    DarkGray: 52, 
    DarkGreen: 53, 
    DarkKhaki: 54, 
    DarkMagenta: 55, 
    DarkOliveGreen: 56, 
    DarkOrange: 57, 
    DarkOrchid: 58, 
    DarkRed: 59, 
    DarkSalmon: 60, 
    DarkSeaGreen: 61, 
    DarkSlateBlue: 62, 
    DarkSlateGray: 63, 
    DarkTurquoise: 64, 
    DarkViolet: 65, 
    DeepPink: 66, 
    DeepSkyBlue: 67, 
    DimGray: 68, 
    DodgerBlue: 69, 
    Firebrick: 70, 
    FloralWhite: 71, 
    ForestGreen: 72, 
    Fuchsia: 73, 
    Gainsboro: 74, 
    GhostWhite: 75, 
    Gold: 76, 
    Goldenrod: 77, 
    Gray: 78, 
    Green: 79, 
    GreenYellow: 80, 
    Honeydew: 81, 
    HotPink: 82, 
    IndianRed: 83, 
    Indigo: 84, 
    Ivory: 85, 
    Khaki: 86, 
    Lavender: 87, 
    LavenderBlush: 88, 
    LawnGreen: 89, 
    LemonChiffon: 90, 
    LightBlue: 91, 
    LightCoral: 92, 
    LightCyan: 93, 
    LightGoldenrodYellow: 94, 
    LightGray: 95, 
    LightGreen: 96, 
    LightPink: 97, 
    LightSalmon: 98, 
    LightSeaGreen: 99, 
    LightSkyBlue: 100, 
    LightSlateGray: 101, 
    LightSteelBlue: 102, 
    LightYellow: 103, 
    Lime: 104, 
    LimeGreen: 105, 
    Linen: 106, 
    Magenta: 107, 
    Maroon: 108, 
    MediumAquamarine: 109, 
    MediumBlue: 110, 
    MediumOrchid: 111, 
    MediumPurple: 112, 
    MediumSeaGreen: 113, 
    MediumSlateBlue: 114, 
    MediumSpringGreen: 115, 
    MediumTurquoise: 116, 
    MediumVioletRed: 117, 
    MidnightBlue: 118, 
    MintCream: 119, 
    MistyRose: 120, 
    Moccasin: 121, 
    NavajoWhite: 122, 
    Navy: 123, 
    OldLace: 124, 
    Olive: 125, 
    OliveDrab: 126, 
    Orange: 127, 
    OrangeRed: 128, 
    Orchid: 129, 
    PaleGoldenrod: 130, 
    PaleGreen: 131, 
    PaleTurquoise: 132, 
    PaleVioletRed: 133, 
    PapayaWhip: 134, 
    PeachPuff: 135, 
    Peru: 136, 
    Pink: 137, 
    Plum: 138, 
    PowderBlue: 139, 
    Purple: 140, 
    Red: 141, 
    RosyBrown: 142, 
    RoyalBlue: 143, 
    SaddleBrown: 144, 
    Salmon: 145, 
    SandyBrown: 146, 
    SeaGreen: 147, 
    SeaShell: 148, 
    Sienna: 149, 
    Silver: 150, 
    SkyBlue: 151, 
    SlateBlue: 152, 
    SlateGray: 153, 
    Snow: 154, 
    SpringGreen: 155, 
    SteelBlue: 156, 
    Tan: 157, 
    Teal: 158, 
    Thistle: 159, 
    Tomato: 160, 
    Turquoise: 161, 
    Violet: 162, 
    Wheat: 163, 
    White: 164, 
    WhiteSmoke: 165, 
    Yellow: 166, 
    YellowGreen: 167, 
    ButtonFace: 168, 
    ButtonHighlight: 169, 
    ButtonShadow: 170, 
    GradientActiveCaption: 171, 
    GradientInactiveCaption: 172, 
    MenuBar: 173, 
    MenuHighlight: 174
  }, false
);

/* interface System.Drawing.Internal.ISystemColorTracker */ 

JSIL.MakeInterface(
  "System.Drawing.Internal.ISystemColorTracker", false, [], function ($) {
    $.Method({}, "OnSystemColorChanged", JSIL.MethodSignature.Void);
  }, []);

/* class System.Drawing.Pen */ 

(function Pen$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Pen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Color"), $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Brush"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Brush"), $.Single])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Color"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureValidDashPattern", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Alignment", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.PenAlignment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Brush", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Color", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompoundArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CustomEndCap", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CustomStartCap", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DashCap", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.DashCap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DashOffset", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DashPattern", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DashStyle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.DashStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndCap", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineJoin", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MiterLimit", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NativePen", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PenType", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.PenType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartCap", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNativeBrush", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSetColor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetTransform", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
      new JSIL.MethodSignature(null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Alignment", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.PenAlignment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Brush", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Color", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CompoundArray", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CustomEndCap", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CustomStartCap", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DashCap", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.DashCap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DashOffset", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DashPattern", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DashStyle", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.DashStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EndCap", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LineJoin", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MiterLimit", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StartCap", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetLineCap", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.DashCap")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNativePen", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Drawing.Internal.ISystemColorTracker.OnSystemColorChanged", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0B.TypeRef("System.Drawing.Internal.ISystemColorTracker"), "OnSystemColorChanged");

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.Field({Static:false, Public:false}, "nativePen", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "color", $asm0B.TypeRef("System.Drawing.Color")); 
    $.Field({Static:false, Public:false}, "immutable", $.Boolean); 
    $.Property({Static:false, Public:false}, "NativePen", $asm06.TypeRef("System.IntPtr"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "Width", $.Single);

    $.Property({Static:false, Public:true }, "StartCap", $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"));

    $.Property({Static:false, Public:true }, "EndCap", $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"));

    $.Property({Static:false, Public:true }, "DashCap", $asm0B.TypeRef("System.Drawing.Drawing2D.DashCap"));

    $.Property({Static:false, Public:true }, "LineJoin", $asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"));

    $.Property({Static:false, Public:true }, "CustomStartCap", $asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"));

    $.Property({Static:false, Public:true }, "CustomEndCap", $asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"));

    $.Property({Static:false, Public:true }, "MiterLimit", $.Single);

    $.Property({Static:false, Public:true }, "Alignment", $asm0B.TypeRef("System.Drawing.Drawing2D.PenAlignment"));

    $.Property({Static:false, Public:true }, "Transform", $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"));

    $.Property({Static:false, Public:true }, "PenType", $asm0B.TypeRef("System.Drawing.Drawing2D.PenType"));

    $.Property({Static:false, Public:true }, "Color", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:false, Public:true }, "Brush", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:false, Public:true }, "DashStyle", $asm0B.TypeRef("System.Drawing.Drawing2D.DashStyle"));

    $.Property({Static:false, Public:true }, "DashOffset", $.Single);

    $.Property({Static:false, Public:true }, "DashPattern", $jsilcore.TypeRef("System.Array", [$.Single]));

    $.Property({Static:false, Public:true }, "CompoundArray", $jsilcore.TypeRef("System.Array", [$.Single]));

    $.ImplementInterfaces(
      /* 0 */ $asm0B.TypeRef("System.Drawing.Internal.ISystemColorTracker"), 
      /* 1 */ $asm06.TypeRef("System.ICloneable"), 
      /* 2 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Pens */ 

(function Pens$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Pens", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AliceBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AntiqueWhite", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Aqua", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Aquamarine", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Azure", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Beige", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Bisque", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Black", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BlanchedAlmond", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Blue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BlueViolet", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Brown", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BurlyWood", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CadetBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Chartreuse", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Chocolate", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Coral", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CornflowerBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Cornsilk", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Crimson", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Cyan", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkCyan", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGoldenrod", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkKhaki", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkMagenta", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOliveGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOrange", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOrchid", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkRed", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSalmon", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSeaGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkTurquoise", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkViolet", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DeepPink", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DeepSkyBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DimGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DodgerBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Firebrick", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_FloralWhite", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ForestGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Fuchsia", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gainsboro", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GhostWhite", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gold", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Goldenrod", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Green", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GreenYellow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Honeydew", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HotPink", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IndianRed", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Indigo", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Ivory", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Khaki", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Lavender", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LavenderBlush", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LawnGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LemonChiffon", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightCoral", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightCyan", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGoldenrodYellow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightPink", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSalmon", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSeaGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSkyBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSlateGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSteelBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightYellow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Lime", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LimeGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Linen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Magenta", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Maroon", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumAquamarine", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumOrchid", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumPurple", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSeaGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSlateBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSpringGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumTurquoise", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumVioletRed", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MidnightBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MintCream", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MistyRose", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Moccasin", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_NavajoWhite", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Navy", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OldLace", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Olive", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OliveDrab", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Orange", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OrangeRed", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Orchid", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleGoldenrod", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleTurquoise", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleVioletRed", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PapayaWhip", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PeachPuff", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Peru", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Pink", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Plum", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PowderBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Purple", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Red", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_RosyBrown", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_RoyalBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SaddleBrown", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Salmon", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SandyBrown", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SeaGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SeaShell", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sienna", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Silver", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SkyBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SlateBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SlateGray", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Snow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SpringGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SteelBlue", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Tan", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Teal", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Thistle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Tomato", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Transparent", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Turquoise", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Violet", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Wheat", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_White", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WhiteSmoke", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Yellow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_YellowGreen", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "TransparentKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AliceBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AntiqueWhiteKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AquaKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AquamarineKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AzureKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BeigeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BisqueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BlackKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BlanchedAlmondKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BlueVioletKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BrownKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BurlyWoodKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CadetBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ChartreuseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ChocolateKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ChoralKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CornflowerBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CornsilkKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CrimsonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CyanKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkCyanKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGoldenrodKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkKhakiKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkMagentaKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOliveGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOrangeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkOrchidKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkRedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSalmonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSeaGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSlateBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkSlateGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkTurquoiseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DarkVioletKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DeepPinkKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DeepSkyBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DimGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DodgerBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FirebrickKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FloralWhiteKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ForestGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FuchiaKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GainsboroKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GhostWhiteKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GoldKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GoldenrodKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GreenYellowKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "HoneydewKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "HotPinkKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IndianRedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IndigoKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IvoryKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "KhakiKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LavenderKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LavenderBlushKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LawnGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LemonChiffonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightCoralKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightCyanKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightGoldenrodYellowKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightPinkKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightSalmonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightSeaGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightSkyBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightSlateGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightSteelBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LightYellowKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LimeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LimeGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LinenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MagentaKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MaroonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumAquamarineKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumOrchidKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumPurpleKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSeaGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSlateBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumSpringGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumTurquoiseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MediumVioletRedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MidnightBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MintCreamKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MistyRoseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MoccasinKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NavajoWhiteKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NavyKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OldLaceKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OliveKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OliveDrabKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OrangeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OrangeRedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "OrchidKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PaleGoldenrodKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PaleGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PaleTurquoiseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PaleVioletRedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PapayaWhipKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PeachPuffKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PeruKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PinkKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PlumKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PowderBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PurpleKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "RedKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "RosyBrownKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "RoyalBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SaddleBrownKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SalmonKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SandyBrownKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SeaGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SeaShellKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SiennaKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SilverKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SkyBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SlateBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SlateGrayKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SnowKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SpringGreenKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SteelBlueKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TanKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TealKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ThistleKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TomatoKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TurquoiseKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "VioletKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WheatKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WhiteKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WhiteSmokeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "YellowKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "YellowGreenKey", $.Object); 
    $.Property({Static:true , Public:true }, "Transparent", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "AliceBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "AntiqueWhite", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Aqua", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Aquamarine", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Azure", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Beige", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Bisque", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Black", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "BlanchedAlmond", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Blue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "BlueViolet", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Brown", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "BurlyWood", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "CadetBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Chartreuse", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Chocolate", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Coral", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "CornflowerBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Cornsilk", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Crimson", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Cyan", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkCyan", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkGoldenrod", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkGray", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkKhaki", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkMagenta", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkOliveGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkOrange", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkOrchid", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkRed", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkSalmon", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkSeaGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkSlateBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkSlateGray", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkTurquoise", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DarkViolet", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DeepPink", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DeepSkyBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DimGray", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "DodgerBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Firebrick", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "FloralWhite", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ForestGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Fuchsia", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Gainsboro", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "GhostWhite", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Gold", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Goldenrod", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Gray", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Green", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "GreenYellow", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Honeydew", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "HotPink", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "IndianRed", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Indigo", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Ivory", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Khaki", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Lavender", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LavenderBlush", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LawnGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LemonChiffon", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightCoral", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightCyan", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightGoldenrodYellow", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightGray", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightPink", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightSalmon", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightSeaGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightSkyBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightSlateGray", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightSteelBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LightYellow", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Lime", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "LimeGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Linen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Magenta", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Maroon", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MediumAquamarine", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MediumBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MediumOrchid", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MediumPurple", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MediumSeaGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MediumSlateBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MediumSpringGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MediumTurquoise", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MediumVioletRed", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MidnightBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MintCream", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MistyRose", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Moccasin", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "NavajoWhite", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Navy", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "OldLace", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Olive", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "OliveDrab", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Orange", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "OrangeRed", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Orchid", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "PaleGoldenrod", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "PaleGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "PaleTurquoise", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "PaleVioletRed", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "PapayaWhip", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "PeachPuff", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Peru", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Pink", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Plum", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "PowderBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Purple", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Red", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "RosyBrown", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "RoyalBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "SaddleBrown", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Salmon", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "SandyBrown", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "SeaGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "SeaShell", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Sienna", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Silver", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "SkyBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "SlateBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "SlateGray", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Snow", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "SpringGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "SteelBlue", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Tan", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Teal", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Thistle", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Tomato", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Turquoise", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Violet", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Wheat", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "White", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "WhiteSmoke", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Yellow", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "YellowGreen", $asm0B.TypeRef("System.Drawing.Pen"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.Point */ 

(function Point$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.Point", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Size"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Ceiling", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.PointF")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Y", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "HIWORD", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "LOWORD", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Offset", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Offset", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Size"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.PointF"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.PointF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_X", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Y", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Truncate", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.PointF")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "x", $.Int32); 
    $.Field({Static:false, Public:false}, "y", $.Int32); 
    function Point__cctor () {
      $thisType.Empty = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Point__cctor
    );

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.PointConverter.__Type__]; })
    .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Drawing.PointConverter */ 

(function PointConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Drawing.PointConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm06.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCreateInstanceSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperties", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPropertiesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.Rectangle */ 

(function Rectangle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.Rectangle", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Size")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Ceiling", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.RectangleF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Point")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromLTRB", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Bottom", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Point"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Size"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Top", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Y", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Inflate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Inflate", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Size"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Inflate", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersect", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "IntersectsWith", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "Offset", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Point"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Offset", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.RectangleF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Height", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Point"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Size", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Size"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_X", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Y", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Truncate", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.RectangleF")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "x", $.Int32); 
    $.Field({Static:false, Public:false}, "y", $.Int32); 
    $.Field({Static:false, Public:false}, "width", $.Int32); 
    $.Field({Static:false, Public:false}, "height", $.Int32); 
    function Rectangle__cctor () {
      $thisType.Empty = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Rectangle__cctor
    );

    $.Property({Static:false, Public:true }, "Location", $asm0B.TypeRef("System.Drawing.Point"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Size", $asm0B.TypeRef("System.Drawing.Size"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "Left", $.Int32)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Top", $.Int32)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Right", $.Int32)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Bottom", $.Int32)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.RectangleConverter.__Type__]; })
    .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Drawing.RectangleConverter */ 

(function RectangleConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Drawing.RectangleConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm06.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCreateInstanceSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperties", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPropertiesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Region */ 

(function Region$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Region", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.RegionData"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Complement", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Complement", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Complement", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Complement", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Exclude", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Exclude", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Exclude", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Exclude", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHrgn", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.RectangleF"), [$asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHrgn", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRegionData", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.RegionData"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRegionScans", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.RectangleF")]), [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersect", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersect", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersect", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersect", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsInfinite", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.PointF")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.RectangleF")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Point")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Rectangle")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeEmpty", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeInfinite", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ReleaseHrgn", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNativeRegion", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Translate", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "Translate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Union", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Union", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Union", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Union", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Xor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Xor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Xor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Xor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "nativeRegion", $asm06.TypeRef("System.IntPtr")); 
    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.RotateFlipType */ 

JSIL.MakeEnum(
  "System.Drawing.RotateFlipType", true, {
    RotateNoneFlipNone: 0, 
    Rotate180FlipXY: 0, 
    Rotate90FlipNone: 1, 
    Rotate270FlipXY: 1, 
    RotateNoneFlipXY: 2, 
    Rotate180FlipNone: 2, 
    Rotate90FlipXY: 3, 
    Rotate270FlipNone: 3, 
    RotateNoneFlipX: 4, 
    Rotate180FlipY: 4, 
    Rotate90FlipX: 5, 
    Rotate270FlipY: 5, 
    RotateNoneFlipY: 6, 
    Rotate180FlipX: 6, 
    Rotate90FlipY: 7, 
    Rotate270FlipX: 7
  }, false
);

/* struct System.Drawing.Size */ 

(function Size$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.Size", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Point"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Ceiling", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.SizeF")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Point"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.SizeF"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.SizeF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Height", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Truncate", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.SizeF")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "width", $.Int32); 
    $.Field({Static:false, Public:false}, "height", $.Int32); 
    function Size__cctor () {
      $thisType.Empty = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Size__cctor
    );

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.SizeConverter.__Type__]; })
    .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Drawing.SizeConverter */ 

(function SizeConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Drawing.SizeConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm06.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCreateInstanceSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperties", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPropertiesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SolidBrush */ 

(function SolidBrush$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Brush"), 
      Name: "System.Drawing.SolidBrush", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Color"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Color", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSetColor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Color", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Drawing.Internal.ISystemColorTracker.OnSystemColorChanged", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0B.TypeRef("System.Drawing.Internal.ISystemColorTracker"), "OnSystemColorChanged");

    $.Field({Static:false, Public:false}, "color", $asm0B.TypeRef("System.Drawing.Color")); 
    $.Field({Static:false, Public:false}, "immutable", $.Boolean); 
    $.Property({Static:false, Public:true }, "Color", $asm0B.TypeRef("System.Drawing.Color"));

    $.ImplementInterfaces(
      /* 2 */ $asm0B.TypeRef("System.Drawing.Internal.ISystemColorTracker")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SystemBrushes */ 

(function SystemBrushes$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SystemBrushes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromSystemColor", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Brush"), [$asm0B.TypeRef("System.Drawing.Color")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ActiveBorder", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaptionText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AppWorkspace", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ButtonFace", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ButtonHighlight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ButtonShadow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Control", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlDark", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlDarkDark", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlLight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlLightLight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Desktop", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GradientActiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GradientInactiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GrayText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Highlight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HighlightText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HotTrack", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InactiveBorder", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaptionText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InfoText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Menu", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MenuBar", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MenuHighlight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MenuText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ScrollBar", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Window", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WindowFrame", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WindowText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Brush"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SystemBrushesKey", $.Object); 
    $.Property({Static:true , Public:true }, "ActiveBorder", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ActiveCaption", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ActiveCaptionText", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "AppWorkspace", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ButtonFace", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ButtonHighlight", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ButtonShadow", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Control", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ControlLightLight", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ControlLight", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ControlDark", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ControlDarkDark", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ControlText", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Desktop", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "GradientActiveCaption", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "GradientInactiveCaption", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "GrayText", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Highlight", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "HighlightText", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "HotTrack", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "InactiveCaption", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "InactiveBorder", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "InactiveCaptionText", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Info", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "InfoText", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Menu", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MenuBar", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MenuHighlight", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "MenuText", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "ScrollBar", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "Window", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "WindowFrame", $asm0B.TypeRef("System.Drawing.Brush"));

    $.Property({Static:true , Public:true }, "WindowText", $asm0B.TypeRef("System.Drawing.Brush"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SystemColors */ 

(function SystemColors$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SystemColors", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ActiveBorder", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaptionText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AppWorkspace", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ButtonFace", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ButtonHighlight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ButtonShadow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Control", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_ControlDark", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlDarkDark", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlLight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlLightLight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Desktop", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GradientActiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GradientInactiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GrayText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Highlight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HighlightText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HotTrack", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InactiveBorder", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaptionText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InfoText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Menu", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MenuBar", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MenuHighlight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MenuText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ScrollBar", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Window", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WindowFrame", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WindowText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.Property({Static:true , Public:true }, "ActiveBorder", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ActiveCaption", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ActiveCaptionText", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "AppWorkspace", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ButtonFace", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ButtonHighlight", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ButtonShadow", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "Control", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ControlDark", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ControlDarkDark", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ControlLight", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ControlLightLight", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ControlText", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "Desktop", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "GradientActiveCaption", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "GradientInactiveCaption", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "GrayText", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "Highlight", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "HighlightText", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "HotTrack", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "InactiveBorder", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "InactiveCaption", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "InactiveCaptionText", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "Info", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "InfoText", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "Menu", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "MenuBar", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "MenuHighlight", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "MenuText", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "ScrollBar", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "Window", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "WindowFrame", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:true , Public:true }, "WindowText", $asm0B.TypeRef("System.Drawing.Color"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SystemFonts */ 

(function SystemFonts$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SystemFonts", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FontInPoints", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Font"), [$asm0B.TypeRef("System.Drawing.Font")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CaptionFont", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Font"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultFont", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Font"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DialogFont", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Font"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IconTitleFont", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Font"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MenuFont", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Font"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MessageBoxFont", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Font"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SmallCaptionFont", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Font"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_StatusFont", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Font"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFontByName", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Font"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCriticalFontException", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Exception")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SystemFontsKey", $.Object); 
    $.Property({Static:true , Public:true }, "CaptionFont", $asm0B.TypeRef("System.Drawing.Font"));

    $.Property({Static:true , Public:true }, "SmallCaptionFont", $asm0B.TypeRef("System.Drawing.Font"));

    $.Property({Static:true , Public:true }, "MenuFont", $asm0B.TypeRef("System.Drawing.Font"));

    $.Property({Static:true , Public:true }, "StatusFont", $asm0B.TypeRef("System.Drawing.Font"));

    $.Property({Static:true , Public:true }, "MessageBoxFont", $asm0B.TypeRef("System.Drawing.Font"));

    $.Property({Static:true , Public:true }, "IconTitleFont", $asm0B.TypeRef("System.Drawing.Font"));

    $.Property({Static:true , Public:true }, "DefaultFont", $asm0B.TypeRef("System.Drawing.Font"));

    $.Property({Static:true , Public:true }, "DialogFont", $asm0B.TypeRef("System.Drawing.Font"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SystemIcons */ 

(function SystemIcons$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SystemIcons", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Application", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Icon"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Asterisk", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Icon"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Error", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Icon"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Exclamation", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Icon"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Hand", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Icon"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Information", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Icon"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Question", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Icon"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Shield", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Icon"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Warning", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Icon"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WinLogo", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Icon"))
    );

    $.Field({Static:true , Public:false}, "_application", $asm0B.TypeRef("System.Drawing.Icon")); 
    $.Field({Static:true , Public:false}, "_asterisk", $asm0B.TypeRef("System.Drawing.Icon")); 
    $.Field({Static:true , Public:false}, "_error", $asm0B.TypeRef("System.Drawing.Icon")); 
    $.Field({Static:true , Public:false}, "_exclamation", $asm0B.TypeRef("System.Drawing.Icon")); 
    $.Field({Static:true , Public:false}, "_hand", $asm0B.TypeRef("System.Drawing.Icon")); 
    $.Field({Static:true , Public:false}, "_information", $asm0B.TypeRef("System.Drawing.Icon")); 
    $.Field({Static:true , Public:false}, "_question", $asm0B.TypeRef("System.Drawing.Icon")); 
    $.Field({Static:true , Public:false}, "_warning", $asm0B.TypeRef("System.Drawing.Icon")); 
    $.Field({Static:true , Public:false}, "_winlogo", $asm0B.TypeRef("System.Drawing.Icon")); 
    $.Field({Static:true , Public:false}, "_shield", $asm0B.TypeRef("System.Drawing.Icon")); 
    $.Property({Static:true , Public:true }, "Application", $asm0B.TypeRef("System.Drawing.Icon"));

    $.Property({Static:true , Public:true }, "Asterisk", $asm0B.TypeRef("System.Drawing.Icon"));

    $.Property({Static:true , Public:true }, "Error", $asm0B.TypeRef("System.Drawing.Icon"));

    $.Property({Static:true , Public:true }, "Exclamation", $asm0B.TypeRef("System.Drawing.Icon"));

    $.Property({Static:true , Public:true }, "Hand", $asm0B.TypeRef("System.Drawing.Icon"));

    $.Property({Static:true , Public:true }, "Information", $asm0B.TypeRef("System.Drawing.Icon"));

    $.Property({Static:true , Public:true }, "Question", $asm0B.TypeRef("System.Drawing.Icon"));

    $.Property({Static:true , Public:true }, "Warning", $asm0B.TypeRef("System.Drawing.Icon"));

    $.Property({Static:true , Public:true }, "WinLogo", $asm0B.TypeRef("System.Drawing.Icon"));

    $.Property({Static:true , Public:true }, "Shield", $asm0B.TypeRef("System.Drawing.Icon"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SystemPens */ 

(function SystemPens$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SystemPens", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromSystemColor", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Pen"), [$asm0B.TypeRef("System.Drawing.Color")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ActiveBorder", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ActiveCaptionText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AppWorkspace", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ButtonFace", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ButtonHighlight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ButtonShadow", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Control", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlDark", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlDarkDark", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlLight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlLightLight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ControlText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Desktop", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GradientActiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GradientInactiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GrayText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Highlight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HighlightText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HotTrack", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InactiveBorder", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaption", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InactiveCaptionText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InfoText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Menu", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MenuBar", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MenuHighlight", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MenuText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ScrollBar", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Window", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WindowFrame", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WindowText", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SystemPensKey", $.Object); 
    $.Property({Static:true , Public:true }, "ActiveBorder", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ActiveCaption", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ActiveCaptionText", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "AppWorkspace", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ButtonFace", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ButtonHighlight", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ButtonShadow", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Control", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ControlText", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ControlDark", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ControlDarkDark", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ControlLight", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ControlLightLight", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Desktop", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "GradientActiveCaption", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "GradientInactiveCaption", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "GrayText", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Highlight", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "HighlightText", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "HotTrack", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "InactiveBorder", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "InactiveCaption", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "InactiveCaptionText", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Info", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "InfoText", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Menu", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MenuBar", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MenuHighlight", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "MenuText", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "ScrollBar", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "Window", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "WindowFrame", $asm0B.TypeRef("System.Drawing.Pen"));

    $.Property({Static:true , Public:true }, "WindowText", $asm0B.TypeRef("System.Drawing.Pen"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.ToolboxBitmapAttribute */ 

(function ToolboxBitmapAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Attribute"), 
      Name: "System.Drawing.ToolboxBitmapAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Image")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBitmapFromResource", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Image"), [
          $asm06.TypeRef("System.Type"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileNameFromBitmapSelector", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIconFromResource", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Image"), [
          $asm06.TypeRef("System.Type"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIconFromStream", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Image"), [$asm06.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetImage", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Image"), [$.Object])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetImage", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Image"), [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetImage", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Image"), [$asm06.TypeRef("System.Type")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetImage", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Image"), [$asm06.TypeRef("System.Type"), $.Boolean])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetImage", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Image"), [
          $asm06.TypeRef("System.Type"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetImageFromFile", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Image"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetImageFromResource", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Image"), [
          $asm06.TypeRef("System.Type"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeBackgroundAlphaZero", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Bitmap"))
    );

    $.Field({Static:false, Public:false}, "smallImage", $asm0B.TypeRef("System.Drawing.Image")); 
    $.Field({Static:false, Public:false}, "largeImage", $asm0B.TypeRef("System.Drawing.Image")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "largeDim", $asm0B.TypeRef("System.Drawing.Point")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "smallDim", $asm0B.TypeRef("System.Drawing.Point")); 
    $.Field({Static:true , Public:false}, "lastOriginalFileName", $.String); 
    $.Field({Static:true , Public:false}, "lastUpdatedFileName", $.String); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultComponent", $.Type); 
    function ToolboxBitmapAttribute__cctor () {
      $thisType.largeDim = new $asm0B.System.Drawing.Point();
      $thisType.smallDim = new $asm0B.System.Drawing.Point();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ToolboxBitmapAttribute__cctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.Class]; });

})();

/* class System.Drawing.Drawing2D.CustomLineCap */ 

(function CustomLineCap$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Drawing2D.CustomLineCap", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), $asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetBaseCap", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetBaseInset", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetStrokeJoin", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetWidthScale", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetBaseCap", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetBaseInset", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetStrokeJoin", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetWidthScale", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateCustomLineCapObject", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseCap", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_BaseInset", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_StrokeJoin", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_WidthScale", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetStrokeCaps", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseCap", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_BaseInset", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_StrokeJoin", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_WidthScale", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetNativeLineCap", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetStrokeCaps", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")])
    );

    $.Field({Static:false, Public:false}, "nativeCap", $asm0B.TypeRef("System.Drawing.Drawing2D.SafeCustomLineCapHandle")); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "StrokeJoin", $asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin"));

    $.Property({Static:false, Public:true }, "BaseCap", $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"));

    $.Property({Static:false, Public:true }, "BaseInset", $.Single);

    $.Property({Static:false, Public:true }, "WidthScale", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.ICloneable"), 
      /* 1 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Drawing2D.AdjustableArrowCap */ 

(function AdjustableArrowCap$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCap"), 
      Name: "System.Drawing.Drawing2D.AdjustableArrowCap", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetHeight", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetMiddleInset", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetWidth", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "_IsFilled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetFillState", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetHeight", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetMiddleInset", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetWidth", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filled", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MiddleInset", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Filled", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Height", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_MiddleInset", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Property({Static:false, Public:true }, "Height", $.Single);

    $.Property({Static:false, Public:true }, "Width", $.Single);

    $.Property({Static:false, Public:true }, "MiddleInset", $.Single);

    $.Property({Static:false, Public:true }, "Filled", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Drawing.Imaging");
/* class System.Drawing.Imaging.BitmapData */ 

(function BitmapData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.BitmapData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PixelFormat", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Reserved", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Scan0", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Stride", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Height", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_PixelFormat", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Reserved", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Scan0", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Stride", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "width", $.Int32); 
    $.Field({Static:false, Public:false}, "height", $.Int32); 
    $.Field({Static:false, Public:false}, "stride", $.Int32); 
    $.Field({Static:false, Public:false}, "pixelFormat", $.Int32); 
    $.Field({Static:false, Public:false}, "scan0", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "reserved", $.Int32); 
    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "Stride", $.Int32);

    $.Property({Static:false, Public:true }, "PixelFormat", $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"));

    $.Property({Static:false, Public:true }, "Scan0", $asm06.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "Reserved", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Drawing2D.Blend */ 

(function Blend$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Drawing2D.Blend", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Factors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Positions", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Factors", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Positions", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "factors", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:false}, "positions", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Property({Static:false, Public:true }, "Factors", $jsilcore.TypeRef("System.Array", [$.Single]));

    $.Property({Static:false, Public:true }, "Positions", $jsilcore.TypeRef("System.Array", [$.Single]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Imaging.ColorAdjustType */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.ColorAdjustType", true, {
    Default: 0, 
    Bitmap: 1, 
    Brush: 2, 
    Pen: 3, 
    Text: 4, 
    Count: 5, 
    Any: 6
  }, false
);

/* class System.Drawing.Drawing2D.ColorBlend */ 

(function ColorBlend$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Drawing2D.ColorBlend", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Colors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Positions", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Colors", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Positions", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "colors", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")])); 
    $.Field({Static:false, Public:false}, "positions", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Property({Static:false, Public:true }, "Colors", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]));

    $.Property({Static:false, Public:true }, "Positions", $jsilcore.TypeRef("System.Array", [$.Single]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Imaging.ColorChannelFlag */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.ColorChannelFlag", true, {
    ColorChannelC: 0, 
    ColorChannelM: 1, 
    ColorChannelY: 2, 
    ColorChannelK: 3, 
    ColorChannelLast: 4
  }, false
);

/* class System.Drawing.Imaging.ColorMap */ 

(function ColorMap$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.ColorMap", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewColor", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_OldColor", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_NewColor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_OldColor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "oldColor", $asm0B.TypeRef("System.Drawing.Color")); 
    $.Field({Static:false, Public:false}, "newColor", $asm0B.TypeRef("System.Drawing.Color")); 
    $.Property({Static:false, Public:true }, "OldColor", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:false, Public:true }, "NewColor", $asm0B.TypeRef("System.Drawing.Color"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Imaging.ColorMapType */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.ColorMapType", true, {
    Default: 0, 
    Brush: 1
  }, false
);

/* class System.Drawing.Imaging.ColorMatrix */ 

(function ColorMatrix$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.ColorMatrix", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Single])]))
    )
      .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Single, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix00", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix01", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix02", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix03", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix04", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix10", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix11", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix12", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix13", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix14", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix20", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix21", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix22", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix23", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix24", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix30", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix31", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix32", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix33", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix34", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix40", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix41", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix42", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix43", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix44", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetMatrix", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Single])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix00", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix01", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix02", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix03", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix04", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix10", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix11", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix12", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix13", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix14", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix20", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix21", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix22", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix23", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix24", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix30", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix31", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix32", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix33", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix34", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix40", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix41", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix42", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix43", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix44", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetMatrix", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Single])]))
    );

    $.Field({Static:false, Public:false}, "matrix00", $.Single); 
    $.Field({Static:false, Public:false}, "matrix01", $.Single); 
    $.Field({Static:false, Public:false}, "matrix02", $.Single); 
    $.Field({Static:false, Public:false}, "matrix03", $.Single); 
    $.Field({Static:false, Public:false}, "matrix04", $.Single); 
    $.Field({Static:false, Public:false}, "matrix10", $.Single); 
    $.Field({Static:false, Public:false}, "matrix11", $.Single); 
    $.Field({Static:false, Public:false}, "matrix12", $.Single); 
    $.Field({Static:false, Public:false}, "matrix13", $.Single); 
    $.Field({Static:false, Public:false}, "matrix14", $.Single); 
    $.Field({Static:false, Public:false}, "matrix20", $.Single); 
    $.Field({Static:false, Public:false}, "matrix21", $.Single); 
    $.Field({Static:false, Public:false}, "matrix22", $.Single); 
    $.Field({Static:false, Public:false}, "matrix23", $.Single); 
    $.Field({Static:false, Public:false}, "matrix24", $.Single); 
    $.Field({Static:false, Public:false}, "matrix30", $.Single); 
    $.Field({Static:false, Public:false}, "matrix31", $.Single); 
    $.Field({Static:false, Public:false}, "matrix32", $.Single); 
    $.Field({Static:false, Public:false}, "matrix33", $.Single); 
    $.Field({Static:false, Public:false}, "matrix34", $.Single); 
    $.Field({Static:false, Public:false}, "matrix40", $.Single); 
    $.Field({Static:false, Public:false}, "matrix41", $.Single); 
    $.Field({Static:false, Public:false}, "matrix42", $.Single); 
    $.Field({Static:false, Public:false}, "matrix43", $.Single); 
    $.Field({Static:false, Public:false}, "matrix44", $.Single); 
    $.Property({Static:false, Public:true }, "Matrix00", $.Single);

    $.Property({Static:false, Public:true }, "Matrix01", $.Single);

    $.Property({Static:false, Public:true }, "Matrix02", $.Single);

    $.Property({Static:false, Public:true }, "Matrix03", $.Single);

    $.Property({Static:false, Public:true }, "Matrix04", $.Single);

    $.Property({Static:false, Public:true }, "Matrix10", $.Single);

    $.Property({Static:false, Public:true }, "Matrix11", $.Single);

    $.Property({Static:false, Public:true }, "Matrix12", $.Single);

    $.Property({Static:false, Public:true }, "Matrix13", $.Single);

    $.Property({Static:false, Public:true }, "Matrix14", $.Single);

    $.Property({Static:false, Public:true }, "Matrix20", $.Single);

    $.Property({Static:false, Public:true }, "Matrix21", $.Single);

    $.Property({Static:false, Public:true }, "Matrix22", $.Single);

    $.Property({Static:false, Public:true }, "Matrix23", $.Single);

    $.Property({Static:false, Public:true }, "Matrix24", $.Single);

    $.Property({Static:false, Public:true }, "Matrix30", $.Single);

    $.Property({Static:false, Public:true }, "Matrix31", $.Single);

    $.Property({Static:false, Public:true }, "Matrix32", $.Single);

    $.Property({Static:false, Public:true }, "Matrix33", $.Single);

    $.Property({Static:false, Public:true }, "Matrix34", $.Single);

    $.Property({Static:false, Public:true }, "Matrix40", $.Single);

    $.Property({Static:false, Public:true }, "Matrix41", $.Single);

    $.Property({Static:false, Public:true }, "Matrix42", $.Single);

    $.Property({Static:false, Public:true }, "Matrix43", $.Single);

    $.Property({Static:false, Public:true }, "Matrix44", $.Single);

    $.Property({Static:false, Public:true }, "Item", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Drawing.Imaging.ColorMatrixFlag */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.ColorMatrixFlag", true, {
    Default: 0, 
    SkipGrays: 1, 
    AltGrays: 2
  }, false
);

/* enum System.Drawing.Imaging.ColorMode */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.ColorMode", true, {
    Argb32Mode: 0, 
    Argb64Mode: 1
  }, false
);

/* class System.Drawing.Imaging.ColorPalette */ 

(function ColorPalette$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.ColorPalette", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertFromMemory", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToMemory", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Entries", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Flags", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "flags", $.Int32); 
    $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")])); 
    $.Property({Static:false, Public:true }, "Flags", $.Int32);

    $.Property({Static:false, Public:true }, "Entries", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.ColorTranslator */ 

(function ColorTranslator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.ColorTranslator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHtml", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Color"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromOle", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Color"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromWin32", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Color"), [$.Int32])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "InitializeHtmlSysColorTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ToHtml", 
      new JSIL.MethodSignature($.String, [$asm0B.TypeRef("System.Drawing.Color")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToOle", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Color")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToWin32", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Color")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.Field({Static:true , Public:false}, "htmlSysColorTable", $asm06.TypeRef("System.Collections.Hashtable")); 
    $.Constant({Static:true , Public:false}, "Win32RedShift", 0); 
    $.Constant({Static:true , Public:false}, "Win32GreenShift", 8); 
    $.Constant({Static:true , Public:false}, "Win32BlueShift", 16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Drawing2D.CombineMode */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.CombineMode", true, {
    Replace: 0, 
    Intersect: 1, 
    Union: 2, 
    Xor: 3, 
    Exclude: 4, 
    Complement: 5
  }, false
);

/* enum System.Drawing.Drawing2D.CompositingMode */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.CompositingMode", true, {
    SourceOver: 0, 
    SourceCopy: 1
  }, false
);

/* enum System.Drawing.Drawing2D.CompositingQuality */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.CompositingQuality", true, {
    Invalid: -1, 
    Default: 0, 
    HighSpeed: 1, 
    HighQuality: 2, 
    GammaCorrected: 3, 
    AssumeLinear: 4
  }, false
);

/* enum System.Drawing.Drawing2D.CoordinateSpace */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.CoordinateSpace", true, {
    World: 0, 
    Page: 1, 
    Device: 2
  }, false
);

/* enum System.Drawing.Drawing2D.DashStyle */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.DashStyle", true, {
    Solid: 0, 
    Dash: 1, 
    Dot: 2, 
    DashDot: 3, 
    DashDotDot: 4, 
    Custom: 5
  }, false
);

/* enum System.Drawing.Imaging.EmfPlusFlags */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.EmfPlusFlags", false, {
    Display: 1, 
    NonDualGdi: 2
  }, false
);

/* enum System.Drawing.Imaging.EmfPlusRecordType */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.EmfPlusRecordType", true, {
    EmfMin: 1, 
    EmfHeader: 1, 
    EmfPolyBezier: 2, 
    EmfPolygon: 3, 
    EmfPolyline: 4, 
    EmfPolyBezierTo: 5, 
    EmfPolyLineTo: 6, 
    EmfPolyPolyline: 7, 
    EmfPolyPolygon: 8, 
    EmfSetWindowExtEx: 9, 
    EmfSetWindowOrgEx: 10, 
    EmfSetViewportExtEx: 11, 
    EmfSetViewportOrgEx: 12, 
    EmfSetBrushOrgEx: 13, 
    EmfEof: 14, 
    EmfSetPixelV: 15, 
    EmfSetMapperFlags: 16, 
    EmfSetMapMode: 17, 
    EmfSetBkMode: 18, 
    EmfSetPolyFillMode: 19, 
    EmfSetROP2: 20, 
    EmfSetStretchBltMode: 21, 
    EmfSetTextAlign: 22, 
    EmfSetColorAdjustment: 23, 
    EmfSetTextColor: 24, 
    EmfSetBkColor: 25, 
    EmfOffsetClipRgn: 26, 
    EmfMoveToEx: 27, 
    EmfSetMetaRgn: 28, 
    EmfExcludeClipRect: 29, 
    EmfIntersectClipRect: 30, 
    EmfScaleViewportExtEx: 31, 
    EmfScaleWindowExtEx: 32, 
    EmfSaveDC: 33, 
    EmfRestoreDC: 34, 
    EmfSetWorldTransform: 35, 
    EmfModifyWorldTransform: 36, 
    EmfSelectObject: 37, 
    EmfCreatePen: 38, 
    EmfCreateBrushIndirect: 39, 
    EmfDeleteObject: 40, 
    EmfAngleArc: 41, 
    EmfEllipse: 42, 
    EmfRectangle: 43, 
    EmfRoundRect: 44, 
    EmfRoundArc: 45, 
    EmfChord: 46, 
    EmfPie: 47, 
    EmfSelectPalette: 48, 
    EmfCreatePalette: 49, 
    EmfSetPaletteEntries: 50, 
    EmfResizePalette: 51, 
    EmfRealizePalette: 52, 
    EmfExtFloodFill: 53, 
    EmfLineTo: 54, 
    EmfArcTo: 55, 
    EmfPolyDraw: 56, 
    EmfSetArcDirection: 57, 
    EmfSetMiterLimit: 58, 
    EmfBeginPath: 59, 
    EmfEndPath: 60, 
    EmfCloseFigure: 61, 
    EmfFillPath: 62, 
    EmfStrokeAndFillPath: 63, 
    EmfStrokePath: 64, 
    EmfFlattenPath: 65, 
    EmfWidenPath: 66, 
    EmfSelectClipPath: 67, 
    EmfAbortPath: 68, 
    EmfReserved069: 69, 
    EmfGdiComment: 70, 
    EmfFillRgn: 71, 
    EmfFrameRgn: 72, 
    EmfInvertRgn: 73, 
    EmfPaintRgn: 74, 
    EmfExtSelectClipRgn: 75, 
    EmfBitBlt: 76, 
    EmfStretchBlt: 77, 
    EmfMaskBlt: 78, 
    EmfPlgBlt: 79, 
    EmfSetDIBitsToDevice: 80, 
    EmfStretchDIBits: 81, 
    EmfExtCreateFontIndirect: 82, 
    EmfExtTextOutA: 83, 
    EmfExtTextOutW: 84, 
    EmfPolyBezier16: 85, 
    EmfPolygon16: 86, 
    EmfPolyline16: 87, 
    EmfPolyBezierTo16: 88, 
    EmfPolylineTo16: 89, 
    EmfPolyPolyline16: 90, 
    EmfPolyPolygon16: 91, 
    EmfPolyDraw16: 92, 
    EmfCreateMonoBrush: 93, 
    EmfCreateDibPatternBrushPt: 94, 
    EmfExtCreatePen: 95, 
    EmfPolyTextOutA: 96, 
    EmfPolyTextOutW: 97, 
    EmfSetIcmMode: 98, 
    EmfCreateColorSpace: 99, 
    EmfSetColorSpace: 100, 
    EmfDeleteColorSpace: 101, 
    EmfGlsRecord: 102, 
    EmfGlsBoundedRecord: 103, 
    EmfPixelFormat: 104, 
    EmfDrawEscape: 105, 
    EmfExtEscape: 106, 
    EmfStartDoc: 107, 
    EmfSmallTextOut: 108, 
    EmfForceUfiMapping: 109, 
    EmfNamedEscpae: 110, 
    EmfColorCorrectPalette: 111, 
    EmfSetIcmProfileA: 112, 
    EmfSetIcmProfileW: 113, 
    EmfAlphaBlend: 114, 
    EmfSetLayout: 115, 
    EmfTransparentBlt: 116, 
    EmfReserved117: 117, 
    EmfGradientFill: 118, 
    EmfSetLinkedUfis: 119, 
    EmfSetTextJustification: 120, 
    EmfColorMatchToTargetW: 121, 
    EmfCreateColorSpaceW: 122, 
    EmfMax: 122, 
    EmfPlusRecordBase: 16384, 
    Invalid: 16384, 
    Min: 16385, 
    Header: 16385, 
    EndOfFile: 16386, 
    Comment: 16387, 
    GetDC: 16388, 
    MultiFormatStart: 16389, 
    MultiFormatSection: 16390, 
    MultiFormatEnd: 16391, 
    Object: 16392, 
    Clear: 16393, 
    FillRects: 16394, 
    DrawRects: 16395, 
    FillPolygon: 16396, 
    DrawLines: 16397, 
    FillEllipse: 16398, 
    DrawEllipse: 16399, 
    FillPie: 16400, 
    DrawPie: 16401, 
    DrawArc: 16402, 
    FillRegion: 16403, 
    FillPath: 16404, 
    DrawPath: 16405, 
    FillClosedCurve: 16406, 
    DrawClosedCurve: 16407, 
    DrawCurve: 16408, 
    DrawBeziers: 16409, 
    DrawImage: 16410, 
    DrawImagePoints: 16411, 
    DrawString: 16412, 
    SetRenderingOrigin: 16413, 
    SetAntiAliasMode: 16414, 
    SetTextRenderingHint: 16415, 
    SetTextContrast: 16416, 
    SetInterpolationMode: 16417, 
    SetPixelOffsetMode: 16418, 
    SetCompositingMode: 16419, 
    SetCompositingQuality: 16420, 
    Save: 16421, 
    Restore: 16422, 
    BeginContainer: 16423, 
    BeginContainerNoParams: 16424, 
    EndContainer: 16425, 
    SetWorldTransform: 16426, 
    ResetWorldTransform: 16427, 
    MultiplyWorldTransform: 16428, 
    TranslateWorldTransform: 16429, 
    ScaleWorldTransform: 16430, 
    RotateWorldTransform: 16431, 
    SetPageTransform: 16432, 
    ResetClip: 16433, 
    SetClipRect: 16434, 
    SetClipPath: 16435, 
    SetClipRegion: 16436, 
    OffsetClip: 16437, 
    Max: 16438, 
    DrawDriverString: 16438, 
    Total: 16439, 
    WmfRecordBase: 65536, 
    WmfSaveDC: 65566, 
    WmfRealizePalette: 65589, 
    WmfSetPalEntries: 65591, 
    WmfCreatePalette: 65783, 
    WmfSetBkMode: 65794, 
    WmfSetMapMode: 65795, 
    WmfSetROP2: 65796, 
    WmfSetRelAbs: 65797, 
    WmfSetPolyFillMode: 65798, 
    WmfSetStretchBltMode: 65799, 
    WmfSetTextCharExtra: 65800, 
    WmfRestoreDC: 65831, 
    WmfInvertRegion: 65834, 
    WmfPaintRegion: 65835, 
    WmfSelectClipRegion: 65836, 
    WmfSelectObject: 65837, 
    WmfSetTextAlign: 65838, 
    WmfResizePalette: 65849, 
    WmfDibCreatePatternBrush: 65858, 
    WmfSetLayout: 65865, 
    WmfDeleteObject: 66032, 
    WmfCreatePatternBrush: 66041, 
    WmfSetBkColor: 66049, 
    WmfSetTextColor: 66057, 
    WmfSetTextJustification: 66058, 
    WmfSetWindowOrg: 66059, 
    WmfSetWindowExt: 66060, 
    WmfSetViewportOrg: 66061, 
    WmfSetViewportExt: 66062, 
    WmfOffsetWindowOrg: 66063, 
    WmfOffsetViewportOrg: 66065, 
    WmfLineTo: 66067, 
    WmfMoveTo: 66068, 
    WmfOffsetCilpRgn: 66080, 
    WmfFillRegion: 66088, 
    WmfSetMapperFlags: 66097, 
    WmfSelectPalette: 66100, 
    WmfCreatePenIndirect: 66298, 
    WmfCreateFontIndirect: 66299, 
    WmfCreateBrushIndirect: 66300, 
    WmfPolygon: 66340, 
    WmfPolyline: 66341, 
    WmfScaleWindowExt: 66576, 
    WmfScaleViewportExt: 66578, 
    WmfExcludeClipRect: 66581, 
    WmfIntersectClipRect: 66582, 
    WmfEllipse: 66584, 
    WmfFloodFill: 66585, 
    WmfRectangle: 66587, 
    WmfSetPixel: 66591, 
    WmfFrameRegion: 66601, 
    WmfAnimatePalette: 66614, 
    WmfTextOut: 66849, 
    WmfPolyPolygon: 66872, 
    WmfExtFloodFill: 66888, 
    WmfRoundRect: 67100, 
    WmfPatBlt: 67101, 
    WmfEscape: 67110, 
    WmfCreateRegion: 67327, 
    WmfArc: 67607, 
    WmfPie: 67610, 
    WmfChord: 67632, 
    WmfBitBlt: 67874, 
    WmfDibBitBlt: 67904, 
    WmfExtTextOut: 68146, 
    WmfStretchBlt: 68387, 
    WmfDibStretchBlt: 68417, 
    WmfSetDibToDev: 68915, 
    WmfStretchDib: 69443
  }, false
);

/* enum System.Drawing.Imaging.EmfType */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.EmfType", true, {
    EmfOnly: 3, 
    EmfPlusOnly: 4, 
    EmfPlusDual: 5
  }, false
);

/* class System.Drawing.Imaging.Encoder */ 

(function Encoder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.Encoder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Guid"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Guid", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Guid"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:true , Public:true , ReadOnly:true }, "Compression", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ColorDepth", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ScanMethod", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Version", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "RenderMethod", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Quality", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Transformation", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LuminanceTable", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ChrominanceTable", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SaveFlag", $.Type); 
    $.Field({Static:false, Public:false}, "guid", $asm06.TypeRef("System.Guid")); 
    $.Property({Static:false, Public:true }, "Guid", $asm06.TypeRef("System.Guid"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Imaging.EncoderParameter */ 

(function EncoderParameter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.EncoderParameter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Byte])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Byte, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int16])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Int16])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Int64])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $jsilcore.TypeRef("System.Array", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int32, 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["This constructor has been deprecated. Use EncoderParameter(Encoder encoder, int numberValues, EncoderParameterValueType type, IntPtr value) instead.  http://go.microsoft.com/fwlink/?linkid=14202"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.Encoder"), $.Int32, 
          $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameterValueType"), $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Int32, $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoder", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.Encoder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumberOfValues", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.EncoderParameterValueType"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.EncoderParameterValueType"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Encoder", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.Encoder"))
    );

    $.Field({Static:false, Public:false}, "parameterGuid", $asm06.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "numberOfValues", $.Int32); 
    $.Field({Static:false, Public:false}, "parameterValueType", $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameterValueType")); 
    $.Field({Static:false, Public:false}, "parameterValue", $asm06.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:true }, "Encoder", $asm0B.TypeRef("System.Drawing.Imaging.Encoder"));

    $.Property({Static:false, Public:true }, "Type", $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameterValueType"));

    $.Property({Static:false, Public:true }, "ValueType", $asm0B.TypeRef("System.Drawing.Imaging.EncoderParameterValueType"));

    $.Property({Static:false, Public:true }, "NumberOfValues", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Imaging.EncoderParameters */ 

(function EncoderParameters$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.EncoderParameters", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertFromMemory", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToMemory", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Param", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.EncoderParameter")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Param", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.EncoderParameter")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "param", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.EncoderParameter")])); 
    $.Property({Static:false, Public:true }, "Param", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.EncoderParameter")]));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Imaging.EncoderParameterValueType */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.EncoderParameterValueType", true, {
    ValueTypeByte: 1, 
    ValueTypeAscii: 2, 
    ValueTypeShort: 3, 
    ValueTypeLong: 4, 
    ValueTypeRational: 5, 
    ValueTypeLongRange: 6, 
    ValueTypeUndefined: 7, 
    ValueTypeRationalRange: 8
  }, false
);

/* enum System.Drawing.Imaging.EncoderValue */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.EncoderValue", true, {
    ColorTypeCMYK: 0, 
    ColorTypeYCCK: 1, 
    CompressionLZW: 2, 
    CompressionCCITT3: 3, 
    CompressionCCITT4: 4, 
    CompressionRle: 5, 
    CompressionNone: 6, 
    ScanMethodInterlaced: 7, 
    ScanMethodNonInterlaced: 8, 
    VersionGif87: 9, 
    VersionGif89: 10, 
    RenderProgressive: 11, 
    RenderNonProgressive: 12, 
    TransformRotate90: 13, 
    TransformRotate180: 14, 
    TransformRotate270: 15, 
    TransformFlipHorizontal: 16, 
    TransformFlipVertical: 17, 
    MultiFrame: 18, 
    LastFrame: 19, 
    Flush: 20, 
    FrameDimensionTime: 21, 
    FrameDimensionResolution: 22, 
    FrameDimensionPage: 23
  }, false
);

/* enum System.Drawing.Drawing2D.FillMode */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.FillMode", true, {
    Alternate: 0, 
    Winding: 1
  }, false
);

/* enum System.Drawing.Drawing2D.FlushIntention */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.FlushIntention", true, {
    Flush: 0, 
    Sync: 1
  }, false
);

/* class System.Drawing.Font */ 

(function Font$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Font", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm0B.TypeRef("System.Drawing.FontStyle")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $.Byte, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $.Byte, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.FontFamily"), $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $asm0B.TypeRef("System.Drawing.GraphicsUnit")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Single])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $.Byte, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNativeFont", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHdc", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHfont", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromLogFont", 
      new JSIL.MethodSignature($.Type, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromLogFont", 
      new JSIL.MethodSignature($.Type, [$.Object, $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bold", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FontFamily", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.FontFamily"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_GdiCharSet", 
      JSIL.MethodSignature.Return($.Byte)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_GdiVerticalFont", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsSystemFont", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Italic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NativeFont", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalFontName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SizeInPoints", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Strikeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Style", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.FontStyle"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SystemFontName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Underline", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Unit", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.GraphicsUnit"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHeight", 
      new JSIL.MethodSignature($.Single, [$asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHeight", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHeight", 
      new JSIL.MethodSignature($.Single, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $.Byte, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.FontFamily"), $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $.Byte, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsVerticalName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFontFamily", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.FontFamily"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSystemFontName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "StripVerticalName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm06.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:true }, "ToHfont", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToLogFont", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToLogFont", 
      new JSIL.MethodSignature(null, [$.Object, $asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "nativeFont", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "fontSize", $.Single); 
    $.Field({Static:false, Public:false}, "fontStyle", $asm0B.TypeRef("System.Drawing.FontStyle")); 
    $.Field({Static:false, Public:false}, "fontFamily", $asm0B.TypeRef("System.Drawing.FontFamily")); 
    $.Field({Static:false, Public:false}, "fontUnit", $asm0B.TypeRef("System.Drawing.GraphicsUnit")); 
    $.Field({Static:false, Public:false}, "gdiCharSet", $.Byte); 
    $.Field({Static:false, Public:false}, "gdiVerticalFont", $.Boolean); 
    $.Field({Static:false, Public:false}, "systemFontName", $.String); 
    $.Field({Static:false, Public:false}, "originalFontName", $.String); 
    $.Constant({Static:true , Public:false}, "LogFontCharSetOffset", 23); 
    $.Constant({Static:true , Public:false}, "LogFontNameOffset", 28); 
    $.Property({Static:false, Public:false}, "NativeFont", $asm06.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "FontFamily", $asm0B.TypeRef("System.Drawing.FontFamily"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Bold", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "GdiCharSet", $.Byte)
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "GdiVerticalFont", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "Italic", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.FontConverter_FontNameConverter.__Type__]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.FontNameEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.System.Drawing.Design.UITypeEditor.__Type__]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "OriginalFontName", $.String)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Strikeout", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "Underline", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "Style", $asm0B.TypeRef("System.Drawing.FontStyle"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Size", $.Single);

    $.Property({Static:false, Public:true }, "SizeInPoints", $.Single)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Unit", $asm0B.TypeRef("System.Drawing.GraphicsUnit"))
      .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.FontConverter_FontUnitConverter.__Type__]; });

    $.Property({Static:false, Public:true }, "Height", $.Int32)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "IsSystemFont", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "SystemFontName", $.String)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.ICloneable"), 
      /* 1 */ $asm06.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 2 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.FontEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.System.Drawing.Design.UITypeEditor.__Type__]; })
    .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.FontConverter.__Type__]; });

})();

JSIL.DeclareNamespace("System.Drawing.Text");
/* class System.Drawing.Text.FontCollection */ 

(function FontCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Text.FontCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Families", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.FontFamily")]))
    );

    $.Field({Static:false, Public:false}, "nativeFontCollection", $asm06.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:true }, "Families", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.FontFamily")]));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.FontFamily */ 

(function FontFamily$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.FontFamily", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0B.TypeRef("System.Drawing.Text.FontCollection")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Text.GenericFontFamilies"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateFontFamily", 
      new JSIL.MethodSignature(null, [$.String, $asm0B.TypeRef("System.Drawing.Text.FontCollection")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentLanguage", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Families", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericMonospace", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericSansSerif", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericSerif", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NativeFamily", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCellAscent", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.FontStyle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCellDescent", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.FontStyle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEmHeight", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.FontStyle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFamilies", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm0B.TypeRef("System.Drawing.Graphics")])
    )
      .Attribute($asm06.TypeRef("System.ObsoleteAttribute"), function () { return ["Do not use method GetFamilies, use property Families instead"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetGdipGenericSansSerif", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLineSpacing", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.FontStyle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNativeGenericMonospace", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNativeGenericSerif", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStyleAvailable", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.FontStyle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNativeFamily", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "nativeFamily", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "createDefaultOnFail", $.Boolean); 
    $.Constant({Static:true , Public:false}, "LANG_NEUTRAL", 0); 
    $.Property({Static:false, Public:false}, "NativeFamily", $asm06.TypeRef("System.IntPtr"));

    $.Property({Static:true , Public:false}, "CurrentLanguage", $.Int32);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:true , Public:true }, "Families", $jsilcore.TypeRef("System.Array", [$.Type]));

    $.Property({Static:true , Public:true }, "GenericSansSerif", $.Type);

    $.Property({Static:true , Public:true }, "GenericSerif", $.Type);

    $.Property({Static:true , Public:true }, "GenericMonospace", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.FontStyle */ 

JSIL.MakeEnum(
  "System.Drawing.FontStyle", true, {
    Regular: 0, 
    Bold: 1, 
    Italic: 2, 
    Underline: 4, 
    Strikeout: 8
  }, true
);

/* class System.Drawing.Imaging.FrameDimension */ 

(function FrameDimension$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.FrameDimension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Guid"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Guid", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Guid"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Page", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Resolution", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Time", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "time", $.Type); 
    $.Field({Static:true , Public:false}, "resolution", $.Type); 
    $.Field({Static:true , Public:false}, "page", $.Type); 
    $.Field({Static:false, Public:false}, "guid", $asm06.TypeRef("System.Guid")); 
    $.Property({Static:false, Public:true }, "Guid", $asm06.TypeRef("System.Guid"));

    $.Property({Static:true , Public:true }, "Time", $.Type);

    $.Property({Static:true , Public:true }, "Resolution", $.Type);

    $.Property({Static:true , Public:true }, "Page", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods */ 

(function SafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "AbortDoc", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddFontFile", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddFontResourceEx", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitBlt", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyImage", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBitmap", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateCompatibleBitmap", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDIBSection", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.NativeMethods+BITMAPINFO_FLAT")]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), 
          $asm06.TypeRef("System.IntPtr"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateIconFromResourceEx", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32, 
          $.Boolean, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRectRgn", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteObject", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "DestroyIcon", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeviceCapabilities", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int16, $asm06.TypeRef("System.IntPtr"), 
          $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DocumentProperties", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DocumentProperties", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm06.TypeRef("System.IntPtr"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DrawIconEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "EndDoc", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "EndPage", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "EnumPrinters", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.String, 
          $.Int32, $asm06.TypeRef("System.IntPtr"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExtEscape", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExtEscape", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExtractAssociatedIcon", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetClipRgn", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDIBits", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.NativeMethods+BITMAPINFO_FLAT")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetIconInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.SafeNativeMethods+ICONINFO")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $asm0B.TypeRef("System.Drawing.SafeNativeMethods+BITMAP")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $asm0B.TypeRef("System.Drawing.SafeNativeMethods+LOGFONT")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.SafeNativeMethods+LOGFONT")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPaletteEntries", 
      new JSIL.MethodSignature($.UInt32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSysColor", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GlobalAlloc", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Int32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GlobalFree", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GlobalLock", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GlobalUnlock", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntCopyImage", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntCreateBitmap", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntCreateCompatibleBitmap", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntCreateDIBSection", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.NativeMethods+BITMAPINFO_FLAT")]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), 
          $asm06.TypeRef("System.IntPtr"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntCreateIconFromResourceEx", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32, 
          $.Boolean, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntCreateRectRgn", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntDeleteObject", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntDestroyIcon", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntersectClipRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntExtractAssociatedIcon", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGlobalAlloc", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Int32, $asm06.TypeRef("System.UIntPtr")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntLoadIcon", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntLoadIconWithScaleDown", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LoadIcon", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "LoadIconWithScaleDown", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "OleCreatePictureIndirect", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.SafeNativeMethods+IPicture"), [
          $asm0B.TypeRef("System.Drawing.SafeNativeMethods+PICTDESC"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PrintDlg", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.SafeNativeMethods+PRINTDLG")])
    );

    $.ExternalMethod({Static:true , Public:true }, "PrintDlg", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.SafeNativeMethods+PRINTDLGX86")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ResetDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RestoreClipRgn", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SaveClipRgn", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SelectClipRgn", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SelectObject", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartDoc", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.SafeNativeMethods+DOCINFO")])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartPage", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ZeroMemory", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.UIntPtr")])
    );

    $.Field({Static:true , Public:true }, "InvalidIntPtr", $asm06.TypeRef("System.IntPtr")); 
    $.Constant({Static:true , Public:true }, "ERROR_CANCELLED", 1223); 
    $.Constant({Static:true , Public:true }, "RASTERCAPS", 38); 
    $.Constant({Static:true , Public:true }, "RC_PALETTE", 256); 
    $.Constant({Static:true , Public:true }, "SIZEPALETTE", 104); 
    $.Constant({Static:true , Public:true }, "SYSPAL_STATIC", 1); 
    $.Constant({Static:true , Public:true }, "BS_SOLID", 0); 
    $.Constant({Static:true , Public:true }, "HOLLOW_BRUSH", 5); 
    $.Constant({Static:true , Public:true }, "R2_BLACK", 1); 
    $.Constant({Static:true , Public:true }, "R2_NOTMERGEPEN", 2); 
    $.Constant({Static:true , Public:true }, "R2_MASKNOTPEN", 3); 
    $.Constant({Static:true , Public:true }, "R2_NOTCOPYPEN", 4); 
    $.Constant({Static:true , Public:true }, "R2_MASKPENNOT", 5); 
    $.Constant({Static:true , Public:true }, "R2_NOT", 6); 
    $.Constant({Static:true , Public:true }, "R2_XORPEN", 7); 
    $.Constant({Static:true , Public:true }, "R2_NOTMASKPEN", 8); 
    $.Constant({Static:true , Public:true }, "R2_MASKPEN", 9); 
    $.Constant({Static:true , Public:true }, "R2_NOTXORPEN", 10); 
    $.Constant({Static:true , Public:true }, "R2_NOP", 11); 
    $.Constant({Static:true , Public:true }, "R2_MERGENOTPEN", 12); 
    $.Constant({Static:true , Public:true }, "R2_COPYPEN", 13); 
    $.Constant({Static:true , Public:true }, "R2_MERGEPENNOT", 14); 
    $.Constant({Static:true , Public:true }, "R2_MERGEPEN", 15); 
    $.Constant({Static:true , Public:true }, "R2_WHITE", 16); 
    $.Constant({Static:true , Public:true }, "UOI_FLAGS", 1); 
    $.Constant({Static:true , Public:true }, "WSF_VISIBLE", 1); 
    $.Constant({Static:true , Public:true }, "E_UNEXPECTED", -2147418113); 
    $.Constant({Static:true , Public:true }, "E_NOTIMPL", -2147467263); 
    $.Constant({Static:true , Public:true }, "E_OUTOFMEMORY", -2147024882); 
    $.Constant({Static:true , Public:true }, "E_INVALIDARG", -2147024809); 
    $.Constant({Static:true , Public:true }, "E_NOINTERFACE", -2147467262); 
    $.Constant({Static:true , Public:true }, "E_POINTER", -2147467261); 
    $.Constant({Static:true , Public:true }, "E_HANDLE", -2147024890); 
    $.Constant({Static:true , Public:true }, "E_ABORT", -2147467260); 
    $.Constant({Static:true , Public:true }, "E_FAIL", -2147467259); 
    $.Constant({Static:true , Public:true }, "E_ACCESSDENIED", -2147024891); 
    $.Constant({Static:true , Public:true }, "PM_NOREMOVE", 0); 
    $.Constant({Static:true , Public:true }, "PM_REMOVE", 1); 
    $.Constant({Static:true , Public:true }, "PM_NOYIELD", 2); 
    $.Constant({Static:true , Public:true }, "GMEM_FIXED", 0); 
    $.Constant({Static:true , Public:true }, "GMEM_MOVEABLE", 2); 
    $.Constant({Static:true , Public:true }, "GMEM_NOCOMPACT", 16); 
    $.Constant({Static:true , Public:true }, "GMEM_NODISCARD", 32); 
    $.Constant({Static:true , Public:true }, "GMEM_ZEROINIT", 64); 
    $.Constant({Static:true , Public:true }, "GMEM_MODIFY", 128); 
    $.Constant({Static:true , Public:true }, "GMEM_DISCARDABLE", 256); 
    $.Constant({Static:true , Public:true }, "GMEM_NOT_BANKED", 4096); 
    $.Constant({Static:true , Public:true }, "GMEM_SHARE", 8192); 
    $.Constant({Static:true , Public:true }, "GMEM_DDESHARE", 8192); 
    $.Constant({Static:true , Public:true }, "GMEM_NOTIFY", 16384); 
    $.Constant({Static:true , Public:true }, "GMEM_LOWER", 4096); 
    $.Constant({Static:true , Public:true }, "GMEM_VALID_FLAGS", 32626); 
    $.Constant({Static:true , Public:true }, "GMEM_INVALID_HANDLE", 32768); 
    $.Constant({Static:true , Public:true }, "DM_UPDATE", 1); 
    $.Constant({Static:true , Public:true }, "DM_COPY", 2); 
    $.Constant({Static:true , Public:true }, "DM_PROMPT", 4); 
    $.Constant({Static:true , Public:true }, "DM_MODIFY", 8); 
    $.Constant({Static:true , Public:true }, "DM_IN_BUFFER", 8); 
    $.Constant({Static:true , Public:true }, "DM_IN_PROMPT", 4); 
    $.Constant({Static:true , Public:true }, "DM_OUT_BUFFER", 2); 
    $.Constant({Static:true , Public:true }, "DM_OUT_DEFAULT", 1); 
    $.Constant({Static:true , Public:true }, "DT_PLOTTER", 0); 
    $.Constant({Static:true , Public:true }, "DT_RASDISPLAY", 1); 
    $.Constant({Static:true , Public:true }, "DT_RASPRINTER", 2); 
    $.Constant({Static:true , Public:true }, "DT_RASCAMERA", 3); 
    $.Constant({Static:true , Public:true }, "DT_CHARSTREAM", 4); 
    $.Constant({Static:true , Public:true }, "DT_METAFILE", 5); 
    $.Constant({Static:true , Public:true }, "DT_DISPFILE", 6); 
    $.Constant({Static:true , Public:true }, "TECHNOLOGY", 2); 
    $.Constant({Static:true , Public:true }, "DC_FIELDS", 1); 
    $.Constant({Static:true , Public:true }, "DC_PAPERS", 2); 
    $.Constant({Static:true , Public:true }, "DC_PAPERSIZE", 3); 
    $.Constant({Static:true , Public:true }, "DC_MINEXTENT", 4); 
    $.Constant({Static:true , Public:true }, "DC_MAXEXTENT", 5); 
    $.Constant({Static:true , Public:true }, "DC_BINS", 6); 
    $.Constant({Static:true , Public:true }, "DC_DUPLEX", 7); 
    $.Constant({Static:true , Public:true }, "DC_SIZE", 8); 
    $.Constant({Static:true , Public:true }, "DC_EXTRA", 9); 
    $.Constant({Static:true , Public:true }, "DC_VERSION", 10); 
    $.Constant({Static:true , Public:true }, "DC_DRIVER", 11); 
    $.Constant({Static:true , Public:true }, "DC_BINNAMES", 12); 
    $.Constant({Static:true , Public:true }, "DC_ENUMRESOLUTIONS", 13); 
    $.Constant({Static:true , Public:true }, "DC_FILEDEPENDENCIES", 14); 
    $.Constant({Static:true , Public:true }, "DC_TRUETYPE", 15); 
    $.Constant({Static:true , Public:true }, "DC_PAPERNAMES", 16); 
    $.Constant({Static:true , Public:true }, "DC_ORIENTATION", 17); 
    $.Constant({Static:true , Public:true }, "DC_COPIES", 18); 
    $.Constant({Static:true , Public:true }, "PD_ALLPAGES", 0); 
    $.Constant({Static:true , Public:true }, "PD_SELECTION", 1); 
    $.Constant({Static:true , Public:true }, "PD_PAGENUMS", 2); 
    $.Constant({Static:true , Public:true }, "PD_CURRENTPAGE", 4194304); 
    $.Constant({Static:true , Public:true }, "PD_NOSELECTION", 4); 
    $.Constant({Static:true , Public:true }, "PD_NOPAGENUMS", 8); 
    $.Constant({Static:true , Public:true }, "PD_NOCURRENTPAGE", 8388608); 
    $.Constant({Static:true , Public:true }, "PD_COLLATE", 16); 
    $.Constant({Static:true , Public:true }, "PD_PRINTTOFILE", 32); 
    $.Constant({Static:true , Public:true }, "PD_PRINTSETUP", 64); 
    $.Constant({Static:true , Public:true }, "PD_NOWARNING", 128); 
    $.Constant({Static:true , Public:true }, "PD_RETURNDC", 256); 
    $.Constant({Static:true , Public:true }, "PD_RETURNIC", 512); 
    $.Constant({Static:true , Public:true }, "PD_RETURNDEFAULT", 1024); 
    $.Constant({Static:true , Public:true }, "PD_SHOWHELP", 2048); 
    $.Constant({Static:true , Public:true }, "PD_ENABLEPRINTHOOK", 4096); 
    $.Constant({Static:true , Public:true }, "PD_ENABLESETUPHOOK", 8192); 
    $.Constant({Static:true , Public:true }, "PD_ENABLEPRINTTEMPLATE", 16384); 
    $.Constant({Static:true , Public:true }, "PD_ENABLESETUPTEMPLATE", 32768); 
    $.Constant({Static:true , Public:true }, "PD_ENABLEPRINTTEMPLATEHANDLE", 65536); 
    $.Constant({Static:true , Public:true }, "PD_ENABLESETUPTEMPLATEHANDLE", 131072); 
    $.Constant({Static:true , Public:true }, "PD_USEDEVMODECOPIES", 262144); 
    $.Constant({Static:true , Public:true }, "PD_USEDEVMODECOPIESANDCOLLATE", 262144); 
    $.Constant({Static:true , Public:true }, "PD_DISABLEPRINTTOFILE", 524288); 
    $.Constant({Static:true , Public:true }, "PD_HIDEPRINTTOFILE", 1048576); 
    $.Constant({Static:true , Public:true }, "PD_NONETWORKBUTTON", 2097152); 
    $.Constant({Static:true , Public:true }, "DI_MASK", 1); 
    $.Constant({Static:true , Public:true }, "DI_IMAGE", 2); 
    $.Constant({Static:true , Public:true }, "DI_NORMAL", 3); 
    $.Constant({Static:true , Public:true }, "DI_COMPAT", 4); 
    $.Constant({Static:true , Public:true }, "DI_DEFAULTSIZE", 8); 
    $.Constant({Static:true , Public:true }, "IDC_ARROW", 32512); 
    $.Constant({Static:true , Public:true }, "IDC_IBEAM", 32513); 
    $.Constant({Static:true , Public:true }, "IDC_WAIT", 32514); 
    $.Constant({Static:true , Public:true }, "IDC_CROSS", 32515); 
    $.Constant({Static:true , Public:true }, "IDC_UPARROW", 32516); 
    $.Constant({Static:true , Public:true }, "IDC_SIZE", 32640); 
    $.Constant({Static:true , Public:true }, "IDC_ICON", 32641); 
    $.Constant({Static:true , Public:true }, "IDC_SIZENWSE", 32642); 
    $.Constant({Static:true , Public:true }, "IDC_SIZENESW", 32643); 
    $.Constant({Static:true , Public:true }, "IDC_SIZEWE", 32644); 
    $.Constant({Static:true , Public:true }, "IDC_SIZENS", 32645); 
    $.Constant({Static:true , Public:true }, "IDC_SIZEALL", 32646); 
    $.Constant({Static:true , Public:true }, "IDC_NO", 32648); 
    $.Constant({Static:true , Public:true }, "IDC_APPSTARTING", 32650); 
    $.Constant({Static:true , Public:true }, "IDC_HELP", 32651); 
    $.Constant({Static:true , Public:true }, "IMAGE_BITMAP", 0); 
    $.Constant({Static:true , Public:true }, "IMAGE_ICON", 1); 
    $.Constant({Static:true , Public:true }, "IMAGE_CURSOR", 2); 
    $.Constant({Static:true , Public:true }, "IMAGE_ENHMETAFILE", 3); 
    $.Constant({Static:true , Public:true }, "IDI_APPLICATION", 32512); 
    $.Constant({Static:true , Public:true }, "IDI_HAND", 32513); 
    $.Constant({Static:true , Public:true }, "IDI_QUESTION", 32514); 
    $.Constant({Static:true , Public:true }, "IDI_EXCLAMATION", 32515); 
    $.Constant({Static:true , Public:true }, "IDI_ASTERISK", 32516); 
    $.Constant({Static:true , Public:true }, "IDI_WINLOGO", 32517); 
    $.Constant({Static:true , Public:true }, "IDI_WARNING", 32515); 
    $.Constant({Static:true , Public:true }, "IDI_ERROR", 32513); 
    $.Constant({Static:true , Public:true }, "IDI_INFORMATION", 32516); 
    $.Constant({Static:true , Public:true }, "IDI_SHIELD", 32518); 
    $.Constant({Static:true , Public:true }, "SRCCOPY", 13369376); 
    $.Constant({Static:true , Public:true }, "PLANES", 14); 
    $.Constant({Static:true , Public:true }, "PS_SOLID", 0); 
    $.Constant({Static:true , Public:true }, "PS_DASH", 1); 
    $.Constant({Static:true , Public:true }, "PS_DOT", 2); 
    $.Constant({Static:true , Public:true }, "PS_DASHDOT", 3); 
    $.Constant({Static:true , Public:true }, "PS_DASHDOTDOT", 4); 
    $.Constant({Static:true , Public:true }, "PS_NULL", 5); 
    $.Constant({Static:true , Public:true }, "PS_INSIDEFRAME", 6); 
    $.Constant({Static:true , Public:true }, "PS_USERSTYLE", 7); 
    $.Constant({Static:true , Public:true }, "PS_ALTERNATE", 8); 
    $.Constant({Static:true , Public:true }, "PS_STYLE_MASK", 15); 
    $.Constant({Static:true , Public:true }, "PS_ENDCAP_ROUND", 0); 
    $.Constant({Static:true , Public:true }, "PS_ENDCAP_SQUARE", 256); 
    $.Constant({Static:true , Public:true }, "PS_ENDCAP_FLAT", 512); 
    $.Constant({Static:true , Public:true }, "PS_ENDCAP_MASK", 3840); 
    $.Constant({Static:true , Public:true }, "PS_JOIN_ROUND", 0); 
    $.Constant({Static:true , Public:true }, "PS_JOIN_BEVEL", 4096); 
    $.Constant({Static:true , Public:true }, "PS_JOIN_MITER", 8192); 
    $.Constant({Static:true , Public:true }, "PS_JOIN_MASK", 61440); 
    $.Constant({Static:true , Public:true }, "PS_COSMETIC", 0); 
    $.Constant({Static:true , Public:true }, "PS_GEOMETRIC", 65536); 
    $.Constant({Static:true , Public:true }, "PS_TYPE_MASK", 983040); 
    $.Constant({Static:true , Public:true }, "BITSPIXEL", 12); 
    $.Constant({Static:true , Public:true }, "ALTERNATE", 1); 
    $.Constant({Static:true , Public:true }, "LOGPIXELSX", 88); 
    $.Constant({Static:true , Public:true }, "LOGPIXELSY", 90); 
    $.Constant({Static:true , Public:true }, "PHYSICALWIDTH", 110); 
    $.Constant({Static:true , Public:true }, "PHYSICALHEIGHT", 111); 
    $.Constant({Static:true , Public:true }, "PHYSICALOFFSETX", 112); 
    $.Constant({Static:true , Public:true }, "PHYSICALOFFSETY", 113); 
    $.Constant({Static:true , Public:true }, "WINDING", 2); 
    $.Constant({Static:true , Public:true }, "VERTRES", 10); 
    $.Constant({Static:true , Public:true }, "HORZRES", 8); 
    $.Constant({Static:true , Public:true }, "DM_SPECVERSION", 1025); 
    $.Constant({Static:true , Public:true }, "DM_ORIENTATION", 1); 
    $.Constant({Static:true , Public:true }, "DM_PAPERSIZE", 2); 
    $.Constant({Static:true , Public:true }, "DM_PAPERLENGTH", 4); 
    $.Constant({Static:true , Public:true }, "DM_PAPERWIDTH", 8); 
    $.Constant({Static:true , Public:true }, "DM_SCALE", 16); 
    $.Constant({Static:true , Public:true }, "DM_COPIES", 256); 
    $.Constant({Static:true , Public:true }, "DM_DEFAULTSOURCE", 512); 
    $.Constant({Static:true , Public:true }, "DM_PRINTQUALITY", 1024); 
    $.Constant({Static:true , Public:true }, "DM_COLOR", 2048); 
    $.Constant({Static:true , Public:true }, "DM_DUPLEX", 4096); 
    $.Constant({Static:true , Public:true }, "DM_YRESOLUTION", 8192); 
    $.Constant({Static:true , Public:true }, "DM_TTOPTION", 16384); 
    $.Constant({Static:true , Public:true }, "DM_COLLATE", 32768); 
    $.Constant({Static:true , Public:true }, "DM_FORMNAME", 65536); 
    $.Constant({Static:true , Public:true }, "DM_LOGPIXELS", 131072); 
    $.Constant({Static:true , Public:true }, "DM_BITSPERPEL", 262144); 
    $.Constant({Static:true , Public:true }, "DM_PELSWIDTH", 524288); 
    $.Constant({Static:true , Public:true }, "DM_PELSHEIGHT", 1048576); 
    $.Constant({Static:true , Public:true }, "DM_DISPLAYFLAGS", 2097152); 
    $.Constant({Static:true , Public:true }, "DM_DISPLAYFREQUENCY", 4194304); 
    $.Constant({Static:true , Public:true }, "DM_PANNINGWIDTH", 8388608); 
    $.Constant({Static:true , Public:true }, "DM_PANNINGHEIGHT", 16777216); 
    $.Constant({Static:true , Public:true }, "DM_ICMMETHOD", 33554432); 
    $.Constant({Static:true , Public:true }, "DM_ICMINTENT", 67108864); 
    $.Constant({Static:true , Public:true }, "DM_MEDIATYPE", 134217728); 
    $.Constant({Static:true , Public:true }, "DM_DITHERTYPE", 268435456); 
    $.Constant({Static:true , Public:true }, "DM_ICCMANUFACTURER", 536870912); 
    $.Constant({Static:true , Public:true }, "DM_ICCMODEL", 1073741824); 
    $.Constant({Static:true , Public:true }, "DMORIENT_PORTRAIT", 1); 
    $.Constant({Static:true , Public:true }, "DMORIENT_LANDSCAPE", 2); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LETTER", 1); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LETTERSMALL", 2); 
    $.Constant({Static:true , Public:true }, "DMPAPER_TABLOID", 3); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LEDGER", 4); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LEGAL", 5); 
    $.Constant({Static:true , Public:true }, "DMPAPER_STATEMENT", 6); 
    $.Constant({Static:true , Public:true }, "DMPAPER_EXECUTIVE", 7); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A3", 8); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A4", 9); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A4SMALL", 10); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A5", 11); 
    $.Constant({Static:true , Public:true }, "DMPAPER_B4", 12); 
    $.Constant({Static:true , Public:true }, "DMPAPER_B5", 13); 
    $.Constant({Static:true , Public:true }, "DMPAPER_FOLIO", 14); 
    $.Constant({Static:true , Public:true }, "DMPAPER_QUARTO", 15); 
    $.Constant({Static:true , Public:true }, "DMPAPER_10X14", 16); 
    $.Constant({Static:true , Public:true }, "DMPAPER_11X17", 17); 
    $.Constant({Static:true , Public:true }, "DMPAPER_NOTE", 18); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_9", 19); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_10", 20); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_11", 21); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_12", 22); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_14", 23); 
    $.Constant({Static:true , Public:true }, "DMPAPER_CSHEET", 24); 
    $.Constant({Static:true , Public:true }, "DMPAPER_DSHEET", 25); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ESHEET", 26); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_DL", 27); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_C5", 28); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_C3", 29); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_C4", 30); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_C6", 31); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_C65", 32); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_B4", 33); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_B5", 34); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_B6", 35); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_ITALY", 36); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_MONARCH", 37); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_PERSONAL", 38); 
    $.Constant({Static:true , Public:true }, "DMPAPER_FANFOLD_US", 39); 
    $.Constant({Static:true , Public:true }, "DMPAPER_FANFOLD_STD_GERMAN", 40); 
    $.Constant({Static:true , Public:true }, "DMPAPER_FANFOLD_LGL_GERMAN", 41); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ISO_B4", 42); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JAPANESE_POSTCARD", 43); 
    $.Constant({Static:true , Public:true }, "DMPAPER_9X11", 44); 
    $.Constant({Static:true , Public:true }, "DMPAPER_10X11", 45); 
    $.Constant({Static:true , Public:true }, "DMPAPER_15X11", 46); 
    $.Constant({Static:true , Public:true }, "DMPAPER_ENV_INVITE", 47); 
    $.Constant({Static:true , Public:true }, "DMPAPER_RESERVED_48", 48); 
    $.Constant({Static:true , Public:true }, "DMPAPER_RESERVED_49", 49); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LETTER_EXTRA", 50); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LEGAL_EXTRA", 51); 
    $.Constant({Static:true , Public:true }, "DMPAPER_TABLOID_EXTRA", 52); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A4_EXTRA", 53); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LETTER_TRANSVERSE", 54); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A4_TRANSVERSE", 55); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LETTER_EXTRA_TRANSVERSE", 56); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A_PLUS", 57); 
    $.Constant({Static:true , Public:true }, "DMPAPER_B_PLUS", 58); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LETTER_PLUS", 59); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A4_PLUS", 60); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A5_TRANSVERSE", 61); 
    $.Constant({Static:true , Public:true }, "DMPAPER_B5_TRANSVERSE", 62); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A3_EXTRA", 63); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A5_EXTRA", 64); 
    $.Constant({Static:true , Public:true }, "DMPAPER_B5_EXTRA", 65); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A2", 66); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A3_TRANSVERSE", 67); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A3_EXTRA_TRANSVERSE", 68); 
    $.Constant({Static:true , Public:true }, "DMPAPER_DBL_JAPANESE_POSTCARD", 69); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A6", 70); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JENV_KAKU2", 71); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JENV_KAKU3", 72); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JENV_CHOU3", 73); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JENV_CHOU4", 74); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LETTER_ROTATED", 75); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A3_ROTATED", 76); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A4_ROTATED", 77); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A5_ROTATED", 78); 
    $.Constant({Static:true , Public:true }, "DMPAPER_B4_JIS_ROTATED", 79); 
    $.Constant({Static:true , Public:true }, "DMPAPER_B5_JIS_ROTATED", 80); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JAPANESE_POSTCARD_ROTATED", 81); 
    $.Constant({Static:true , Public:true }, "DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED", 82); 
    $.Constant({Static:true , Public:true }, "DMPAPER_A6_ROTATED", 83); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JENV_KAKU2_ROTATED", 84); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JENV_KAKU3_ROTATED", 85); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JENV_CHOU3_ROTATED", 86); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JENV_CHOU4_ROTATED", 87); 
    $.Constant({Static:true , Public:true }, "DMPAPER_B6_JIS", 88); 
    $.Constant({Static:true , Public:true }, "DMPAPER_B6_JIS_ROTATED", 89); 
    $.Constant({Static:true , Public:true }, "DMPAPER_12X11", 90); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JENV_YOU4", 91); 
    $.Constant({Static:true , Public:true }, "DMPAPER_JENV_YOU4_ROTATED", 92); 
    $.Constant({Static:true , Public:true }, "DMPAPER_P16K", 93); 
    $.Constant({Static:true , Public:true }, "DMPAPER_P32K", 94); 
    $.Constant({Static:true , Public:true }, "DMPAPER_P32KBIG", 95); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_1", 96); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_2", 97); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_3", 98); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_4", 99); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_5", 100); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_6", 101); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_7", 102); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_8", 103); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_9", 104); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_10", 105); 
    $.Constant({Static:true , Public:true }, "DMPAPER_P16K_ROTATED", 106); 
    $.Constant({Static:true , Public:true }, "DMPAPER_P32K_ROTATED", 107); 
    $.Constant({Static:true , Public:true }, "DMPAPER_P32KBIG_ROTATED", 108); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_1_ROTATED", 109); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_2_ROTATED", 110); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_3_ROTATED", 111); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_4_ROTATED", 112); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_5_ROTATED", 113); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_6_ROTATED", 114); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_7_ROTATED", 115); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_8_ROTATED", 116); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_9_ROTATED", 117); 
    $.Constant({Static:true , Public:true }, "DMPAPER_PENV_10_ROTATED", 118); 
    $.Constant({Static:true , Public:true }, "DMPAPER_LAST", 118); 
    $.Constant({Static:true , Public:true }, "DMPAPER_USER", 256); 
    $.Constant({Static:true , Public:true }, "DMBIN_UPPER", 1); 
    $.Constant({Static:true , Public:true }, "DMBIN_ONLYONE", 1); 
    $.Constant({Static:true , Public:true }, "DMBIN_LOWER", 2); 
    $.Constant({Static:true , Public:true }, "DMBIN_MIDDLE", 3); 
    $.Constant({Static:true , Public:true }, "DMBIN_MANUAL", 4); 
    $.Constant({Static:true , Public:true }, "DMBIN_ENVELOPE", 5); 
    $.Constant({Static:true , Public:true }, "DMBIN_ENVMANUAL", 6); 
    $.Constant({Static:true , Public:true }, "DMBIN_AUTO", 7); 
    $.Constant({Static:true , Public:true }, "DMBIN_TRACTOR", 8); 
    $.Constant({Static:true , Public:true }, "DMBIN_SMALLFMT", 9); 
    $.Constant({Static:true , Public:true }, "DMBIN_LARGEFMT", 10); 
    $.Constant({Static:true , Public:true }, "DMBIN_LARGECAPACITY", 11); 
    $.Constant({Static:true , Public:true }, "DMBIN_CASSETTE", 14); 
    $.Constant({Static:true , Public:true }, "DMBIN_FORMSOURCE", 15); 
    $.Constant({Static:true , Public:true }, "DMBIN_LAST", 15); 
    $.Constant({Static:true , Public:true }, "DMBIN_USER", 256); 
    $.Constant({Static:true , Public:true }, "DMRES_DRAFT", -1); 
    $.Constant({Static:true , Public:true }, "DMRES_LOW", -2); 
    $.Constant({Static:true , Public:true }, "DMRES_MEDIUM", -3); 
    $.Constant({Static:true , Public:true }, "DMRES_HIGH", -4); 
    $.Constant({Static:true , Public:true }, "DMCOLOR_MONOCHROME", 1); 
    $.Constant({Static:true , Public:true }, "DMCOLOR_COLOR", 2); 
    $.Constant({Static:true , Public:true }, "DMDUP_SIMPLEX", 1); 
    $.Constant({Static:true , Public:true }, "DMDUP_VERTICAL", 2); 
    $.Constant({Static:true , Public:true }, "DMDUP_HORIZONTAL", 3); 
    $.Constant({Static:true , Public:true }, "DMTT_BITMAP", 1); 
    $.Constant({Static:true , Public:true }, "DMTT_DOWNLOAD", 2); 
    $.Constant({Static:true , Public:true }, "DMTT_SUBDEV", 3); 
    $.Constant({Static:true , Public:true }, "DMTT_DOWNLOAD_OUTLINE", 4); 
    $.Constant({Static:true , Public:true }, "DMCOLLATE_FALSE", 0); 
    $.Constant({Static:true , Public:true }, "DMCOLLATE_TRUE", 1); 
    $.Constant({Static:true , Public:true }, "DMDISPLAYFLAGS_TEXTMODE", 4); 
    $.Constant({Static:true , Public:true }, "DMICMMETHOD_NONE", 1); 
    $.Constant({Static:true , Public:true }, "DMICMMETHOD_SYSTEM", 2); 
    $.Constant({Static:true , Public:true }, "DMICMMETHOD_DRIVER", 3); 
    $.Constant({Static:true , Public:true }, "DMICMMETHOD_DEVICE", 4); 
    $.Constant({Static:true , Public:true }, "DMICMMETHOD_USER", 256); 
    $.Constant({Static:true , Public:true }, "DMICM_SATURATE", 1); 
    $.Constant({Static:true , Public:true }, "DMICM_CONTRAST", 2); 
    $.Constant({Static:true , Public:true }, "DMICM_COLORMETRIC", 3); 
    $.Constant({Static:true , Public:true }, "DMICM_USER", 256); 
    $.Constant({Static:true , Public:true }, "DMMEDIA_STANDARD", 1); 
    $.Constant({Static:true , Public:true }, "DMMEDIA_TRANSPARENCY", 2); 
    $.Constant({Static:true , Public:true }, "DMMEDIA_GLOSSY", 3); 
    $.Constant({Static:true , Public:true }, "DMMEDIA_USER", 256); 
    $.Constant({Static:true , Public:true }, "DMDITHER_NONE", 1); 
    $.Constant({Static:true , Public:true }, "DMDITHER_COARSE", 2); 
    $.Constant({Static:true , Public:true }, "DMDITHER_FINE", 3); 
    $.Constant({Static:true , Public:true }, "DMDITHER_LINEART", 4); 
    $.Constant({Static:true , Public:true }, "DMDITHER_GRAYSCALE", 5); 
    $.Constant({Static:true , Public:true }, "DMDITHER_USER", 256); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_DEFAULT", 1); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_LOCAL", 2); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_CONNECTIONS", 4); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_FAVORITE", 4); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_NAME", 8); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_REMOTE", 16); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_SHARED", 32); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_NETWORK", 64); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_EXPAND", 16384); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_CONTAINER", 32768); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICONMASK", 16711680); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON1", 65536); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON2", 131072); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON3", 262144); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON4", 524288); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON5", 1048576); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON6", 2097152); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON7", 4194304); 
    $.Constant({Static:true , Public:true }, "PRINTER_ENUM_ICON8", 8388608); 
    $.Constant({Static:true , Public:true }, "DC_BINADJUST", 19); 
    $.Constant({Static:true , Public:true }, "DC_EMF_COMPLIANT", 20); 
    $.Constant({Static:true , Public:true }, "DC_DATATYPE_PRODUCED", 21); 
    $.Constant({Static:true , Public:true }, "DC_COLLATE", 22); 
    $.Constant({Static:true , Public:true }, "DCTT_BITMAP", 1); 
    $.Constant({Static:true , Public:true }, "DCTT_DOWNLOAD", 2); 
    $.Constant({Static:true , Public:true }, "DCTT_SUBDEV", 4); 
    $.Constant({Static:true , Public:true }, "DCTT_DOWNLOAD_OUTLINE", 8); 
    $.Constant({Static:true , Public:true }, "DCBA_FACEUPNONE", 0); 
    $.Constant({Static:true , Public:true }, "DCBA_FACEUPCENTER", 1); 
    $.Constant({Static:true , Public:true }, "DCBA_FACEUPLEFT", 2); 
    $.Constant({Static:true , Public:true }, "DCBA_FACEUPRIGHT", 3); 
    $.Constant({Static:true , Public:true }, "DCBA_FACEDOWNNONE", 256); 
    $.Constant({Static:true , Public:true }, "DCBA_FACEDOWNCENTER", 257); 
    $.Constant({Static:true , Public:true }, "DCBA_FACEDOWNLEFT", 258); 
    $.Constant({Static:true , Public:true }, "DCBA_FACEDOWNRIGHT", 259); 
    $.Constant({Static:true , Public:true }, "SRCPAINT", 15597702); 
    $.Constant({Static:true , Public:true }, "SRCAND", 8913094); 
    $.Constant({Static:true , Public:true }, "SRCINVERT", 6684742); 
    $.Constant({Static:true , Public:true }, "SRCERASE", 4457256); 
    $.Constant({Static:true , Public:true }, "NOTSRCCOPY", 3342344); 
    $.Constant({Static:true , Public:true }, "NOTSRCERASE", 1114278); 
    $.Constant({Static:true , Public:true }, "MERGECOPY", 12583114); 
    $.Constant({Static:true , Public:true }, "MERGEPAINT", 12255782); 
    $.Constant({Static:true , Public:true }, "PATCOPY", 15728673); 
    $.Constant({Static:true , Public:true }, "PATPAINT", 16452105); 
    $.Constant({Static:true , Public:true }, "PATINVERT", 5898313); 
    $.Constant({Static:true , Public:true }, "DSTINVERT", 5570569); 
    $.Constant({Static:true , Public:true }, "BLACKNESS", 66); 
    $.Constant({Static:true , Public:true }, "WHITENESS", 16711778); 
    $.Constant({Static:true , Public:true }, "CAPTUREBLT", 1073741824); 
    $.Constant({Static:true , Public:true }, "SM_CXSCREEN", 0); 
    $.Constant({Static:true , Public:true }, "SM_CYSCREEN", 1); 
    $.Constant({Static:true , Public:true }, "SM_CXVSCROLL", 2); 
    $.Constant({Static:true , Public:true }, "SM_CYHSCROLL", 3); 
    $.Constant({Static:true , Public:true }, "SM_CYCAPTION", 4); 
    $.Constant({Static:true , Public:true }, "SM_CXBORDER", 5); 
    $.Constant({Static:true , Public:true }, "SM_CYBORDER", 6); 
    $.Constant({Static:true , Public:true }, "SM_CXDLGFRAME", 7); 
    $.Constant({Static:true , Public:true }, "SM_CYDLGFRAME", 8); 
    $.Constant({Static:true , Public:true }, "SM_CYVTHUMB", 9); 
    $.Constant({Static:true , Public:true }, "SM_CXHTHUMB", 10); 
    $.Constant({Static:true , Public:true }, "SM_CXICON", 11); 
    $.Constant({Static:true , Public:true }, "SM_CYICON", 12); 
    $.Constant({Static:true , Public:true }, "SM_CXCURSOR", 13); 
    $.Constant({Static:true , Public:true }, "SM_CYCURSOR", 14); 
    $.Constant({Static:true , Public:true }, "SM_CYMENU", 15); 
    $.Constant({Static:true , Public:true }, "SM_CXFULLSCREEN", 16); 
    $.Constant({Static:true , Public:true }, "SM_CYFULLSCREEN", 17); 
    $.Constant({Static:true , Public:true }, "SM_CYKANJIWINDOW", 18); 
    $.Constant({Static:true , Public:true }, "SM_MOUSEPRESENT", 19); 
    $.Constant({Static:true , Public:true }, "SM_CYVSCROLL", 20); 
    $.Constant({Static:true , Public:true }, "SM_CXHSCROLL", 21); 
    $.Constant({Static:true , Public:true }, "SM_DEBUG", 22); 
    $.Constant({Static:true , Public:true }, "SM_SWAPBUTTON", 23); 
    $.Constant({Static:true , Public:true }, "SM_RESERVED1", 24); 
    $.Constant({Static:true , Public:true }, "SM_RESERVED2", 25); 
    $.Constant({Static:true , Public:true }, "SM_RESERVED3", 26); 
    $.Constant({Static:true , Public:true }, "SM_RESERVED4", 27); 
    $.Constant({Static:true , Public:true }, "SM_CXMIN", 28); 
    $.Constant({Static:true , Public:true }, "SM_CYMIN", 29); 
    $.Constant({Static:true , Public:true }, "SM_CXSIZE", 30); 
    $.Constant({Static:true , Public:true }, "SM_CYSIZE", 31); 
    $.Constant({Static:true , Public:true }, "SM_CXFRAME", 32); 
    $.Constant({Static:true , Public:true }, "SM_CYFRAME", 33); 
    $.Constant({Static:true , Public:true }, "SM_CXMINTRACK", 34); 
    $.Constant({Static:true , Public:true }, "SM_CYMINTRACK", 35); 
    $.Constant({Static:true , Public:true }, "SM_CXDOUBLECLK", 36); 
    $.Constant({Static:true , Public:true }, "SM_CYDOUBLECLK", 37); 
    $.Constant({Static:true , Public:true }, "SM_CXICONSPACING", 38); 
    $.Constant({Static:true , Public:true }, "SM_CYICONSPACING", 39); 
    $.Constant({Static:true , Public:true }, "SM_MENUDROPALIGNMENT", 40); 
    $.Constant({Static:true , Public:true }, "SM_PENWINDOWS", 41); 
    $.Constant({Static:true , Public:true }, "SM_DBCSENABLED", 42); 
    $.Constant({Static:true , Public:true }, "SM_CMOUSEBUTTONS", 43); 
    $.Constant({Static:true , Public:true }, "SM_CXFIXEDFRAME", 7); 
    $.Constant({Static:true , Public:true }, "SM_CYFIXEDFRAME", 8); 
    $.Constant({Static:true , Public:true }, "SM_CXSIZEFRAME", 32); 
    $.Constant({Static:true , Public:true }, "SM_CYSIZEFRAME", 33); 
    $.Constant({Static:true , Public:true }, "SM_SECURE", 44); 
    $.Constant({Static:true , Public:true }, "SM_CXEDGE", 45); 
    $.Constant({Static:true , Public:true }, "SM_CYEDGE", 46); 
    $.Constant({Static:true , Public:true }, "SM_CXMINSPACING", 47); 
    $.Constant({Static:true , Public:true }, "SM_CYMINSPACING", 48); 
    $.Constant({Static:true , Public:true }, "SM_CXSMICON", 49); 
    $.Constant({Static:true , Public:true }, "SM_CYSMICON", 50); 
    $.Constant({Static:true , Public:true }, "SM_CYSMCAPTION", 51); 
    $.Constant({Static:true , Public:true }, "SM_CXSMSIZE", 52); 
    $.Constant({Static:true , Public:true }, "SM_CYSMSIZE", 53); 
    $.Constant({Static:true , Public:true }, "SM_CXMENUSIZE", 54); 
    $.Constant({Static:true , Public:true }, "SM_CYMENUSIZE", 55); 
    $.Constant({Static:true , Public:true }, "SM_ARRANGE", 56); 
    $.Constant({Static:true , Public:true }, "SM_CXMINIMIZED", 57); 
    $.Constant({Static:true , Public:true }, "SM_CYMINIMIZED", 58); 
    $.Constant({Static:true , Public:true }, "SM_CXMAXTRACK", 59); 
    $.Constant({Static:true , Public:true }, "SM_CYMAXTRACK", 60); 
    $.Constant({Static:true , Public:true }, "SM_CXMAXIMIZED", 61); 
    $.Constant({Static:true , Public:true }, "SM_CYMAXIMIZED", 62); 
    $.Constant({Static:true , Public:true }, "SM_NETWORK", 63); 
    $.Constant({Static:true , Public:true }, "SM_CLEANBOOT", 67); 
    $.Constant({Static:true , Public:true }, "SM_CXDRAG", 68); 
    $.Constant({Static:true , Public:true }, "SM_CYDRAG", 69); 
    $.Constant({Static:true , Public:true }, "SM_SHOWSOUNDS", 70); 
    $.Constant({Static:true , Public:true }, "SM_CXMENUCHECK", 71); 
    $.Constant({Static:true , Public:true }, "SM_CYMENUCHECK", 72); 
    $.Constant({Static:true , Public:true }, "SM_SLOWMACHINE", 73); 
    $.Constant({Static:true , Public:true }, "SM_MIDEASTENABLED", 74); 
    $.Constant({Static:true , Public:true }, "SM_MOUSEWHEELPRESENT", 75); 
    $.Constant({Static:true , Public:true }, "SM_XVIRTUALSCREEN", 76); 
    $.Constant({Static:true , Public:true }, "SM_YVIRTUALSCREEN", 77); 
    $.Constant({Static:true , Public:true }, "SM_CXVIRTUALSCREEN", 78); 
    $.Constant({Static:true , Public:true }, "SM_CYVIRTUALSCREEN", 79); 
    $.Constant({Static:true , Public:true }, "SM_CMONITORS", 80); 
    $.Constant({Static:true , Public:true }, "SM_SAMEDISPLAYFORMAT", 81); 
    $.Constant({Static:true , Public:true }, "SM_CMETRICS", 83); 
    $.Constant({Static:true , Public:true }, "GM_COMPATIBLE", 1); 
    $.Constant({Static:true , Public:true }, "GM_ADVANCED", 2); 
    $.Constant({Static:true , Public:true }, "MWT_IDENTITY", 1); 
    $.Constant({Static:true , Public:true }, "FW_DONTCARE", 0); 
    $.Constant({Static:true , Public:true }, "FW_NORMAL", 400); 
    $.Constant({Static:true , Public:true }, "FW_BOLD", 700); 
    $.Constant({Static:true , Public:true }, "ANSI_CHARSET", 0); 
    $.Constant({Static:true , Public:true }, "DEFAULT_CHARSET", 1); 
    $.Constant({Static:true , Public:true }, "OUT_DEFAULT_PRECIS", 0); 
    $.Constant({Static:true , Public:true }, "OUT_TT_PRECIS", 4); 
    $.Constant({Static:true , Public:true }, "OUT_TT_ONLY_PRECIS", 7); 
    $.Constant({Static:true , Public:true }, "CLIP_DEFAULT_PRECIS", 0); 
    $.Constant({Static:true , Public:true }, "DEFAULT_QUALITY", 0); 
    $.Constant({Static:true , Public:true }, "MM_TEXT", 1); 
    $.Constant({Static:true , Public:true }, "OBJ_FONT", 6); 
    $.Constant({Static:true , Public:true }, "TA_DEFAULT", 0); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_ALLOCATE_BUFFER", 256); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_IGNORE_INSERTS", 512); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_SYSTEM", 4096); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_DEFAULT", 4608); 
    $.Constant({Static:true , Public:true }, "NOMIRRORBITMAP", -2147483648); 
    $.Constant({Static:true , Public:true }, "QUERYESCSUPPORT", 8); 
    $.Constant({Static:true , Public:true }, "CHECKJPEGFORMAT", 4119); 
    $.Constant({Static:true , Public:true }, "CHECKPNGFORMAT", 4120); 
    $.Constant({Static:true , Public:true }, "ERROR_ACCESS_DENIED", 5); 
    $.Constant({Static:true , Public:true }, "ERROR_PROC_NOT_FOUND", 127); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.Drawing.SafeNativeMethods+Gdip */ 

(function Gdip$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+Gdip", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ClearThreadData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertGPPOINTArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertGPPOINTFArrayF", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertPointToMemory", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertPointToMemory", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertRectangleToMemory", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.RectangleF")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertRectangleToMemory", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Rectangle")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "DummyFunction", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathArc", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathArcI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathBezier", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathBezierI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathBeziers", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathBeziersI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathClosedCurve", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathClosedCurve2", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathClosedCurve2I", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathClosedCurveI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurve", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurve2", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurve2I", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurve3", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurve3I", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathCurveI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathEllipse", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathEllipseI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathLine", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathLine2", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathLine2I", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathLineI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathPath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathPie", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathPieI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathPolygon", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathPolygonI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathRectangle", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathRectangleI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathRectangles", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathRectanglesI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathString", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipAddPathStringI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipBeginContainer", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipBeginContainer2", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipBeginContainerI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipBitmapGetPixel", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipBitmapLockBits", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageLockMode"), $asm0B.TypeRef("System.Drawing.Imaging.PixelFormat"), 
          $asm0B.TypeRef("System.Drawing.Imaging.BitmapData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipBitmapSetPixel", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipBitmapSetResolution", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipBitmapUnlockBits", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.BitmapData")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipClearPathMarkers", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneBitmapArea", 
      new JSIL.MethodSignature($.Int32, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneBitmapAreaI", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneBrush", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneCustomLineCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneFont", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneFontFamily", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneImage", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneImageAttributes", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneMatrix", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipClonePath", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipClonePen", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneRegion", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCloneStringFormat", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipClosePathFigure", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipClosePathFigures", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCombineRegionPath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCombineRegionRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCombineRegionRectI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCombineRegionRegion", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipComment", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateAdjustableArrowCap", 
      new JSIL.MethodSignature($.Int32, [
          $.Single, $.Single, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromFile", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromFileICM", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromGraphics", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromHBITMAP", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromHICON", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromResource", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromScan0", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromStream", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateBitmapFromStreamICM", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateCustomLineCap", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateFont", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $asm0B.TypeRef("System.Drawing.FontStyle"), $asm0B.TypeRef("System.Drawing.GraphicsUnit"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateFontFamilyFromName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateFontFromDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateFontFromLogfontA", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateFontFromLogfontW", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateFromHDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateFromHDC2", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateFromHWND", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateHalftonePalette", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateHatchBrush", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateHBITMAPFromBitmap", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateHICONFromBitmap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateImageAttributes", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrush", 
      new JSIL.MethodSignature($.Int32, [
          $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF"), $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF"), 
          $.Int32, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrushFromRect", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrushFromRectI", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrushFromRectWithAngle", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $.Int32, 
          $.Int32, $.Single, 
          $.Boolean, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrushFromRectWithAngleI", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $.Int32, 
          $.Int32, $.Single, 
          $.Boolean, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateLineBrushI", 
      new JSIL.MethodSignature($.Int32, [
          $asm0B.TypeRef("System.Drawing.Internal.GPPOINT"), $asm0B.TypeRef("System.Drawing.Internal.GPPOINT"), 
          $.Int32, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateMatrix", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateMatrix2", 
      new JSIL.MethodSignature($.Int32, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateMatrix3", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateMatrix3I", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateMetafileFromEmf", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateMetafileFromFile", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateMetafileFromStream", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateMetafileFromWmf", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Boolean, 
          $asm0B.TypeRef("System.Drawing.Imaging.WmfPlaceableFileHeader"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreatePath", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreatePath2", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreatePath2I", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreatePathGradient", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreatePathGradientFromPath", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreatePathGradientI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreatePathIter", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreatePen1", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Single, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreatePen2", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegion", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegionHrgn", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegionPath", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegionRect", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegionRectI", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateRegionRgnData", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateSolidFill", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateStringFormat", 
      new JSIL.MethodSignature($.Int32, [
          $asm0B.TypeRef("System.Drawing.StringFormatFlags"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateTexture", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateTexture2", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateTexture2I", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateTextureIA", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipCreateTextureIAI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeleteBrush", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeleteCustomLineCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeleteFont", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeleteFontFamily", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeleteGraphics", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeleteMatrix", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeletePath", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeletePathIter", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeletePen", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeletePrivateFontCollection", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeleteRegion", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDeleteStringFormat", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDisposeImage", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDisposeImageAttributes", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawArc", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawArcI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawBezier", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawBeziers", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawBeziersI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawClosedCurve", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawClosedCurve2", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawClosedCurve2I", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawClosedCurveI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurve", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurve2", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurve2I", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurve3", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurve3I", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawCurveI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawEllipse", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawEllipseI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImage", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImageI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePointRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePointRectI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePoints", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePointsI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePointsRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImagePointsRectI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImageRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImageRectI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImageRectRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawImageRectRectI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Graphics+DrawImageAbort"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawLine", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawLineI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawLines", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawLinesI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawPath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawPie", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawPieI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawPolygon", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawPolygonI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawRectangle", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawRectangleI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawRectangles", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawRectanglesI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipDrawString", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEndContainer", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestPoint", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF"), $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestPointI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Internal.GPPOINT"), $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestPoints", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.IntPtr"), $.Int32, 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestPointsI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.IntPtr"), $.Int32, 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileDestRectI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestPoint", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
          $.Int32, $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestPointI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Internal.GPPOINT"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
          $.Int32, $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestPoints", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.IntPtr"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $.Int32, 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestPointsI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.IntPtr"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $.Int32, 
          $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
          $.Int32, $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipEnumerateMetafileSrcRectDestRectI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
          $.Int32, $asm0B.TypeRef("System.Drawing.Graphics+EnumerateMetafileProc"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillClosedCurve", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillClosedCurve2", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Single, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillClosedCurve2I", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Single, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillClosedCurveI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillEllipse", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillEllipseI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillPath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillPie", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillPieI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillPolygon", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillPolygonI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillRectangle", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillRectangleI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillRectangles", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillRectanglesI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFillRegion", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFlattenPath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipFlush", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.FlushIntention")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetAdjustableArrowCapFillState", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetAdjustableArrowCapHeight", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetAdjustableArrowCapMiddleInset", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetAdjustableArrowCapWidth", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetAllPropertyItems", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetCellAscent", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.FontStyle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetCellDescent", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.FontStyle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetClip", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetClipBounds", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetCompositingMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetCompositingQuality", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.CompositingQuality")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapBaseCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapBaseInset", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapStrokeCaps", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapStrokeJoin", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapType", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.CustomLineCapType")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetCustomLineCapWidthScale", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetDpiX", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetDpiY", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetEmHeight", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.FontStyle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetEncoderParameterList", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
          $.Int32, $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetEncoderParameterListSize", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetFamily", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetFamilyName", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetFontCollectionFamilyCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetFontCollectionFamilyList", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.IntPtr")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetFontHeight", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetFontHeightGivenDPI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetFontSize", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetFontStyle", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.FontStyle")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetFontUnit", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.GraphicsUnit")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetGenericFontFamilyMonospace", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetGenericFontFamilySansSerif", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetGenericFontFamilySerif", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetHatchBackgroundColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetHatchForegroundColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetHatchStyle", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetHemfFromMetafile", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageAttributesAdjustedPalette", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageBounds", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.GraphicsUnit")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageDecoders", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageDecodersSize", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageDimension", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageEncoders", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageEncodersSize", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageFlags", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageGraphicsContext", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageHeight", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageHorizontalResolution", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImagePalette", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImagePaletteSize", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImagePixelFormat", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageRawFormat", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageThumbnail", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), 
          $asm0B.TypeRef("System.Drawing.Image+GetThumbnailImageAbort"), $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageType", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageVerticalResolution", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetImageWidth", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetInterpolationMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLineBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
          $asm06.TypeRef("System.IntPtr"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLineBlendCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLineColors", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLineGammaCorrection", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLinePresetBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
          $asm06.TypeRef("System.IntPtr"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLinePresetBlendCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLineRect", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLineSpacing", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.FontStyle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLineTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLineWrapMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLogFontA", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetLogFontW", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetMatrixElements", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetMetafileHeaderFromEmf", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeaderEmf")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetMetafileHeaderFromFile", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetMetafileHeaderFromMetafile", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetMetafileHeaderFromStream", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetMetafileHeaderFromWmf", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.WmfPlaceableFileHeader"), 
          $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeaderWmf")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetNearestColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPageScale", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPageUnit", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathData", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathFillMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
          $asm06.TypeRef("System.IntPtr"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientBlendCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientCenterColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientCenterPoint", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientFocusScales", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientPointCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientPresetBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
          $asm06.TypeRef("System.IntPtr"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientPresetBlendCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientRect", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientSurroundColorCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientSurroundColorsWithCount", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathGradientWrapMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathLastPoint", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathPoints", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathTypes", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPathWorldBounds", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenBrushFill", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenCompoundArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenCompoundCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenCustomEndCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenCustomStartCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenDashArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenDashCap197819", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenDashCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenDashOffset", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenDashStyle", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenEndCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenFillType", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenLineJoin", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenMiterLimit", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.PenAlignment")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenStartCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPenWidth", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPixelOffsetMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.PixelOffsetMode")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPointCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPropertyCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPropertyIdList", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPropertyItem", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPropertyItemSize", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetPropertySize", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionBounds", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionData", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionDataSize", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionHRgn", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionScans", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetRegionScansCount", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetRenderingOrigin", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetSmoothingMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Drawing2D.SmoothingMode")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetSolidFillColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatAlign", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.StringAlignment")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatDigitSubstitution", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.StringDigitSubstitute")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatFlags", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.StringFormatFlags")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatHotkeyPrefix", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Text.HotkeyPrefix")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatLineAlign", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.StringAlignment")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatMeasurableCharacterRangeCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatTabStopCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatTabStops", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single]), $jsilcore.TypeRef("System.Array", [$.Single])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetStringFormatTrimming", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.StringTrimming")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetTextContrast", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetTextRenderingHint", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Text.TextRenderingHint")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetTextureImage", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetTextureTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetTextureWrapMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetVisibleClipBounds", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGetWorldTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipGraphicsClear", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipImageForceValidation", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipImageGetFrameCount", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipImageGetFrameDimensionsCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipImageGetFrameDimensionsList", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipImageRotateFlip", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipImageSelectActiveFrame", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipInvertMatrix", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsClipEmpty", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsEmptyRegion", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsEqualRegion", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsInfiniteRegion", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsMatrixEqual", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsMatrixIdentity", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsMatrixInvertible", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsOutlineVisiblePathPoint", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsOutlineVisiblePathPointI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsStyleAvailable", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.FontStyle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleClipEmpty", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisiblePathPoint", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisiblePathPointI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisiblePoint", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisiblePointI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRectI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRegionPoint", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRegionPointI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRegionRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $.Single, 
          $.Single, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipIsVisibleRegionRectI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipLoadImageFromFile", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipLoadImageFromFileICM", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipLoadImageFromStream", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipLoadImageFromStreamICM", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdiplusShutdown", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Runtime.InteropServices.HandleRef"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GdiplusStartup", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.SafeNativeMethods+Gdip+StartupInput")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.SafeNativeMethods+Gdip+StartupOutput")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipMeasureCharacterRanges", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipMeasureString", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyLineTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyMatrix", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyPathGradientTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyPenTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyTextureTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipMultiplyWorldTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipNewInstalledFontCollection", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipNewPrivateFontCollection", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterCopyData", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterEnumerate", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterGetCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterGetSubpathCount", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterHasCurve", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterNextMarker", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterNextMarkerPath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterNextPathType", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterNextSubpath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterNextSubpathPath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPathIterRewind", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPlayMetafileRecord", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.EmfPlusRecordType"), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPrivateAddFontFile", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipPrivateAddMemoryFont", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafile", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), $.Int32, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafile", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileFileName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileFileName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileFileNameI", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), $.Int32, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileStream", 
      new JSIL.MethodSignature($.Int32, [
          $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECTF")]), 
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileStream", 
      new JSIL.MethodSignature($.Int32, [
          $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRecordMetafileStreamI", 
      new JSIL.MethodSignature($.Int32, [
          $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.GPRECT")]), 
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipReleaseDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRemovePropertyItem", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipResetClip", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipResetLineTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipResetPath", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipResetPathGradientTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipResetPenTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipResetTextureTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipResetWorldTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRestoreGraphics", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipReversePath", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRotateLineTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRotateMatrix", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRotatePathGradientTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRotatePenTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRotateTextureTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipRotateWorldTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSaveAdd", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSaveAddImage", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSaveGraphics", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSaveImageToFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSaveImageToStream", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.Guid")]), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipScaleLineTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipScaleMatrix", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipScalePathGradientTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipScalePenTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipScaleTextureTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipScaleWorldTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetAdjustableArrowCapFillState", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetAdjustableArrowCapHeight", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetAdjustableArrowCapMiddleInset", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetAdjustableArrowCapWidth", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetClipGraphics", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetClipPath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetClipRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetClipRectI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetClipRegion", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.CombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetCompositingMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetCompositingQuality", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.CompositingQuality")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetCustomLineCapBaseCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetCustomLineCapBaseInset", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetCustomLineCapStrokeCaps", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.LineCap")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetCustomLineCapStrokeJoin", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.LineJoin")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetCustomLineCapWidthScale", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetEmpty", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesColorKeys", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
          $.Boolean, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesColorMatrix", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
          $.Boolean, $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrixFlag")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesGamma", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
          $.Boolean, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesNoOp", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesOutputChannel", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
          $.Boolean, $asm0B.TypeRef("System.Drawing.Imaging.ColorChannelFlag")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesOutputChannelColorProfile", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesRemapTable", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
          $.Boolean, $.Int32, 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesThreshold", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"), 
          $.Boolean, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetImageAttributesWrapMode", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetImagePalette", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetInfinite", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetInterpolationMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetLineBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetLineColors", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetLineGammaCorrection", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetLineLinearBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetLinePresetBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetLineSigmaBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetLineTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetLineWrapMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetMatrixElements", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPageScale", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPageUnit", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathFillMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientCenterColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientCenterPoint", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.GPPOINTF")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientFocusScales", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientLinearBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientPresetBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientSigmaBlend", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientSurroundColorsWithCount", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathGradientWrapMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPathMarker", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenBrushFill", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenCompoundArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenCustomEndCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenCustomStartCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenDashArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenDashCap197819", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenDashOffset", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenDashStyle", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenEndCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenLineCap197819", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenLineJoin", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenMiterLimit", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.PenAlignment")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenStartCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPenWidth", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPixelOffsetMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.PixelOffsetMode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetPropertyItem", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Imaging.PropertyItemInternal")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetRenderingOrigin", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetSmoothingMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Drawing2D.SmoothingMode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetSolidFillColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatAlign", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.StringAlignment")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatDigitSubstitution", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $asm0B.TypeRef("System.Drawing.StringDigitSubstitute")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatFlags", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.StringFormatFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatHotkeyPrefix", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Text.HotkeyPrefix")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatLineAlign", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.StringAlignment")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatMeasurableCharacterRanges", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.CharacterRange")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatTabStops", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Single])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetStringFormatTrimming", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.StringTrimming")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetTextContrast", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetTextRenderingHint", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Text.TextRenderingHint")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetTextureTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetTextureWrapMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipSetWorldTransform", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipShearMatrix", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipStartPathFigure", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipStringFormatGetGenericDefault", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipStringFormatGetGenericTypographic", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTransformMatrixPoints", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTransformMatrixPointsI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTransformPath", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTransformPoints", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm06.TypeRef("System.IntPtr"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTransformPointsI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm06.TypeRef("System.IntPtr"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTransformRegion", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTranslateClip", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTranslateLineTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTranslateMatrix", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTranslatePathGradientTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTranslatePenTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTranslateRegion", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTranslateRegionI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTranslateTextureTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipTranslateWorldTransform", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single, 
          $.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipVectorTransformMatrixPoints", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipVectorTransformMatrixPointsI", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipWarpPath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.WarpMode"), $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GdipWidenPath", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Initialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ThreadData", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteBrush", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteCustomLineCap", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteFont", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteFontFamily", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteGraphics", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteMatrix", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeletePath", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeletePathIter", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeletePen", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeletePrivateFontCollection", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("System.IntPtr")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteRegion", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDeleteStringFormat", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDisposeImage", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipDisposeImageAttributes", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGdipReleaseDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnProcessExit", 
      new JSIL.MethodSignature(null, [$.Object, $asm06.TypeRef("System.EventArgs")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Shutdown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "StatusException", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Exception"), [$.Int32])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "GdiPlusInitialization", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
    $.Field({Static:true , Public:false}, "initToken", $asm06.TypeRef("System.IntPtr")); 
    $.Constant({Static:true , Public:false}, "ThreadDataSlotName", "system.drawing.threaddata"); 
    $.Constant({Static:true , Public:false}, "Ok", 0); 
    $.Constant({Static:true , Public:false}, "GenericError", 1); 
    $.Constant({Static:true , Public:false}, "InvalidParameter", 2); 
    $.Constant({Static:true , Public:false}, "OutOfMemory", 3); 
    $.Constant({Static:true , Public:false}, "ObjectBusy", 4); 
    $.Constant({Static:true , Public:false}, "InsufficientBuffer", 5); 
    $.Constant({Static:true , Public:false}, "NotImplemented", 6); 
    $.Constant({Static:true , Public:false}, "Win32Error", 7); 
    $.Constant({Static:true , Public:false}, "WrongState", 8); 
    $.Constant({Static:true , Public:false}, "Aborted", 9); 
    $.Constant({Static:true , Public:false}, "FileNotFound", 10); 
    $.Constant({Static:true , Public:false}, "ValueOverflow", 11); 
    $.Constant({Static:true , Public:false}, "AccessDenied", 12); 
    $.Constant({Static:true , Public:false}, "UnknownImageFormat", 13); 
    $.Constant({Static:true , Public:false}, "FontFamilyNotFound", 14); 
    $.Constant({Static:true , Public:false}, "FontStyleNotFound", 15); 
    $.Constant({Static:true , Public:false}, "NotTrueTypeFont", 16); 
    $.Constant({Static:true , Public:false}, "UnsupportedGdiplusVersion", 17); 
    $.Constant({Static:true , Public:false}, "GdiplusNotInitialized", 18); 
    $.Constant({Static:true , Public:false}, "PropertyNotFound", 19); 
    $.Constant({Static:true , Public:false}, "PropertyNotSupported", 20); 
    $.Property({Static:true , Public:false}, "Initialized", $.Boolean);

    $.Property({Static:true , Public:false}, "ThreadData", $asm06.TypeRef("System.Collections.IDictionary"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* struct System.Drawing.SafeNativeMethods+Gdip+StartupInput */ 

(function StartupInput$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.SafeNativeMethods+Gdip+StartupInput", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "GetDefault", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:true }, "GdiplusVersion", $.Int32); 
    $.Field({Static:false, Public:true }, "DebugEventCallback", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "SuppressBackgroundThread", $.Boolean); 
    $.Field({Static:false, Public:true }, "SuppressExternalCodecs", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.SafeNativeMethods+Gdip+StartupOutput */ 

(function StartupOutput$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.SafeNativeMethods+Gdip+StartupOutput", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "hook", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "unhook", $asm06.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.SafeNativeMethods+Gdip+DebugEventLevel */ 

JSIL.MakeEnum(
  "System.Drawing.SafeNativeMethods+Gdip+DebugEventLevel", false, {
    Fatal: 0, 
    Warning: 1
  }, false
);

/* class System.Drawing.SafeNativeMethods+ENHMETAHEADER */ 

(function ENHMETAHEADER$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+ENHMETAHEADER", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "iType", $.Int32); 
    $.Field({Static:false, Public:true }, "nSize", $.Int32); 
    $.Field({Static:false, Public:true }, "rclBounds_left", $.Int32); 
    $.Field({Static:false, Public:true }, "rclBounds_top", $.Int32); 
    $.Field({Static:false, Public:true }, "rclBounds_right", $.Int32); 
    $.Field({Static:false, Public:true }, "rclBounds_bottom", $.Int32); 
    $.Field({Static:false, Public:true }, "rclFrame_left", $.Int32); 
    $.Field({Static:false, Public:true }, "rclFrame_top", $.Int32); 
    $.Field({Static:false, Public:true }, "rclFrame_right", $.Int32); 
    $.Field({Static:false, Public:true }, "rclFrame_bottom", $.Int32); 
    $.Field({Static:false, Public:true }, "dSignature", $.Int32); 
    $.Field({Static:false, Public:true }, "nVersion", $.Int32); 
    $.Field({Static:false, Public:true }, "nBytes", $.Int32); 
    $.Field({Static:false, Public:true }, "nRecords", $.Int32); 
    $.Field({Static:false, Public:true }, "nHandles", $.Int16); 
    $.Field({Static:false, Public:true }, "sReserved", $.Int16); 
    $.Field({Static:false, Public:true }, "nDescription", $.Int32); 
    $.Field({Static:false, Public:true }, "offDescription", $.Int32); 
    $.Field({Static:false, Public:true }, "nPalEntries", $.Int32); 
    $.Field({Static:false, Public:true }, "szlDevice_cx", $.Int32); 
    $.Field({Static:false, Public:true }, "szlDevice_cy", $.Int32); 
    $.Field({Static:false, Public:true }, "szlMillimeters_cx", $.Int32); 
    $.Field({Static:false, Public:true }, "szlMillimeters_cy", $.Int32); 
    $.Field({Static:false, Public:true }, "cbPixelFormat", $.Int32); 
    $.Field({Static:false, Public:true }, "offPixelFormat", $.Int32); 
    $.Field({Static:false, Public:true }, "bOpenGL", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+DOCINFO */ 

(function DOCINFO$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+DOCINFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cbSize", $.Int32); 
    $.Field({Static:false, Public:true }, "lpszDocName", $.String); 
    $.Field({Static:false, Public:true }, "lpszOutput", $.String); 
    $.Field({Static:false, Public:true }, "lpszDatatype", $.String); 
    $.Field({Static:false, Public:true }, "fwType", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+PRINTDLG */ 

(function PRINTDLG$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+PRINTDLG", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "lStructSize", $.Int32); 
    $.Field({Static:false, Public:true }, "hwndOwner", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "hDevMode", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "hDevNames", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "hDC", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "Flags", $.Int32); 
    $.Field({Static:false, Public:true }, "nFromPage", $.Int16); 
    $.Field({Static:false, Public:true }, "nToPage", $.Int16); 
    $.Field({Static:false, Public:true }, "nMinPage", $.Int16); 
    $.Field({Static:false, Public:true }, "nMaxPage", $.Int16); 
    $.Field({Static:false, Public:true }, "nCopies", $.Int16); 
    $.Field({Static:false, Public:true }, "hInstance", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "lCustData", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "lpfnPrintHook", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "lpfnSetupHook", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "lpPrintTemplateName", $.String); 
    $.Field({Static:false, Public:true }, "lpSetupTemplateName", $.String); 
    $.Field({Static:false, Public:true }, "hPrintTemplate", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "hSetupTemplate", $asm06.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+PRINTDLGX86 */ 

(function PRINTDLGX86$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+PRINTDLGX86", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "lStructSize", $.Int32); 
    $.Field({Static:false, Public:true }, "hwndOwner", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "hDevMode", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "hDevNames", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "hDC", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "Flags", $.Int32); 
    $.Field({Static:false, Public:true }, "nFromPage", $.Int16); 
    $.Field({Static:false, Public:true }, "nToPage", $.Int16); 
    $.Field({Static:false, Public:true }, "nMinPage", $.Int16); 
    $.Field({Static:false, Public:true }, "nMaxPage", $.Int16); 
    $.Field({Static:false, Public:true }, "nCopies", $.Int16); 
    $.Field({Static:false, Public:true }, "hInstance", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "lCustData", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "lpfnPrintHook", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "lpfnSetupHook", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "lpPrintTemplateName", $.String); 
    $.Field({Static:false, Public:true }, "lpSetupTemplateName", $.String); 
    $.Field({Static:false, Public:true }, "hPrintTemplate", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "hSetupTemplate", $asm06.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.SafeNativeMethods+StructFormat */ 

JSIL.MakeEnum(
  "System.Drawing.SafeNativeMethods+StructFormat", false, {
    Ansi: 1, 
    Unicode: 2, 
    Auto: 3
  }, false
);

/* struct System.Drawing.SafeNativeMethods+RECT */ 

(function RECT$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.SafeNativeMethods+RECT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "left", $.Int32); 
    $.Field({Static:false, Public:true }, "top", $.Int32); 
    $.Field({Static:false, Public:true }, "right", $.Int32); 
    $.Field({Static:false, Public:true }, "bottom", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.SafeNativeMethods+MSG */ 

(function MSG$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.SafeNativeMethods+MSG", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "hwnd", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "message", $.Int32); 
    $.Field({Static:false, Public:true }, "wParam", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "lParam", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "time", $.Int32); 
    $.Field({Static:false, Public:true }, "pt_x", $.Int32); 
    $.Field({Static:false, Public:true }, "pt_y", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+ICONINFO */ 

(function ICONINFO$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+ICONINFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "fIcon", $.Int32); 
    $.Field({Static:false, Public:true }, "xHotspot", $.Int32); 
    $.Field({Static:false, Public:true }, "yHotspot", $.Int32); 
    $.Field({Static:false, Public:true }, "hbmMask", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "hbmColor", $asm06.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+BITMAP */ 

(function BITMAP$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+BITMAP", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "bmType", $.Int32); 
    $.Field({Static:false, Public:true }, "bmWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "bmHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "bmWidthBytes", $.Int32); 
    $.Field({Static:false, Public:true }, "bmPlanes", $.Int16); 
    $.Field({Static:false, Public:true }, "bmBitsPixel", $.Int16); 
    $.Field({Static:false, Public:true }, "bmBits", $asm06.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+BITMAPINFOHEADER */ 

(function BITMAPINFOHEADER$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+BITMAPINFOHEADER", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "biSize", $.Int32); 
    $.Field({Static:false, Public:true }, "biWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "biHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "biPlanes", $.Int16); 
    $.Field({Static:false, Public:true }, "biBitCount", $.Int16); 
    $.Field({Static:false, Public:true }, "biCompression", $.Int32); 
    $.Field({Static:false, Public:true }, "biSizeImage", $.Int32); 
    $.Field({Static:false, Public:true }, "biXPelsPerMeter", $.Int32); 
    $.Field({Static:false, Public:true }, "biYPelsPerMeter", $.Int32); 
    $.Field({Static:false, Public:true }, "biClrUsed", $.Int32); 
    $.Field({Static:false, Public:true }, "biClrImportant", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+LOGFONT */ 

(function LOGFONT$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+LOGFONT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:true }, "lfHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "lfWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "lfEscapement", $.Int32); 
    $.Field({Static:false, Public:true }, "lfOrientation", $.Int32); 
    $.Field({Static:false, Public:true }, "lfWeight", $.Int32); 
    $.Field({Static:false, Public:true }, "lfItalic", $.Byte); 
    $.Field({Static:false, Public:true }, "lfUnderline", $.Byte); 
    $.Field({Static:false, Public:true }, "lfStrikeOut", $.Byte); 
    $.Field({Static:false, Public:true }, "lfCharSet", $.Byte); 
    $.Field({Static:false, Public:true }, "lfOutPrecision", $.Byte); 
    $.Field({Static:false, Public:true }, "lfClipPrecision", $.Byte); 
    $.Field({Static:false, Public:true }, "lfQuality", $.Byte); 
    $.Field({Static:false, Public:true }, "lfPitchAndFamily", $.Byte); 
    $.Field({Static:false, Public:true }, "lfFaceName", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.SafeNativeMethods+TEXTMETRIC */ 

(function TEXTMETRIC$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.SafeNativeMethods+TEXTMETRIC", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "tmHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "tmAscent", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDescent", $.Int32); 
    $.Field({Static:false, Public:true }, "tmInternalLeading", $.Int32); 
    $.Field({Static:false, Public:true }, "tmExternalLeading", $.Int32); 
    $.Field({Static:false, Public:true }, "tmAveCharWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "tmMaxCharWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "tmWeight", $.Int32); 
    $.Field({Static:false, Public:true }, "tmOverhang", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDigitizedAspectX", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDigitizedAspectY", $.Int32); 
    $.Field({Static:false, Public:true }, "tmFirstChar", $.Char); 
    $.Field({Static:false, Public:true }, "tmLastChar", $.Char); 
    $.Field({Static:false, Public:true }, "tmDefaultChar", $.Char); 
    $.Field({Static:false, Public:true }, "tmBreakChar", $.Char); 
    $.Field({Static:false, Public:true }, "tmItalic", $.Byte); 
    $.Field({Static:false, Public:true }, "tmUnderlined", $.Byte); 
    $.Field({Static:false, Public:true }, "tmStruckOut", $.Byte); 
    $.Field({Static:false, Public:true }, "tmPitchAndFamily", $.Byte); 
    $.Field({Static:false, Public:true }, "tmCharSet", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.SafeNativeMethods+TEXTMETRICA */ 

(function TEXTMETRICA$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.SafeNativeMethods+TEXTMETRICA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "tmHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "tmAscent", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDescent", $.Int32); 
    $.Field({Static:false, Public:true }, "tmInternalLeading", $.Int32); 
    $.Field({Static:false, Public:true }, "tmExternalLeading", $.Int32); 
    $.Field({Static:false, Public:true }, "tmAveCharWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "tmMaxCharWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "tmWeight", $.Int32); 
    $.Field({Static:false, Public:true }, "tmOverhang", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDigitizedAspectX", $.Int32); 
    $.Field({Static:false, Public:true }, "tmDigitizedAspectY", $.Int32); 
    $.Field({Static:false, Public:true }, "tmFirstChar", $.Byte); 
    $.Field({Static:false, Public:true }, "tmLastChar", $.Byte); 
    $.Field({Static:false, Public:true }, "tmDefaultChar", $.Byte); 
    $.Field({Static:false, Public:true }, "tmBreakChar", $.Byte); 
    $.Field({Static:false, Public:true }, "tmItalic", $.Byte); 
    $.Field({Static:false, Public:true }, "tmUnderlined", $.Byte); 
    $.Field({Static:false, Public:true }, "tmStruckOut", $.Byte); 
    $.Field({Static:false, Public:true }, "tmPitchAndFamily", $.Byte); 
    $.Field({Static:false, Public:true }, "tmCharSet", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.SafeNativeMethods+ICONDIR */ 

(function ICONDIR$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.SafeNativeMethods+ICONDIR", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "idReserved", $.Int16); 
    $.Field({Static:false, Public:true }, "idType", $.Int16); 
    $.Field({Static:false, Public:true }, "idCount", $.Int16); 
    $.Field({Static:false, Public:true }, "idEntries", $asm0B.TypeRef("System.Drawing.SafeNativeMethods+ICONDIRENTRY")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.SafeNativeMethods+ICONDIRENTRY */ 

(function ICONDIRENTRY$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.SafeNativeMethods+ICONDIRENTRY", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "bWidth", $.Byte); 
    $.Field({Static:false, Public:true }, "bHeight", $.Byte); 
    $.Field({Static:false, Public:true }, "bColorCount", $.Byte); 
    $.Field({Static:false, Public:true }, "bReserved", $.Byte); 
    $.Field({Static:false, Public:true }, "wPlanes", $.Int16); 
    $.Field({Static:false, Public:true }, "wBitCount", $.Int16); 
    $.Field({Static:false, Public:true }, "dwBytesInRes", $.Int32); 
    $.Field({Static:false, Public:true }, "dwImageOffset", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+Ole */ 

(function Ole$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+Ole", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "PICTYPE_UNINITIALIZED", -1); 
    $.Constant({Static:true , Public:true }, "PICTYPE_NONE", 0); 
    $.Constant({Static:true , Public:true }, "PICTYPE_BITMAP", 1); 
    $.Constant({Static:true , Public:true }, "PICTYPE_METAFILE", 2); 
    $.Constant({Static:true , Public:true }, "PICTYPE_ICON", 3); 
    $.Constant({Static:true , Public:true }, "PICTYPE_ENHMETAFILE", 4); 
    $.Constant({Static:true , Public:true }, "STATFLAG_DEFAULT", 0); 
    $.Constant({Static:true , Public:true }, "STATFLAG_NONAME", 1); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+PICTDESC */ 

(function PICTDESC$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+PICTDESC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateIconPICTDESC", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHandle", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.Field({Static:false, Public:false}, "cbSizeOfStruct", $.Int32); 
    $.Field({Static:false, Public:true }, "picType", $.Int32); 
    $.Field({Static:false, Public:false}, "union1", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "union2", $.Int32); 
    $.Field({Static:false, Public:false}, "union3", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+DEVMODE */ 

(function DEVMODE$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+DEVMODE", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:true }, "dmDeviceName", $.String); 
    $.Field({Static:false, Public:true }, "dmSpecVersion", $.Int16); 
    $.Field({Static:false, Public:true }, "dmDriverVersion", $.Int16); 
    $.Field({Static:false, Public:true }, "dmSize", $.Int16); 
    $.Field({Static:false, Public:true }, "dmDriverExtra", $.Int16); 
    $.Field({Static:false, Public:true }, "dmFields", $.Int32); 
    $.Field({Static:false, Public:true }, "dmOrientation", $.Int16); 
    $.Field({Static:false, Public:true }, "dmPaperSize", $.Int16); 
    $.Field({Static:false, Public:true }, "dmPaperLength", $.Int16); 
    $.Field({Static:false, Public:true }, "dmPaperWidth", $.Int16); 
    $.Field({Static:false, Public:true }, "dmScale", $.Int16); 
    $.Field({Static:false, Public:true }, "dmCopies", $.Int16); 
    $.Field({Static:false, Public:true }, "dmDefaultSource", $.Int16); 
    $.Field({Static:false, Public:true }, "dmPrintQuality", $.Int16); 
    $.Field({Static:false, Public:true }, "dmColor", $.Int16); 
    $.Field({Static:false, Public:true }, "dmDuplex", $.Int16); 
    $.Field({Static:false, Public:true }, "dmYResolution", $.Int16); 
    $.Field({Static:false, Public:true }, "dmTTOption", $.Int16); 
    $.Field({Static:false, Public:true }, "dmCollate", $.Int16); 
    $.Field({Static:false, Public:true }, "dmFormName", $.String); 
    $.Field({Static:false, Public:true }, "dmLogPixels", $.Int16); 
    $.Field({Static:false, Public:true }, "dmBitsPerPel", $.Int32); 
    $.Field({Static:false, Public:true }, "dmPelsWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "dmPelsHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "dmDisplayFlags", $.Int32); 
    $.Field({Static:false, Public:true }, "dmDisplayFrequency", $.Int32); 
    $.Field({Static:false, Public:true }, "dmICMMethod", $.Int32); 
    $.Field({Static:false, Public:true }, "dmICMIntent", $.Int32); 
    $.Field({Static:false, Public:true }, "dmMediaType", $.Int32); 
    $.Field({Static:false, Public:true }, "dmDitherType", $.Int32); 
    $.Field({Static:false, Public:true }, "dmICCManufacturer", $.Int32); 
    $.Field({Static:false, Public:true }, "dmICCModel", $.Int32); 
    $.Field({Static:false, Public:true }, "dmPanningWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "dmPanningHeight", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+CommonHandles */ 

(function CommonHandles$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+CommonHandles", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Accelerator", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Cursor", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "EMF", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Find", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "GDI", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "HDC", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Icon", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Kernel", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Menu", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Window", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SafeNativeMethods+StreamConsts */ 

(function StreamConsts$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SafeNativeMethods+StreamConsts", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "LOCK_WRITE", 1); 
    $.Constant({Static:true , Public:true }, "LOCK_EXCLUSIVE", 2); 
    $.Constant({Static:true , Public:true }, "LOCK_ONLYONCE", 4); 
    $.Constant({Static:true , Public:true }, "STATFLAG_DEFAULT", 0); 
    $.Constant({Static:true , Public:true }, "STATFLAG_NONAME", 1); 
    $.Constant({Static:true , Public:true }, "STATFLAG_NOOPEN", 2); 
    $.Constant({Static:true , Public:true }, "STGC_DEFAULT", 0); 
    $.Constant({Static:true , Public:true }, "STGC_OVERWRITE", 1); 
    $.Constant({Static:true , Public:true }, "STGC_ONLYIFCURRENT", 2); 
    $.Constant({Static:true , Public:true }, "STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE", 4); 
    $.Constant({Static:true , Public:true }, "STREAM_SEEK_SET", 0); 
    $.Constant({Static:true , Public:true }, "STREAM_SEEK_CUR", 1); 
    $.Constant({Static:true , Public:true }, "STREAM_SEEK_END", 2); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Drawing.SafeNativeMethods+IPicture */ 

JSIL.MakeInterface(
  "System.Drawing.SafeNativeMethods+IPicture", false, [], function ($) {
    $.Method({}, "GetHandle", JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr")));
    $.Method({}, "GetHPal", JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr")));
    $.Method({}, "GetPictureType", JSIL.MethodSignature.Return($.Int16));
    $.Method({}, "GetWidth", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "GetHeight", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "Render", JSIL.MethodSignature.Void);
    $.Method({}, "SetHPal", JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr")));
    $.Method({}, "GetCurDC", JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr")));
    $.Method({}, "SelectPicture", new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]));
    $.Method({}, "GetKeepOriginalFormat", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "SetKeepOriginalFormat", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "PictureChanged", JSIL.MethodSignature.Void);
    $.Method({}, "SaveAsFile", new JSIL.MethodSignature($.Int32, [
          $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetAttributes", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "SetHdc", JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr")));
  }, [])
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["7BF80980-BF32-101A-8BBB-00AA00300CAB"]; })
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm06.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* struct System.Drawing.SafeNativeMethods+OBJECTHEADER */ 

(function OBJECTHEADER$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.SafeNativeMethods+OBJECTHEADER", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "signature", $.Int16); 
    $.Field({Static:false, Public:true }, "headersize", $.Int16); 
    $.Field({Static:false, Public:true }, "objectType", $.Int16); 
    $.Field({Static:false, Public:true }, "nameLen", $.Int16); 
    $.Field({Static:false, Public:true }, "classLen", $.Int16); 
    $.Field({Static:false, Public:true }, "nameOffset", $.Int16); 
    $.Field({Static:false, Public:true }, "classOffset", $.Int16); 
    $.Field({Static:false, Public:true }, "width", $.Int16); 
    $.Field({Static:false, Public:true }, "height", $.Int16); 
    $.Field({Static:false, Public:true }, "pInfo", $asm06.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.SafeNativeMethods+Win32SystemColors */ 

JSIL.MakeEnum(
  "System.Drawing.SafeNativeMethods+Win32SystemColors", false, {
    ScrollBar: 0, 
    Desktop: 1, 
    ActiveCaption: 2, 
    InactiveCaption: 3, 
    Menu: 4, 
    Window: 5, 
    WindowFrame: 6, 
    MenuText: 7, 
    WindowText: 8, 
    ActiveCaptionText: 9, 
    ActiveBorder: 10, 
    InactiveBorder: 11, 
    AppWorkspace: 12, 
    Highlight: 13, 
    HighlightText: 14, 
    Control: 15, 
    ButtonFace: 15, 
    ControlDark: 16, 
    ButtonShadow: 16, 
    GrayText: 17, 
    ControlText: 18, 
    InactiveCaptionText: 19, 
    ButtonHighlight: 20, 
    ControlLightLight: 20, 
    ControlDarkDark: 21, 
    ControlLight: 22, 
    InfoText: 23, 
    Info: 24, 
    HotTrack: 26, 
    GradientActiveCaption: 27, 
    GradientInactiveCaption: 28, 
    MenuHighlight: 29, 
    MenuBar: 30
  }, false
);

/* enum System.Drawing.SafeNativeMethods+BackgroundMode */ 

JSIL.MakeEnum(
  "System.Drawing.SafeNativeMethods+BackgroundMode", false, {
    TRANSPARENT: 1, 
    OPAQUE: 2
  }, false
);

/* enum System.Drawing.Text.GenericFontFamilies */ 

JSIL.MakeEnum(
  "System.Drawing.Text.GenericFontFamilies", true, {
    Serif: 0, 
    SansSerif: 1, 
    Monospace: 2
  }, false
);

/* class System.Drawing.Drawing2D.GraphicsContainer */ 

(function GraphicsContainer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Drawing2D.GraphicsContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "nativeGraphicsContainer", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Drawing2D.GraphicsPath */ 

(function GraphicsPath$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Drawing2D.GraphicsPath", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.FillMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetPathData", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.PathData"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddArc", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.RectangleF"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddArc", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddArc", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Rectangle"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddArc", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddBezier", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.PointF")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddBezier", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddBezier", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddBezier", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddBeziers", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddBeziers", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]))
    )
      .Parameter(0, "points", function (_) {
          _.Attribute($asm06.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "AddClosedCurve", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddClosedCurve", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddClosedCurve", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddClosedCurve", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $.Int32, 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCurve", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $.Int32, 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddEllipse", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddEllipse", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddEllipse", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddEllipse", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLine", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.PointF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLine", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLine", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLine", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLines", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLines", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPath", 
      new JSIL.MethodSignature(null, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPie", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Rectangle"), $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPie", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPie", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPolygon", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPolygon", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRectangle", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRectangle", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRectangles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.RectangleF")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRectangles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Rectangle")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.FontFamily"), 
          $.Int32, $.Single, 
          $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.FontFamily"), 
          $.Int32, $.Single, 
          $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.FontFamily"), 
          $.Int32, $.Single, 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0B.TypeRef("System.Drawing.FontFamily"), 
          $.Int32, $.Single, 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.StringFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearMarkers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "CloseAllFigures", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CloseFigure", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Flatten", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Flatten", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Flatten", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FillMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.FillMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PathData", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.PathData"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PathPoints", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PathTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PointCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.RectangleF"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.RectangleF"), [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetBounds", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.RectangleF"), [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Pen")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLastPoint", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Pen")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.Pen")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.Pen"), 
          $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Pen")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Pen")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsOutlineVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Pen"), 
          $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.PointF")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Point")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Graphics")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Reverse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FillMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.FillMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetMarkers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "StartFigure", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Warp", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $asm0B.TypeRef("System.Drawing.RectangleF")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Warp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Warp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.WarpMode")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Warp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.WarpMode"), 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Widen", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Pen"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Widen", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Widen", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Pen"), $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), 
          $.Single
        ])
    );

    $.Field({Static:false, Public:false}, "nativePath", $asm06.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:true }, "FillMode", $asm0B.TypeRef("System.Drawing.Drawing2D.FillMode"));

    $.Property({Static:false, Public:true }, "PathData", $asm0B.TypeRef("System.Drawing.Drawing2D.PathData"));

    $.Property({Static:false, Public:true }, "PointCount", $.Int32);

    $.Property({Static:false, Public:true }, "PathTypes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "PathPoints", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.ICloneable"), 
      /* 1 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Drawing2D.GraphicsPathIterator */ 

(function GraphicsPathIterator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Drawing2D.GraphicsPathIterator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyData", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Enumerate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubpathCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasCurve", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "NextMarker", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "NextMarker", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath")])
    );

    $.ExternalMethod({Static:false, Public:true }, "NextPathType", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "NextSubpath", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "NextSubpath", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Rewind", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nativeIter", $asm06.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "SubpathCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Drawing2D.GraphicsState */ 

(function GraphicsState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Drawing2D.GraphicsState", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "nativeState", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Drawing2D.HatchBrush */ 

(function HatchBrush$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Brush"), 
      Name: "System.Drawing.Drawing2D.HatchBrush", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.HatchStyle"), $asm0B.TypeRef("System.Drawing.Color")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Drawing2D.HatchStyle"), $asm0B.TypeRef("System.Drawing.Color"), 
          $asm0B.TypeRef("System.Drawing.Color")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BackgroundColor", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ForegroundColor", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HatchStyle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.HatchStyle"))
    );

    $.Property({Static:false, Public:true }, "HatchStyle", $asm0B.TypeRef("System.Drawing.Drawing2D.HatchStyle"));

    $.Property({Static:false, Public:true }, "ForegroundColor", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:false, Public:true }, "BackgroundColor", $asm0B.TypeRef("System.Drawing.Color"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Drawing2D.HatchStyle */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.HatchStyle", true, {
    Horizontal: 0, 
    Min: 0, 
    Vertical: 1, 
    ForwardDiagonal: 2, 
    BackwardDiagonal: 3, 
    Max: 4, 
    Cross: 4, 
    LargeGrid: 4, 
    DiagonalCross: 5, 
    Percent05: 6, 
    Percent10: 7, 
    Percent20: 8, 
    Percent25: 9, 
    Percent30: 10, 
    Percent40: 11, 
    Percent50: 12, 
    Percent60: 13, 
    Percent70: 14, 
    Percent75: 15, 
    Percent80: 16, 
    Percent90: 17, 
    LightDownwardDiagonal: 18, 
    LightUpwardDiagonal: 19, 
    DarkDownwardDiagonal: 20, 
    DarkUpwardDiagonal: 21, 
    WideDownwardDiagonal: 22, 
    WideUpwardDiagonal: 23, 
    LightVertical: 24, 
    LightHorizontal: 25, 
    NarrowVertical: 26, 
    NarrowHorizontal: 27, 
    DarkVertical: 28, 
    DarkHorizontal: 29, 
    DashedDownwardDiagonal: 30, 
    DashedUpwardDiagonal: 31, 
    DashedHorizontal: 32, 
    DashedVertical: 33, 
    SmallConfetti: 34, 
    LargeConfetti: 35, 
    ZigZag: 36, 
    Wave: 37, 
    DiagonalBrick: 38, 
    HorizontalBrick: 39, 
    Weave: 40, 
    Plaid: 41, 
    Divot: 42, 
    DottedGrid: 43, 
    DottedDiamond: 44, 
    Shingle: 45, 
    Trellis: 46, 
    Sphere: 47, 
    SmallGrid: 48, 
    SmallCheckerBoard: 49, 
    LargeCheckerBoard: 50, 
    OutlinedDiamond: 51, 
    SolidDiamond: 52
  }, false
);

/* enum System.Drawing.Text.HotkeyPrefix */ 

JSIL.MakeEnum(
  "System.Drawing.Text.HotkeyPrefix", true, {
    None: 0, 
    Show: 1, 
    Hide: 2
  }, false
);

/* class System.Drawing.Imaging.ImageAttributes */ 

(function ImageAttributes$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.ImageAttributes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearBrushRemapTable", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ClearColorKey", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ClearColorKey", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearColorMatrix", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ClearColorMatrix", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearGamma", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ClearGamma", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearNoOp", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ClearNoOp", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearOutputChannel", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ClearOutputChannel", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearOutputChannelColorProfile", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ClearOutputChannelColorProfile", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearRemapTable", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ClearRemapTable", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearThreshold", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ClearThreshold", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAdjustedPalette", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorPalette"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetBrushRemapTable", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.ColorMap")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetColorKey", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Color")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetColorKey", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Color"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetColorMatrices", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetColorMatrices", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrixFlag")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetColorMatrices", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrixFlag"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetColorMatrix", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetColorMatrix", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrixFlag")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetColorMatrix", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrix"), $asm0B.TypeRef("System.Drawing.Imaging.ColorMatrixFlag"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetGamma", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetGamma", 
      new JSIL.MethodSignature(null, [$.Single, $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNativeImageAttributes", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetNoOp", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetNoOp", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOutputChannel", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ColorChannelFlag"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetOutputChannel", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Imaging.ColorChannelFlag"), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOutputChannelColorProfile", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetOutputChannelColorProfile", 
      new JSIL.MethodSignature(null, [$.String, $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetRemapTable", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.ColorMap")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetRemapTable", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.ColorMap")]), $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetThreshold", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetThreshold", 
      new JSIL.MethodSignature(null, [$.Single, $asm0B.TypeRef("System.Drawing.Imaging.ColorAdjustType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetWrapMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetWrapMode", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), $asm0B.TypeRef("System.Drawing.Color")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetWrapMode", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), $asm0B.TypeRef("System.Drawing.Color"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "nativeImageAttributes", $asm06.TypeRef("System.IntPtr")); 
    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.ICloneable"), 
      /* 1 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Imaging.ImageCodecFlags */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.ImageCodecFlags", true, {
    Encoder: 1, 
    Decoder: 2, 
    SupportBitmap: 4, 
    SupportVector: 8, 
    SeekableEncode: 16, 
    BlockingDecode: 32, 
    Builtin: 65536, 
    System: 131072, 
    User: 262144
  }, true
);

/* class System.Drawing.Imaging.ImageCodecInfo */ 

(function ImageCodecInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.ImageCodecInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertFromMemory", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Clsid", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Guid"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_CodecName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DllName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FilenameExtension", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Flags", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.ImageCodecFlags"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_FormatDescription", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_FormatID", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Guid"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MimeType", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureMasks", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SignaturePatterns", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "GetImageDecoders", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetImageEncoders", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Clsid", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Guid"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_CodecName", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_DllName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FilenameExtension", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Flags", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Imaging.ImageCodecFlags"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_FormatDescription", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_FormatID", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Guid"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_MimeType", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_SignatureMasks", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_SignaturePatterns", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "clsid", $asm06.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "formatID", $asm06.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "codecName", $.String); 
    $.Field({Static:false, Public:false}, "dllName", $.String); 
    $.Field({Static:false, Public:false}, "formatDescription", $.String); 
    $.Field({Static:false, Public:false}, "filenameExtension", $.String); 
    $.Field({Static:false, Public:false}, "mimeType", $.String); 
    $.Field({Static:false, Public:false}, "flags", $asm0B.TypeRef("System.Drawing.Imaging.ImageCodecFlags")); 
    $.Field({Static:false, Public:false}, "version", $.Int32); 
    $.Field({Static:false, Public:false}, "signaturePatterns", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])])); 
    $.Field({Static:false, Public:false}, "signatureMasks", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])])); 
    $.Property({Static:false, Public:true }, "Clsid", $asm06.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "FormatID", $asm06.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "CodecName", $.String);

    $.Property({Static:false, Public:true }, "DllName", $.String);

    $.Property({Static:false, Public:true }, "FormatDescription", $.String);

    $.Property({Static:false, Public:true }, "FilenameExtension", $.String);

    $.Property({Static:false, Public:true }, "MimeType", $.String);

    $.Property({Static:false, Public:true }, "Flags", $asm0B.TypeRef("System.Drawing.Imaging.ImageCodecFlags"));

    $.Property({Static:false, Public:true }, "Version", $.Int32);

    $.Property({Static:false, Public:true }, "SignaturePatterns", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
      .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "SignatureMasks", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
      .Attribute($asm06.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Imaging.ImageFlags */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.ImageFlags", true, {
    None: 0, 
    Scalable: 1, 
    HasAlpha: 2, 
    HasTranslucent: 4, 
    PartiallyScalable: 8, 
    ColorSpaceRgb: 16, 
    ColorSpaceCmyk: 32, 
    ColorSpaceGray: 64, 
    ColorSpaceYcbcr: 128, 
    ColorSpaceYcck: 256, 
    HasRealDpi: 4096, 
    HasRealPixelSize: 8192, 
    ReadOnly: 65536, 
    Caching: 131072
  }, true
);

/* class System.Drawing.Imaging.ImageFormat */ 

(function ImageFormat$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.ImageFormat", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Guid"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "FindEncoder", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.ImageCodecInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Bmp", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Emf", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Exif", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Gif", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Guid", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Guid"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Icon", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Jpeg", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_MemoryBmp", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Png", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Tiff", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Wmf", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "memoryBMP", $.Type); 
    $.Field({Static:true , Public:false}, "bmp", $.Type); 
    $.Field({Static:true , Public:false}, "emf", $.Type); 
    $.Field({Static:true , Public:false}, "wmf", $.Type); 
    $.Field({Static:true , Public:false}, "jpeg", $.Type); 
    $.Field({Static:true , Public:false}, "png", $.Type); 
    $.Field({Static:true , Public:false}, "gif", $.Type); 
    $.Field({Static:true , Public:false}, "tiff", $.Type); 
    $.Field({Static:true , Public:false}, "exif", $.Type); 
    $.Field({Static:true , Public:false}, "photoCD", $.Type); 
    $.Field({Static:true , Public:false}, "flashPIX", $.Type); 
    $.Field({Static:true , Public:false}, "icon", $.Type); 
    $.Field({Static:false, Public:false}, "guid", $asm06.TypeRef("System.Guid")); 
    $.Property({Static:false, Public:true }, "Guid", $asm06.TypeRef("System.Guid"));

    $.Property({Static:true , Public:true }, "MemoryBmp", $.Type);

    $.Property({Static:true , Public:true }, "Bmp", $.Type);

    $.Property({Static:true , Public:true }, "Emf", $.Type);

    $.Property({Static:true , Public:true }, "Wmf", $.Type);

    $.Property({Static:true , Public:true }, "Gif", $.Type);

    $.Property({Static:true , Public:true }, "Jpeg", $.Type);

    $.Property({Static:true , Public:true }, "Png", $.Type);

    $.Property({Static:true , Public:true }, "Tiff", $.Type);

    $.Property({Static:true , Public:true }, "Exif", $.Type);

    $.Property({Static:true , Public:true }, "Icon", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.ImageFormatConverter.__Type__]; });

})();

/* class System.Drawing.ImageFormatConverter */ 

(function ImageFormatConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Drawing.ImageFormatConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm06.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProperties", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.PropertyInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.Field({Static:false, Public:false}, "values", $asm07.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Imaging.ImageLockMode */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.ImageLockMode", true, {
    ReadOnly: 1, 
    WriteOnly: 2, 
    ReadWrite: 3, 
    UserInputBuffer: 4
  }, false
);

/* class System.Drawing.Text.InstalledFontCollection */ 

(function InstalledFontCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Text.FontCollection"), 
      Name: "System.Drawing.Text.InstalledFontCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Drawing2D.InterpolationMode */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.InterpolationMode", true, {
    Invalid: -1, 
    Default: 0, 
    Low: 1, 
    High: 2, 
    Bilinear: 3, 
    Bicubic: 4, 
    NearestNeighbor: 5, 
    HighQualityBilinear: 6, 
    HighQualityBicubic: 7
  }, false
);

/* class System.Drawing.Drawing2D.LinearGradientBrush */ 

(function LinearGradientBrush$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Brush"), 
      Name: "System.Drawing.Drawing2D.LinearGradientBrush", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Color")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Point"), 
          $asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Color")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Color"), 
          $asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Drawing2D.LinearGradientMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Color"), 
          $asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Drawing2D.LinearGradientMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Color"), 
          $asm0B.TypeRef("System.Drawing.Color"), $.Single
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Color"), 
          $asm0B.TypeRef("System.Drawing.Color"), $.Single, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Color"), 
          $asm0B.TypeRef("System.Drawing.Color"), $.Single
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Color"), 
          $asm0B.TypeRef("System.Drawing.Color"), $.Single, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetBlend", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Blend"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetInterpolationColors", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetLinearColors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetRectangle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetTransform", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetWrapMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetBlend", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Blend"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetInterpolationColors", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetLinearColors", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Color"), $asm0B.TypeRef("System.Drawing.Color")])
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetWrapMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Blend", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Blend"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_GammaCorrection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InterpolationColors", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_LinearColors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Rectangle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.RectangleF"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_WrapMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetTransform", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
      new JSIL.MethodSignature(null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Blend", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Blend"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_GammaCorrection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InterpolationColors", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_LinearColors", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_WrapMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetBlendTriangularShape", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetBlendTriangularShape", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSigmaBellShape", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetSigmaBellShape", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.Field({Static:false, Public:false}, "interpolationColorsWasSet", $.Boolean); 
    $.Property({Static:false, Public:true }, "LinearColors", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]));

    $.Property({Static:false, Public:true }, "Rectangle", $asm0B.TypeRef("System.Drawing.RectangleF"));

    $.Property({Static:false, Public:true }, "GammaCorrection", $.Boolean);

    $.Property({Static:false, Public:true }, "Blend", $asm0B.TypeRef("System.Drawing.Drawing2D.Blend"));

    $.Property({Static:false, Public:true }, "InterpolationColors", $asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"));

    $.Property({Static:false, Public:true }, "WrapMode", $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"));

    $.Property({Static:false, Public:true }, "Transform", $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Drawing2D.LinearGradientMode */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.LinearGradientMode", true, {
    Horizontal: 0, 
    Vertical: 1, 
    ForwardDiagonal: 2, 
    BackwardDiagonal: 3
  }, false
);

/* enum System.Drawing.Drawing2D.LineCap */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.LineCap", true, {
    Flat: 0, 
    Square: 1, 
    Round: 2, 
    Triangle: 3, 
    NoAnchor: 16, 
    SquareAnchor: 17, 
    RoundAnchor: 18, 
    DiamondAnchor: 19, 
    ArrowAnchor: 20, 
    AnchorMask: 240, 
    Custom: 255
  }, false
);

/* enum System.Drawing.Drawing2D.LineJoin */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.LineJoin", true, {
    Miter: 0, 
    Bevel: 1, 
    Round: 2, 
    MiterClipped: 3
  }, false
);

/* class System.Drawing.Drawing2D.Matrix */ 

(function Matrix$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Drawing2D.Matrix", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.RectangleF"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Rectangle"), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Elements", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsIdentity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsInvertible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OffsetX", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OffsetY", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Invert", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Multiply", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [$.Type, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Rotate", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Rotate", 
      new JSIL.MethodSignature(null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RotateAt", 
      new JSIL.MethodSignature(null, [$.Single, $asm0B.TypeRef("System.Drawing.PointF")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "RotateAt", 
      new JSIL.MethodSignature(null, [
          $.Single, $asm0B.TypeRef("System.Drawing.PointF"), 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Scale", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Scale", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNativeMatrix", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Shear", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "Shear", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "TransformPoints", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "TransformPoints", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "TransformVectors", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "TransformVectors", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Translate", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Translate", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "VectorTransformPoints", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "nativeMatrix", $asm06.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:true }, "Elements", $jsilcore.TypeRef("System.Array", [$.Single]));

    $.Property({Static:false, Public:true }, "OffsetX", $.Single);

    $.Property({Static:false, Public:true }, "OffsetY", $.Single);

    $.Property({Static:false, Public:true }, "IsInvertible", $.Boolean);

    $.Property({Static:false, Public:true }, "IsIdentity", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Drawing2D.MatrixOrder */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.MatrixOrder", true, {
    Prepend: 0, 
    Append: 1
  }, false
);

/* class System.Drawing.Imaging.Metafile */ 

(function Metafile$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Image"), 
      Name: "System.Drawing.Imaging.Metafile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Imaging.WmfPlaceableFileHeader")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Imaging.WmfPlaceableFileHeader"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.RectangleF")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm06.TypeRef("System.IntPtr")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.RectangleF")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
          $.String
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
          $.String
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.RectangleF")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.RectangleF"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.IO.Stream"), $asm06.TypeRef("System.IntPtr"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Imaging.MetafileFrameUnit"), 
          $asm0B.TypeRef("System.Drawing.Imaging.EmfType"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FromGDIplus", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHenhmetafile", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMetafileHeader", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Imaging.MetafileHeader"), [$asm06.TypeRef("System.IntPtr"), $asm0B.TypeRef("System.Drawing.Imaging.WmfPlaceableFileHeader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMetafileHeader", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Imaging.MetafileHeader"), [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMetafileHeader", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Imaging.MetafileHeader"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMetafileHeader", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Imaging.MetafileHeader"), [$asm06.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMetafileHeader", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.MetafileHeader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "PlayRecord", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Imaging.EmfPlusRecordType"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Drawing.Design.MetafileEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", $asm0B.System.Drawing.Design.UITypeEditor.__Type__]; });

})();

/* enum System.Drawing.Imaging.MetafileFrameUnit */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.MetafileFrameUnit", true, {
    Pixel: 2, 
    Point: 3, 
    Inch: 4, 
    Document: 5, 
    Millimeter: 6, 
    GdiCompatible: 7
  }, false
);

/* class System.Drawing.Imaging.MetafileHeader */ 

(function MetafileHeader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.MetafileHeader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bounds", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DpiX", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DpiY", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmfPlusHeaderSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogicalDpiX", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogicalDpiY", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MetafileSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.MetafileType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WmfHeader", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Imaging.MetaHeader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDisplay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEmf", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEmfOrEmfPlus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEmfPlus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEmfPlusDual", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEmfPlusOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWmf", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWmfPlaceable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "wmf", $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeaderWmf")); 
    $.Field({Static:false, Public:false}, "emf", $asm0B.TypeRef("System.Drawing.Imaging.MetafileHeaderEmf")); 
    $.Property({Static:false, Public:true }, "Type", $asm0B.TypeRef("System.Drawing.Imaging.MetafileType"));

    $.Property({Static:false, Public:true }, "MetafileSize", $.Int32);

    $.Property({Static:false, Public:true }, "Version", $.Int32);

    $.Property({Static:false, Public:true }, "DpiX", $.Single);

    $.Property({Static:false, Public:true }, "DpiY", $.Single);

    $.Property({Static:false, Public:true }, "Bounds", $asm0B.TypeRef("System.Drawing.Rectangle"));

    $.Property({Static:false, Public:true }, "WmfHeader", $asm0B.TypeRef("System.Drawing.Imaging.MetaHeader"));

    $.Property({Static:false, Public:true }, "EmfPlusHeaderSize", $.Int32);

    $.Property({Static:false, Public:true }, "LogicalDpiX", $.Int32);

    $.Property({Static:false, Public:true }, "LogicalDpiY", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Imaging.MetafileHeaderEmf */ 

(function MetafileHeaderEmf$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.MetafileHeaderEmf", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "type", $asm0B.TypeRef("System.Drawing.Imaging.MetafileType")); 
    $.Field({Static:false, Public:true }, "size", $.Int32); 
    $.Field({Static:false, Public:true }, "version", $.Int32); 
    $.Field({Static:false, Public:true }, "emfPlusFlags", $asm0B.TypeRef("System.Drawing.Imaging.EmfPlusFlags")); 
    $.Field({Static:false, Public:true }, "dpiX", $.Single); 
    $.Field({Static:false, Public:true }, "dpiY", $.Single); 
    $.Field({Static:false, Public:true }, "X", $.Int32); 
    $.Field({Static:false, Public:true }, "Y", $.Int32); 
    $.Field({Static:false, Public:true }, "Width", $.Int32); 
    $.Field({Static:false, Public:true }, "Height", $.Int32); 
    $.Field({Static:false, Public:true }, "EmfHeader", $asm0B.TypeRef("System.Drawing.SafeNativeMethods+ENHMETAHEADER")); 
    $.Field({Static:false, Public:true }, "EmfPlusHeaderSize", $.Int32); 
    $.Field({Static:false, Public:true }, "LogicalDpiX", $.Int32); 
    $.Field({Static:false, Public:true }, "LogicalDpiY", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Imaging.MetafileHeaderWmf */ 

(function MetafileHeaderWmf$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.MetafileHeaderWmf", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "type", $asm0B.TypeRef("System.Drawing.Imaging.MetafileType")); 
    $.Field({Static:false, Public:true }, "size", $.Int32); 
    $.Field({Static:false, Public:true }, "version", $.Int32); 
    $.Field({Static:false, Public:true }, "emfPlusFlags", $asm0B.TypeRef("System.Drawing.Imaging.EmfPlusFlags")); 
    $.Field({Static:false, Public:true }, "dpiX", $.Single); 
    $.Field({Static:false, Public:true }, "dpiY", $.Single); 
    $.Field({Static:false, Public:true }, "X", $.Int32); 
    $.Field({Static:false, Public:true }, "Y", $.Int32); 
    $.Field({Static:false, Public:true }, "Width", $.Int32); 
    $.Field({Static:false, Public:true }, "Height", $.Int32); 
    $.Field({Static:false, Public:true }, "WmfHeader", $asm0B.TypeRef("System.Drawing.Imaging.MetaHeader")); 
    $.Field({Static:false, Public:true }, "dummy1", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy2", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy3", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy4", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy5", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy6", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy7", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy8", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy9", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy10", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy11", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy12", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy13", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy14", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy15", $.Int32); 
    $.Field({Static:false, Public:true }, "dummy16", $.Int32); 
    $.Field({Static:false, Public:true }, "EmfPlusHeaderSize", $.Int32); 
    $.Field({Static:false, Public:true }, "LogicalDpiX", $.Int32); 
    $.Field({Static:false, Public:true }, "LogicalDpiY", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Imaging.MetafileType */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.MetafileType", true, {
    Invalid: 0, 
    Wmf: 1, 
    WmfPlaceable: 2, 
    Emf: 3, 
    EmfPlusOnly: 4, 
    EmfPlusDual: 5
  }, false
);

/* class System.Drawing.Imaging.MetaHeader */ 

(function MetaHeader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.MetaHeader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HeaderSize", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MaxRecord", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_NoObjects", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_NoParameters", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_HeaderSize", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_MaxRecord", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_NoObjects", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_NoParameters", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Size", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "type", $.Int16); 
    $.Field({Static:false, Public:false}, "headerSize", $.Int16); 
    $.Field({Static:false, Public:false}, "version", $.Int16); 
    $.Field({Static:false, Public:false}, "size", $.Int32); 
    $.Field({Static:false, Public:false}, "noObjects", $.Int16); 
    $.Field({Static:false, Public:false}, "maxRecord", $.Int32); 
    $.Field({Static:false, Public:false}, "noParameters", $.Int16); 
    $.Property({Static:false, Public:true }, "Type", $.Int16);

    $.Property({Static:false, Public:true }, "HeaderSize", $.Int16);

    $.Property({Static:false, Public:true }, "Version", $.Int16);

    $.Property({Static:false, Public:true }, "Size", $.Int32);

    $.Property({Static:false, Public:true }, "NoObjects", $.Int16);

    $.Property({Static:false, Public:true }, "MaxRecord", $.Int32);

    $.Property({Static:false, Public:true }, "NoParameters", $.Int16);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Imaging.PaletteFlags */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.PaletteFlags", true, {
    HasAlpha: 1, 
    GrayScale: 2, 
    Halftone: 4
  }, true
);

/* class System.Drawing.Drawing2D.PathData */ 

(function PathData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Drawing2D.PathData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Points", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Types", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Points", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Types", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "points", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")])); 
    $.Field({Static:false, Public:false}, "types", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:true }, "Points", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]));

    $.Property({Static:false, Public:true }, "Types", $jsilcore.TypeRef("System.Array", [$.Byte]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Drawing2D.PathGradientBrush */ 

(function PathGradientBrush$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Brush"), 
      Name: "System.Drawing.Drawing2D.PathGradientBrush", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.PointF")]), $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Point")]), $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.GraphicsPath"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetBlend", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Blend"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetInterpolationColors", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetRectangle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetSurroundColors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetTransform", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetWrapMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetBlend", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Blend"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetInterpolationColors", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetSurroundColors", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetWrapMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Blend", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Blend"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_CenterColor", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CenterPoint", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FocusScales", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InterpolationColors", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Rectangle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.RectangleF"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SurroundColors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_WrapMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetTransform", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
      new JSIL.MethodSignature(null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Blend", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Blend"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_CenterColor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Color"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CenterPoint", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FocusScales", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InterpolationColors", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_SurroundColors", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_WrapMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetBlendTriangularShape", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetBlendTriangularShape", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSigmaBellShape", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetSigmaBellShape", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.Property({Static:false, Public:true }, "CenterColor", $asm0B.TypeRef("System.Drawing.Color"));

    $.Property({Static:false, Public:true }, "SurroundColors", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Color")]));

    $.Property({Static:false, Public:true }, "CenterPoint", $asm0B.TypeRef("System.Drawing.PointF"));

    $.Property({Static:false, Public:true }, "Rectangle", $asm0B.TypeRef("System.Drawing.RectangleF"));

    $.Property({Static:false, Public:true }, "Blend", $asm0B.TypeRef("System.Drawing.Drawing2D.Blend"));

    $.Property({Static:false, Public:true }, "InterpolationColors", $asm0B.TypeRef("System.Drawing.Drawing2D.ColorBlend"));

    $.Property({Static:false, Public:true }, "Transform", $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"));

    $.Property({Static:false, Public:true }, "FocusScales", $asm0B.TypeRef("System.Drawing.PointF"));

    $.Property({Static:false, Public:true }, "WrapMode", $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Drawing2D.PathPointType */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.PathPointType", true, {
    Start: 0, 
    Line: 1, 
    Bezier: 3, 
    Bezier3: 3, 
    PathTypeMask: 7, 
    DashMode: 16, 
    PathMarker: 32, 
    CloseSubpath: 128
  }, false
);

/* enum System.Drawing.Drawing2D.PenAlignment */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.PenAlignment", true, {
    Center: 0, 
    Inset: 1, 
    Outset: 2, 
    Left: 3, 
    Right: 4
  }, false
);

/* enum System.Drawing.Drawing2D.PenType */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.PenType", true, {
    SolidColor: 0, 
    HatchFill: 1, 
    TextureFill: 2, 
    PathGradient: 3, 
    LinearGradient: 4
  }, false
);

/* enum System.Drawing.Imaging.PixelFormat */ 

JSIL.MakeEnum(
  "System.Drawing.Imaging.PixelFormat", true, {
    DontCare: 0, 
    Undefined: 0, 
    Max: 15, 
    Indexed: 65536, 
    Gdi: 131072, 
    Format16bppRgb555: 135173, 
    Format16bppRgb565: 135174, 
    Format24bppRgb: 137224, 
    Format32bppRgb: 139273, 
    Format1bppIndexed: 196865, 
    Format4bppIndexed: 197634, 
    Format8bppIndexed: 198659, 
    Alpha: 262144, 
    Format16bppArgb1555: 397319, 
    PAlpha: 524288, 
    Format32bppPArgb: 925707, 
    Extended: 1048576, 
    Format16bppGrayScale: 1052676, 
    Format48bppRgb: 1060876, 
    Format64bppPArgb: 1851406, 
    Canonical: 2097152, 
    Format32bppArgb: 2498570, 
    Format64bppArgb: 3424269
  }, false
);

/* enum System.Drawing.Drawing2D.PixelOffsetMode */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.PixelOffsetMode", true, {
    Invalid: -1, 
    Default: 0, 
    HighSpeed: 1, 
    HighQuality: 2, 
    None: 3, 
    Half: 4
  }, false
);

/* delegate System.Drawing.Imaging.PlayRecordCallback */ 

JSIL.MakeDelegate("System.Drawing.Imaging.PlayRecordCallback", true, []);

/* struct System.Drawing.PointF */ 

(function PointF$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.PointF", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.SizeF")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Y", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.SizeF")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.SizeF")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_X", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Y", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.Size")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm0B.TypeRef("System.Drawing.SizeF")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "x", $.Single); 
    $.Field({Static:false, Public:false}, "y", $.Single); 
    function PointF__cctor () {
      $thisType.Empty = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      PointF__cctor
    );

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "X", $.Single);

    $.Property({Static:false, Public:true }, "Y", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Drawing.Text.PrivateFontCollection */ 

(function PrivateFontCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Text.FontCollection"), 
      Name: "System.Drawing.Text.PrivateFontCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddFontFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMemoryFont", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Imaging.PropertyItem */ 

(function PropertyItem$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.PropertyItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Len", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Len", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "id", $.Int32); 
    $.Field({Static:false, Public:false}, "len", $.Int32); 
    $.Field({Static:false, Public:false}, "type", $.Int16); 
    $.Field({Static:false, Public:false}, "value", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true }, "Len", $.Int32);

    $.Property({Static:false, Public:true }, "Type", $.Int16);

    $.Property({Static:false, Public:true }, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Drawing2D.QualityMode */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.QualityMode", true, {
    Invalid: -1, 
    Default: 0, 
    Low: 1, 
    High: 2
  }, false
);

/* struct System.Drawing.RectangleF */ 

(function RectangleF$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.RectangleF", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.PointF"), $asm0B.TypeRef("System.Drawing.SizeF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.PointF")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromLTRB", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Bottom", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.PointF"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.SizeF"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Top", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Y", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Inflate", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "Inflate", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.SizeF"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Inflate", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersect", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "IntersectsWith", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "Offset", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Offset", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.Rectangle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Height", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Size", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.SizeF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_X", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Y", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "ToGPRECTF", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Internal.GPRECTF"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "x", $.Single); 
    $.Field({Static:false, Public:false}, "y", $.Single); 
    $.Field({Static:false, Public:false}, "width", $.Single); 
    $.Field({Static:false, Public:false}, "height", $.Single); 
    function RectangleF__cctor () {
      $thisType.Empty = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      RectangleF__cctor
    );

    $.Property({Static:false, Public:true }, "Location", $asm0B.TypeRef("System.Drawing.PointF"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Size", $asm0B.TypeRef("System.Drawing.SizeF"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "X", $.Single);

    $.Property({Static:false, Public:true }, "Y", $.Single);

    $.Property({Static:false, Public:true }, "Width", $.Single);

    $.Property({Static:false, Public:true }, "Height", $.Single);

    $.Property({Static:false, Public:true }, "Left", $.Single)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Top", $.Single)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Right", $.Single)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Bottom", $.Single)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Drawing2D.RegionData */ 

(function RegionData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Drawing2D.RegionData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Data", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Data", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "data", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:true }, "Data", $jsilcore.TypeRef("System.Array", [$.Byte]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Drawing2D.SafeCustomLineCapHandle */ 

(function SafeCustomLineCapHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Drawing.Drawing2D.SafeCustomLineCapHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* struct System.Drawing.SizeF */ 

(function SizeF$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.SizeF", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.PointF"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Height", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToPointF", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSize", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Size"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "width", $.Single); 
    $.Field({Static:false, Public:false}, "height", $.Single); 
    function SizeF__cctor () {
      $thisType.Empty = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SizeF__cctor
    );

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Width", $.Single);

    $.Property({Static:false, Public:true }, "Height", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.SizeFConverter.__Type__]; });

})();

/* class System.Drawing.SizeFConverter */ 

(function SizeFConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Drawing.SizeFConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm06.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCreateInstanceSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperties", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Attribute")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPropertiesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Drawing2D.SmoothingMode */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.SmoothingMode", true, {
    Invalid: -1, 
    Default: 0, 
    HighSpeed: 1, 
    HighQuality: 2, 
    None: 3, 
    AntiAlias: 4
  }, false
);

/* enum System.Drawing.StringAlignment */ 

JSIL.MakeEnum(
  "System.Drawing.StringAlignment", true, {
    Near: 0, 
    Center: 1, 
    Far: 2
  }, false
);

/* enum System.Drawing.StringDigitSubstitute */ 

JSIL.MakeEnum(
  "System.Drawing.StringDigitSubstitute", true, {
    User: 0, 
    None: 1, 
    National: 2, 
    Traditional: 3
  }, false
);

/* struct System.Drawing.CharacterRange */ 

(function CharacterRange$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.CharacterRange", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_First", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_First", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Length", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "first", $.Int32); 
    $.Field({Static:false, Public:false}, "$length", $.Int32); 
    $.Property({Static:false, Public:true }, "First", $.Int32);

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.StringFormat */ 

(function StringFormat$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.StringFormat", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.StringFormatFlags"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.StringFormatFlags"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Alignment", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.StringAlignment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DigitSubstitutionLanguage", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DigitSubstitutionMethod", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.StringDigitSubstitute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FormatFlags", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.StringFormatFlags"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericDefault", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericTypographic", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HotkeyPrefix", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Text.HotkeyPrefix"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineAlignment", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.StringAlignment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Trimming", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.StringTrimming"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTabStops", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Alignment", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.StringAlignment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FormatFlags", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.StringFormatFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HotkeyPrefix", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Text.HotkeyPrefix"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LineAlignment", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.StringAlignment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Trimming", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.StringTrimming"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDigitSubstitution", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0B.TypeRef("System.Drawing.StringDigitSubstitute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetMeasurableCharacterRanges", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.CharacterRange")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetTabStops", 
      new JSIL.MethodSignature(null, [$.Single, $jsilcore.TypeRef("System.Array", [$.Single])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "nativeFormat", $asm06.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:true }, "FormatFlags", $asm0B.TypeRef("System.Drawing.StringFormatFlags"));

    $.Property({Static:false, Public:true }, "Alignment", $asm0B.TypeRef("System.Drawing.StringAlignment"));

    $.Property({Static:false, Public:true }, "LineAlignment", $asm0B.TypeRef("System.Drawing.StringAlignment"));

    $.Property({Static:false, Public:true }, "HotkeyPrefix", $asm0B.TypeRef("System.Drawing.Text.HotkeyPrefix"));

    $.Property({Static:false, Public:true }, "Trimming", $asm0B.TypeRef("System.Drawing.StringTrimming"));

    $.Property({Static:true , Public:true }, "GenericDefault", $.Type);

    $.Property({Static:true , Public:true }, "GenericTypographic", $.Type);

    $.Property({Static:false, Public:true }, "DigitSubstitutionMethod", $asm0B.TypeRef("System.Drawing.StringDigitSubstitute"));

    $.Property({Static:false, Public:true }, "DigitSubstitutionLanguage", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.ICloneable"), 
      /* 1 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.StringFormatFlags */ 

JSIL.MakeEnum(
  "System.Drawing.StringFormatFlags", true, {
    DirectionRightToLeft: 1, 
    DirectionVertical: 2, 
    FitBlackBox: 4, 
    DisplayFormatControl: 32, 
    NoFontFallback: 1024, 
    MeasureTrailingSpaces: 2048, 
    NoWrap: 4096, 
    LineLimit: 8192, 
    NoClip: 16384
  }, true
);

/* enum System.Drawing.StringTrimming */ 

JSIL.MakeEnum(
  "System.Drawing.StringTrimming", true, {
    None: 0, 
    Character: 1, 
    Word: 2, 
    EllipsisCharacter: 3, 
    EllipsisWord: 4, 
    EllipsisPath: 5
  }, false
);

/* enum System.Drawing.StringUnit */ 

JSIL.MakeEnum(
  "System.Drawing.StringUnit", true, {
    World: 0, 
    Display: 1, 
    Pixel: 2, 
    Point: 3, 
    Inch: 4, 
    Document: 5, 
    Millimeter: 6, 
    Em: 32
  }, false
);

/* enum System.Drawing.Text.TextRenderingHint */ 

JSIL.MakeEnum(
  "System.Drawing.Text.TextRenderingHint", true, {
    SystemDefault: 0, 
    SingleBitPerPixelGridFit: 1, 
    SingleBitPerPixel: 2, 
    AntiAliasGridFit: 3, 
    AntiAlias: 4, 
    ClearTypeGridFit: 5
  }, false
);

/* class System.Drawing.TextureBrush */ 

(function TextureBrush$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Brush"), 
      Name: "System.Drawing.TextureBrush", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Image"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), 
          $asm0B.TypeRef("System.Drawing.RectangleF")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"), 
          $asm0B.TypeRef("System.Drawing.Rectangle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.RectangleF")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.RectangleF"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle")])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Imaging.ImageAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetTransform", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_GetWrapMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetWrapMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Image", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Image"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_WrapMode", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "MultiplyTransform", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"), $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetTransform", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "RotateTransform", 
      new JSIL.MethodSignature(null, [$.Single, $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ScaleTransform", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WrapMode", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "TranslateTransform", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm0B.TypeRef("System.Drawing.Drawing2D.MatrixOrder")
        ])
    );

    $.Property({Static:false, Public:true }, "Transform", $asm0B.TypeRef("System.Drawing.Drawing2D.Matrix"));

    $.Property({Static:false, Public:true }, "WrapMode", $asm0B.TypeRef("System.Drawing.Drawing2D.WrapMode"));

    $.Property({Static:false, Public:true }, "Image", $asm0B.TypeRef("System.Drawing.Image"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.GraphicsUnit */ 

JSIL.MakeEnum(
  "System.Drawing.GraphicsUnit", true, {
    World: 0, 
    Display: 1, 
    Pixel: 2, 
    Point: 3, 
    Inch: 4, 
    Document: 5, 
    Millimeter: 6
  }, false
);

/* enum System.Drawing.Drawing2D.WarpMode */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.WarpMode", true, {
    Perspective: 0, 
    Bilinear: 1
  }, false
);

/* class System.Drawing.Imaging.WmfPlaceableFileHeader */ 

(function WmfPlaceableFileHeader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.WmfPlaceableFileHeader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BboxBottom", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_BboxLeft", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_BboxRight", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_BboxTop", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Checksum", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Hmf", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Inch", 
      JSIL.MethodSignature.Return($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Reserved", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_BboxBottom", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_BboxLeft", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_BboxRight", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_BboxTop", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Checksum", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Hmf", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Inch", 
      JSIL.MethodSignature.Action($.Int16)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Key", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Reserved", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "key", $.Int32); 
    $.Field({Static:false, Public:false}, "hmf", $.Int16); 
    $.Field({Static:false, Public:false}, "bboxLeft", $.Int16); 
    $.Field({Static:false, Public:false}, "bboxTop", $.Int16); 
    $.Field({Static:false, Public:false}, "bboxRight", $.Int16); 
    $.Field({Static:false, Public:false}, "bboxBottom", $.Int16); 
    $.Field({Static:false, Public:false}, "inch", $.Int16); 
    $.Field({Static:false, Public:false}, "reserved", $.Int32); 
    $.Field({Static:false, Public:false}, "checksum", $.Int16); 
    $.Property({Static:false, Public:true }, "Key", $.Int32);

    $.Property({Static:false, Public:true }, "Hmf", $.Int16);

    $.Property({Static:false, Public:true }, "BboxLeft", $.Int16);

    $.Property({Static:false, Public:true }, "BboxTop", $.Int16);

    $.Property({Static:false, Public:true }, "BboxRight", $.Int16);

    $.Property({Static:false, Public:true }, "BboxBottom", $.Int16);

    $.Property({Static:false, Public:true }, "Inch", $.Int16);

    $.Property({Static:false, Public:true }, "Reserved", $.Int32);

    $.Property({Static:false, Public:true }, "Checksum", $.Int16);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Drawing2D.WrapMode */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.WrapMode", true, {
    Tile: 0, 
    TileFlipX: 1, 
    TileFlipY: 2, 
    TileFlipXY: 3, 
    Clamp: 4
  }, false
);

JSIL.DeclareNamespace("System.Drawing.Configuration");
/* class System.Drawing.Configuration.SystemDrawingSection */ 

(function SystemDrawingSection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm08.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Drawing.Configuration.SystemDrawingSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_BitmapSuffix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_BitmapSuffix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "properties", $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "bitmapSuffix", $asm08.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Constant({Static:true , Public:false}, "BitmapSuffixSectionName", "bitmapSuffix"); 
    $.Property({Static:false, Public:true }, "BitmapSuffix", $.String)
      .Attribute($asm08.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["bitmapSuffix"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm08.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Drawing.Design");
/* class System.Drawing.Design.CategoryNameCollection */ 

(function CategoryNameCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.Drawing.Design.CategoryNameCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.Property({Static:false, Public:true }, "Item", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* interface System.Drawing.Design.IPropertyValueUIService */ 

JSIL.MakeInterface(
  "System.Drawing.Design.IPropertyValueUIService", true, [], function ($) {
    $.Method({}, "add_PropertyUIValueItemsChanged", JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler")));
    $.Method({}, "remove_PropertyUIValueItemsChanged", JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler")));
    $.Method({}, "AddPropertyValueUIHandler", JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.PropertyValueUIHandler")));
    $.Method({}, "GetPropertyUIValueItems", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Design.PropertyValueUIItem")]), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.ComponentModel.PropertyDescriptor")]));
    $.Method({}, "NotifyPropertyValueUIItemsChanged", JSIL.MethodSignature.Void);
    $.Method({}, "RemovePropertyValueUIHandler", JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.PropertyValueUIHandler")));
  }, []);

/* interface System.Drawing.Design.IToolboxItemProvider */ 

JSIL.MakeInterface(
  "System.Drawing.Design.IToolboxItemProvider", true, [], function ($) {
    $.Method({}, "get_Items", JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Design.ToolboxItemCollection")));
    $.Property({}, "Items");
  }, []);

/* interface System.Drawing.Design.IToolboxService */ 

JSIL.MakeInterface(
  "System.Drawing.Design.IToolboxService", true, [], function ($) {
    $.Method({}, "get_CategoryNames", JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Design.CategoryNameCollection")));
    $.Method({}, "get_SelectedCategory", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_SelectedCategory", JSIL.MethodSignature.Action($.String));
    $.Method({}, "AddCreator", new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItemCreatorCallback"), $.String]));
    $.Method({}, "AddCreator", new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Design.ToolboxItemCreatorCallback"), $.String, 
          $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")
        ]));
    $.Method({}, "AddLinkedToolboxItem", new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")]));
    $.Method({}, "AddLinkedToolboxItem", new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), $.String, 
          $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")
        ]));
    $.Method({}, "AddToolboxItem", JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.ToolboxItem")));
    $.Method({}, "AddToolboxItem", new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), $.String]));
    $.Method({}, "DeserializeToolboxItem", new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), [$.Object]));
    $.Method({}, "DeserializeToolboxItem", new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), [$.Object, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")]));
    $.Method({}, "GetSelectedToolboxItem", JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Design.ToolboxItem")));
    $.Method({}, "GetSelectedToolboxItem", new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")]));
    $.Method({}, "GetToolboxItems", JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Design.ToolboxItemCollection")));
    $.Method({}, "GetToolboxItems", new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Design.ToolboxItemCollection"), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")]));
    $.Method({}, "GetToolboxItems", new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Design.ToolboxItemCollection"), [$.String]));
    $.Method({}, "GetToolboxItems", new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Design.ToolboxItemCollection"), [$.String, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")]));
    $.Method({}, "IsSupported", new JSIL.MethodSignature($.Boolean, [$.Object, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")]));
    $.Method({}, "IsSupported", new JSIL.MethodSignature($.Boolean, [$.Object, $asm06.TypeRef("System.Collections.ICollection")]));
    $.Method({}, "IsToolboxItem", new JSIL.MethodSignature($.Boolean, [$.Object]));
    $.Method({}, "IsToolboxItem", new JSIL.MethodSignature($.Boolean, [$.Object, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")]));
    $.Method({}, "Refresh", JSIL.MethodSignature.Void);
    $.Method({}, "RemoveCreator", JSIL.MethodSignature.Action($.String));
    $.Method({}, "RemoveCreator", new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")]));
    $.Method({}, "RemoveToolboxItem", JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.ToolboxItem")));
    $.Method({}, "RemoveToolboxItem", new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), $.String]));
    $.Method({}, "SelectedToolboxItemUsed", JSIL.MethodSignature.Void);
    $.Method({}, "SerializeToolboxItem", new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")]));
    $.Method({}, "SetCursor", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "SetSelectedToolboxItem", JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.ToolboxItem")));
    $.Property({}, "CategoryNames");
    $.Property({}, "SelectedCategory");
  }, [])
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm06.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["4BACD258-DE64-4048-BC4E-FEDBEF9ACB76"]; });

/* interface System.Drawing.Design.IToolboxUser */ 

JSIL.MakeInterface(
  "System.Drawing.Design.IToolboxUser", true, [], function ($) {
    $.Method({}, "GetToolSupported", new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")]));
    $.Method({}, "ToolPicked", JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.ToolboxItem")));
  }, []);

/* class System.Drawing.Design.PaintValueEventArgs */ 

(function PaintValueEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.EventArgs"), 
      Name: "System.Drawing.Design.PaintValueEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
          $asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Rectangle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bounds", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Rectangle"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Graphics", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Graphics"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "context", $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "valueToPaint", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "graphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "bounds", $asm0B.TypeRef("System.Drawing.Rectangle")); 
    $.Property({Static:false, Public:true }, "Bounds", $asm0B.TypeRef("System.Drawing.Rectangle"));

    $.Property({Static:false, Public:true }, "Context", $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"));

    $.Property({Static:false, Public:true }, "Graphics", $asm0B.TypeRef("System.Drawing.Graphics"));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Drawing.Design.PropertyValueUIHandler */ 

JSIL.MakeDelegate("System.Drawing.Design.PropertyValueUIHandler", true, []);

/* class System.Drawing.Design.PropertyValueUIItem */ 

(function PropertyValueUIItem$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Design.PropertyValueUIItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Design.PropertyValueUIItemInvokeHandler"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Image", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Image"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InvokeHandler", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Design.PropertyValueUIItemInvokeHandler"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ToolTip", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "itemImage", $asm0B.TypeRef("System.Drawing.Image")); 
    $.Field({Static:false, Public:false}, "handler", $asm0B.TypeRef("System.Drawing.Design.PropertyValueUIItemInvokeHandler")); 
    $.Field({Static:false, Public:false}, "tooltip", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Image", $asm0B.TypeRef("System.Drawing.Image"));

    $.Property({Static:false, Public:true , Virtual:true }, "InvokeHandler", $asm0B.TypeRef("System.Drawing.Design.PropertyValueUIItemInvokeHandler"));

    $.Property({Static:false, Public:true , Virtual:true }, "ToolTip", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Drawing.Design.PropertyValueUIItemInvokeHandler */ 

JSIL.MakeDelegate("System.Drawing.Design.PropertyValueUIItemInvokeHandler", true, []);

/* class System.Drawing.Design.ToolboxComponentsCreatedEventArgs */ 

(function ToolboxComponentsCreatedEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.EventArgs"), 
      Name: "System.Drawing.Design.ToolboxComponentsCreatedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Components", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "comps", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")])); 
    $.Property({Static:false, Public:true }, "Components", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Drawing.Design.ToolboxComponentsCreatedEventHandler */ 

JSIL.MakeDelegate("System.Drawing.Design.ToolboxComponentsCreatedEventHandler", true, []);

/* class System.Drawing.Design.ToolboxComponentsCreatingEventArgs */ 

(function ToolboxComponentsCreatingEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.EventArgs"), 
      Name: "System.Drawing.Design.ToolboxComponentsCreatingEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DesignerHost", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "host", $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")); 
    $.Property({Static:false, Public:true }, "DesignerHost", $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Drawing.Design.ToolboxComponentsCreatingEventHandler */ 

JSIL.MakeDelegate("System.Drawing.Design.ToolboxComponentsCreatingEventHandler", true, []);

/* class System.Drawing.Design.ToolboxItem */ 

(function ToolboxItem$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Design.ToolboxItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ComponentsCreated", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ComponentsCreating", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatingEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUnlocked", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateComponents", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "CreateComponents", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateComponents", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"), $asm06.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateComponentsCore", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateComponentsCore", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.ComponentModel.IComponent")]), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"), $asm06.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FilterPropertyValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyName", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Reflection.AssemblyName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bitmap", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Bitmap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Company", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DependentAssemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.AssemblyName")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsTransient", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Locked", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNonRetargetedAssemblyName", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Reflection.AssemblyName"), [$asm06.TypeRef("System.Type"), $asm06.TypeRef("System.Reflection.AssemblyName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Type"), [$asm07.TypeRef("System.ComponentModel.Design.IDesignerHost")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetType", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Type"), [
          $asm07.TypeRef("System.ComponentModel.Design.IDesignerHost"), $asm06.TypeRef("System.Reflection.AssemblyName"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Lock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnComponentsCreated", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnComponentsCreating", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatingEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ComponentsCreated", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ComponentsCreating", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatingEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyName", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Reflection.AssemblyName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Bitmap", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Bitmap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Company", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DependentAssemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.AssemblyName")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisplayName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Filter", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsTransient", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm06.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "ValidatePropertyType", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm06.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidatePropertyValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.Object])
    );

    $.Field({Static:true , Public:false}, "ToolboxItemPersist", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
    $.Field({Static:true , Public:false}, "EventComponentsCreated", $.Object); 
    $.Field({Static:true , Public:false}, "EventComponentsCreating", $.Object); 
    $.Field({Static:false, Public:false}, "locked", $.Boolean); 
    $.Field({Static:false, Public:false}, "properties", $asm0B.TypeRef("System.Drawing.Design.ToolboxItem+LockableDictionary")); 
    $.Field({Static:false, Public:false}, "componentsCreatedEvent", $asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatedEventHandler")); 
    $.Field({Static:false, Public:false}, "componentsCreatingEvent", $asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatingEventHandler")); 
    $.Property({Static:false, Public:true }, "AssemblyName", $asm06.TypeRef("System.Reflection.AssemblyName"));

    $.Property({Static:false, Public:true }, "DependentAssemblies", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Reflection.AssemblyName")]));

    $.Property({Static:false, Public:true }, "Bitmap", $asm0B.TypeRef("System.Drawing.Bitmap"));

    $.Property({Static:false, Public:true }, "Company", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentType", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "Filter", $asm06.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true }, "IsTransient", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Locked", $.Boolean);

    $.Property({Static:false, Public:true }, "Properties", $asm06.TypeRef("System.Collections.IDictionary"));

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $.String);

    $.Event({Static:false, Public:true }, "ComponentsCreated", $asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatedEventHandler"));

    $.Event({Static:false, Public:true }, "ComponentsCreating", $asm0B.TypeRef("System.Drawing.Design.ToolboxComponentsCreatingEventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Design.ToolboxItem+LockableDictionary */ 

(function LockableDictionary$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Collections.Hashtable"), 
      Name: "System.Drawing.Design.ToolboxItem+LockableDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSerializable", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyName", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Field({Static:false, Public:false}, "_item", $asm0B.TypeRef("System.Drawing.Design.ToolboxItem")); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Drawing.Design.ToolboxItemCollection */ 

(function ToolboxItemCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.Drawing.Design.ToolboxItemCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Design.ToolboxItem"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Design.ToolboxItem")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm0B.TypeRef("System.Drawing.Design.ToolboxItem"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* delegate System.Drawing.Design.ToolboxItemCreatorCallback */ 

JSIL.MakeDelegate("System.Drawing.Design.ToolboxItemCreatorCallback", true, []);

/* class System.Drawing.Design.UITypeEditor */ 

(function UITypeEditor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Design.UITypeEditor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EditValue", 
      new JSIL.MethodSignature($.Object, [$asm06.TypeRef("System.IServiceProvider"), $.Object])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EditValue", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.IServiceProvider"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDropDownResizable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEditStyle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Design.UITypeEditorEditStyle"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEditStyle", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Design.UITypeEditorEditStyle"), [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPaintValueSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPaintValueSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "PaintValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0B.TypeRef("System.Drawing.Graphics"), 
          $asm0B.TypeRef("System.Drawing.Rectangle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PaintValue", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Design.PaintValueEventArgs"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsDropDownResizable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Design.UITypeEditorEditStyle */ 

JSIL.MakeEnum(
  "System.Drawing.Design.UITypeEditorEditStyle", true, {
    None: 1, 
    Modal: 2, 
    DropDown: 3
  }, false
);

JSIL.DeclareNamespace("System.Drawing.Printing");
/* class System.Drawing.Printing.PrintController */ 

(function PrintController$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PrintController", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreatePrintPageEvent", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsPreview", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEndPage", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEndPrint", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStartPage", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Graphics"), [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStartPrint", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Print", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintLoop", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument")])
    );

    $.Field({Static:false, Public:false}, "modeHandle", $asm0B.TypeRef("System.Drawing.Printing.PrintController+SafeDeviceModeHandle")); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsPreview", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Printing.PrintController+SafeDeviceModeHandle */ 

(function SafeDeviceModeHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Drawing.Printing.PrintController+SafeDeviceModeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* class System.Drawing.Printing.StandardPrintController */ 

(function StandardPrintController$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Printing.PrintController"), 
      Name: "System.Drawing.Printing.StandardPrintController", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "CheckSecurity", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintDocument"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEndPage", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEndPrint", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStartPage", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Graphics"), [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStartPrint", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")])
    );

    $.Field({Static:false, Public:false}, "dc", $asm0B.TypeRef("System.Drawing.Internal.DeviceContext")); 
    $.Field({Static:false, Public:false}, "graphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Printing.Duplex */ 

JSIL.MakeEnum(
  "System.Drawing.Printing.Duplex", true, {
    Default: -1, 
    Simplex: 1, 
    Vertical: 2, 
    Horizontal: 3
  }, false
);

/* class System.Drawing.Printing.InvalidPrinterException */ 

(function InvalidPrinterException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.SystemException"), 
      Name: "System.Drawing.Printing.InvalidPrinterException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateMessage", 
      new JSIL.MethodSignature($.String, [$asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "settings", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Printing.Margins */ 

(function Margins$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.Margins", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMargin", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bottom", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_DoubleBottom", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DoubleLeft", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DoubleRight", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DoubleTop", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Top", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeserializedMethod", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Runtime.Serialization.StreamingContext"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.Serialization.OnDeserializedAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Bottom", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DoubleBottom", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DoubleLeft", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DoubleRight", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DoubleTop", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Left", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Right", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Top", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "left", $.Int32); 
    $.Field({Static:false, Public:false}, "right", $.Int32); 
    $.Field({Static:false, Public:false}, "top", $.Int32); 
    $.Field({Static:false, Public:false}, "bottom", $.Int32); 
    $.Field({Static:false, Public:false}, "doubleLeft", $.Double)
      .Attribute($asm06.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $.Field({Static:false, Public:false}, "doubleRight", $.Double)
      .Attribute($asm06.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $.Field({Static:false, Public:false}, "doubleTop", $.Double)
      .Attribute($asm06.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $.Field({Static:false, Public:false}, "doubleBottom", $.Double)
      .Attribute($asm06.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $.Property({Static:false, Public:true }, "Left", $.Int32);

    $.Property({Static:false, Public:true }, "Right", $.Int32);

    $.Property({Static:false, Public:true }, "Top", $.Int32);

    $.Property({Static:false, Public:true }, "Bottom", $.Int32);

    $.Property({Static:false, Public:false}, "DoubleLeft", $.Double);

    $.Property({Static:false, Public:false}, "DoubleRight", $.Double);

    $.Property({Static:false, Public:false}, "DoubleTop", $.Double);

    $.Property({Static:false, Public:false}, "DoubleBottom", $.Double);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.Drawing.Printing.MarginsConverter.__Type__]; });

})();

/* class System.Drawing.Printing.MarginsConverter */ 

(function MarginsConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Drawing.Printing.MarginsConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm06.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm06.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCreateInstanceSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Printing.PageSettings */ 

(function PageSettings$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PageSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyToHdevmode", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bounds", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Color", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtraBytes", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HardMarginX", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HardMarginY", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Landscape", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Margins", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.Margins"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PaperSize", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PaperSize"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PaperSource", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PaperSource"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrintableArea", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrinterResolution", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrinterSettings", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetBounds", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Rectangle"), [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLandscape", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPaperSize", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Printing.PaperSize"), [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PaperSizeFromMode", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Printing.PaperSize"), [$asm0B.TypeRef("System.Drawing.SafeNativeMethods+DEVMODE")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PaperSourceFromMode", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Printing.PaperSource"), [$asm0B.TypeRef("System.Drawing.SafeNativeMethods+DEVMODE")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrinterResolutionFromMode", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"), [$asm0B.TypeRef("System.Drawing.SafeNativeMethods+DEVMODE")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Color", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Landscape", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Margins", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.Margins"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_PaperSize", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PaperSize"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_PaperSource", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PaperSource"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_PrinterResolution", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_PrinterSettings", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetHdevmode", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "printerSettings", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")); 
    $.Field({Static:false, Public:false}, "color", $asm0B.TypeRef("System.Drawing.Printing.TriState")); 
    $.Field({Static:false, Public:false}, "paperSize", $asm0B.TypeRef("System.Drawing.Printing.PaperSize")); 
    $.Field({Static:false, Public:false}, "paperSource", $asm0B.TypeRef("System.Drawing.Printing.PaperSource")); 
    $.Field({Static:false, Public:false}, "printerResolution", $asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")); 
    $.Field({Static:false, Public:false}, "landscape", $asm0B.TypeRef("System.Drawing.Printing.TriState")); 
    $.Field({Static:false, Public:false}, "margins", $asm0B.TypeRef("System.Drawing.Printing.Margins")); 
    $.Property({Static:false, Public:true }, "Bounds", $asm0B.TypeRef("System.Drawing.Rectangle"));

    $.Property({Static:false, Public:true }, "Color", $.Boolean);

    $.Property({Static:false, Public:true }, "HardMarginX", $.Single);

    $.Property({Static:false, Public:true }, "HardMarginY", $.Single);

    $.Property({Static:false, Public:true }, "Landscape", $.Boolean);

    $.Property({Static:false, Public:true }, "Margins", $asm0B.TypeRef("System.Drawing.Printing.Margins"));

    $.Property({Static:false, Public:true }, "PaperSize", $asm0B.TypeRef("System.Drawing.Printing.PaperSize"));

    $.Property({Static:false, Public:true }, "PaperSource", $asm0B.TypeRef("System.Drawing.Printing.PaperSource"));

    $.Property({Static:false, Public:true }, "PrintableArea", $asm0B.TypeRef("System.Drawing.RectangleF"));

    $.Property({Static:false, Public:true }, "PrinterResolution", $asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"));

    $.Property({Static:false, Public:true }, "PrinterSettings", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"));

    $.Property({Static:false, Public:false}, "ExtraBytes", $.Int16);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Printing.PaperKind */ 

JSIL.MakeEnum(
  "System.Drawing.Printing.PaperKind", true, {
    Custom: 0, 
    Letter: 1, 
    LetterSmall: 2, 
    Tabloid: 3, 
    Ledger: 4, 
    Legal: 5, 
    Statement: 6, 
    Executive: 7, 
    A3: 8, 
    A4: 9, 
    A4Small: 10, 
    A5: 11, 
    B4: 12, 
    B5: 13, 
    Folio: 14, 
    Quarto: 15, 
    Standard10x14: 16, 
    Standard11x17: 17, 
    Note: 18, 
    Number9Envelope: 19, 
    Number10Envelope: 20, 
    Number11Envelope: 21, 
    Number12Envelope: 22, 
    Number14Envelope: 23, 
    CSheet: 24, 
    DSheet: 25, 
    ESheet: 26, 
    DLEnvelope: 27, 
    C5Envelope: 28, 
    C3Envelope: 29, 
    C4Envelope: 30, 
    C6Envelope: 31, 
    C65Envelope: 32, 
    B4Envelope: 33, 
    B5Envelope: 34, 
    B6Envelope: 35, 
    ItalyEnvelope: 36, 
    MonarchEnvelope: 37, 
    PersonalEnvelope: 38, 
    USStandardFanfold: 39, 
    GermanStandardFanfold: 40, 
    GermanLegalFanfold: 41, 
    IsoB4: 42, 
    JapanesePostcard: 43, 
    Standard9x11: 44, 
    Standard10x11: 45, 
    Standard15x11: 46, 
    InviteEnvelope: 47, 
    LetterExtra: 50, 
    LegalExtra: 51, 
    TabloidExtra: 52, 
    A4Extra: 53, 
    LetterTransverse: 54, 
    A4Transverse: 55, 
    LetterExtraTransverse: 56, 
    APlus: 57, 
    BPlus: 58, 
    LetterPlus: 59, 
    A4Plus: 60, 
    A5Transverse: 61, 
    B5Transverse: 62, 
    A3Extra: 63, 
    A5Extra: 64, 
    B5Extra: 65, 
    A2: 66, 
    A3Transverse: 67, 
    A3ExtraTransverse: 68, 
    JapaneseDoublePostcard: 69, 
    A6: 70, 
    JapaneseEnvelopeKakuNumber2: 71, 
    JapaneseEnvelopeKakuNumber3: 72, 
    JapaneseEnvelopeChouNumber3: 73, 
    JapaneseEnvelopeChouNumber4: 74, 
    LetterRotated: 75, 
    A3Rotated: 76, 
    A4Rotated: 77, 
    A5Rotated: 78, 
    B4JisRotated: 79, 
    B5JisRotated: 80, 
    JapanesePostcardRotated: 81, 
    JapaneseDoublePostcardRotated: 82, 
    A6Rotated: 83, 
    JapaneseEnvelopeKakuNumber2Rotated: 84, 
    JapaneseEnvelopeKakuNumber3Rotated: 85, 
    JapaneseEnvelopeChouNumber3Rotated: 86, 
    JapaneseEnvelopeChouNumber4Rotated: 87, 
    B6Jis: 88, 
    B6JisRotated: 89, 
    Standard12x11: 90, 
    JapaneseEnvelopeYouNumber4: 91, 
    JapaneseEnvelopeYouNumber4Rotated: 92, 
    Prc16K: 93, 
    Prc32K: 94, 
    Prc32KBig: 95, 
    PrcEnvelopeNumber1: 96, 
    PrcEnvelopeNumber2: 97, 
    PrcEnvelopeNumber3: 98, 
    PrcEnvelopeNumber4: 99, 
    PrcEnvelopeNumber5: 100, 
    PrcEnvelopeNumber6: 101, 
    PrcEnvelopeNumber7: 102, 
    PrcEnvelopeNumber8: 103, 
    PrcEnvelopeNumber9: 104, 
    PrcEnvelopeNumber10: 105, 
    Prc16KRotated: 106, 
    Prc32KRotated: 107, 
    Prc32KBigRotated: 108, 
    PrcEnvelopeNumber1Rotated: 109, 
    PrcEnvelopeNumber2Rotated: 110, 
    PrcEnvelopeNumber3Rotated: 111, 
    PrcEnvelopeNumber4Rotated: 112, 
    PrcEnvelopeNumber5Rotated: 113, 
    PrcEnvelopeNumber6Rotated: 114, 
    PrcEnvelopeNumber7Rotated: 115, 
    PrcEnvelopeNumber8Rotated: 116, 
    PrcEnvelopeNumber9Rotated: 117, 
    PrcEnvelopeNumber10Rotated: 118
  }, false
);

/* class System.Drawing.Printing.PaperSize */ 

(function PaperSize$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PaperSize", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Printing.PaperKind"), $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PaperKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PaperName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_RawKind", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Height", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PaperName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RawKind", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "kind", $asm0B.TypeRef("System.Drawing.Printing.PaperKind")); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "width", $.Int32); 
    $.Field({Static:false, Public:false}, "height", $.Int32); 
    $.Field({Static:false, Public:false}, "createdByDefaultConstructor", $.Boolean); 
    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "Kind", $asm0B.TypeRef("System.Drawing.Printing.PaperKind"));

    $.Property({Static:false, Public:true }, "PaperName", $.String);

    $.Property({Static:false, Public:true }, "RawKind", $.Int32);

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Printing.PaperSource */ 

(function PaperSource$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PaperSource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PaperSourceKind"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PaperSourceKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RawKind", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SourceName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_RawKind", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_SourceName", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "kind", $asm0B.TypeRef("System.Drawing.Printing.PaperSourceKind")); 
    $.Property({Static:false, Public:true }, "Kind", $asm0B.TypeRef("System.Drawing.Printing.PaperSourceKind"));

    $.Property({Static:false, Public:true }, "RawKind", $.Int32);

    $.Property({Static:false, Public:true }, "SourceName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Printing.PaperSourceKind */ 

JSIL.MakeEnum(
  "System.Drawing.Printing.PaperSourceKind", true, {
    Upper: 1, 
    Lower: 2, 
    Middle: 3, 
    Manual: 4, 
    Envelope: 5, 
    ManualFeed: 6, 
    AutomaticFeed: 7, 
    TractorFeed: 8, 
    SmallFormat: 9, 
    LargeFormat: 10, 
    LargeCapacity: 11, 
    Cassette: 14, 
    FormSource: 15, 
    Custom: 257
  }, false
);

/* class System.Drawing.Printing.PreviewPageInfo */ 

(function PreviewPageInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PreviewPageInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Image"), $asm0B.TypeRef("System.Drawing.Size")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Image", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Image"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PhysicalSize", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Size"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "image", $asm0B.TypeRef("System.Drawing.Image")); 
    $.Field({Static:false, Public:false}, "physicalSize", $asm0B.TypeRef("System.Drawing.Size")); 
    $.Property({Static:false, Public:true }, "Image", $asm0B.TypeRef("System.Drawing.Image"));

    $.Property({Static:false, Public:true }, "PhysicalSize", $asm0B.TypeRef("System.Drawing.Size"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Printing.PreviewPrintController */ 

(function PreviewPrintController$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Printing.PrintController"), 
      Name: "System.Drawing.Printing.PreviewPrintController", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSecurity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsPreview", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UseAntiAlias", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetPreviewPageInfo", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PreviewPageInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEndPage", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEndPrint", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStartPage", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Graphics"), [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStartPrint", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_UseAntiAlias", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "list", $asm06.TypeRef("System.Collections.IList")); 
    $.Field({Static:false, Public:false}, "graphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
    $.Field({Static:false, Public:false}, "dc", $asm0B.TypeRef("System.Drawing.Internal.DeviceContext")); 
    $.Field({Static:false, Public:false}, "antiAlias", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsPreview", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "UseAntiAlias", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Printing.PrintAction */ 

JSIL.MakeEnum(
  "System.Drawing.Printing.PrintAction", true, {
    PrintToFile: 0, 
    PrintToPreview: 1, 
    PrintToPrinter: 2
  }, false
);

/* class System.Drawing.Printing.PrintDocument */ 

(function PrintDocument$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Drawing.Printing.PrintDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "_OnBeginPrint", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_OnEndPrint", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_OnPrintPage", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "_OnQueryPageSettings", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_BeginPrint", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_EndPrint", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_PrintPage", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintPageEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_QueryPageSettings", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultPageSettings", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PageSettings"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DocumentName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_OriginAtMargins", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PrintController", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrintController"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrinterSettings", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeginPrint", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndPrint", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnPrintPage", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnQueryPageSettings", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Print", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_BeginPrint", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_EndPrint", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_PrintPage", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintPageEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_QueryPageSettings", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultPageSettings", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PageSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DocumentName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OriginAtMargins", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_PrintController", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintController"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PrinterSettings", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "documentName", $.String); 
    $.Field({Static:false, Public:false}, "beginPrintHandler", $asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler")); 
    $.Field({Static:false, Public:false}, "endPrintHandler", $asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler")); 
    $.Field({Static:false, Public:false}, "printPageHandler", $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventHandler")); 
    $.Field({Static:false, Public:false}, "queryHandler", $asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventHandler")); 
    $.Field({Static:false, Public:false}, "printerSettings", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings")); 
    $.Field({Static:false, Public:false}, "defaultPageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings")); 
    $.Field({Static:false, Public:false}, "printController", $asm0B.TypeRef("System.Drawing.Printing.PrintController")); 
    $.Field({Static:false, Public:false}, "originAtMargins", $.Boolean); 
    $.Field({Static:false, Public:false}, "userSetPageSettings", $.Boolean); 
    $.Property({Static:false, Public:true }, "DefaultPageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings"))
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCdocumentPageSettingsDescr"]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "DocumentName", $.String)
      .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCdocumentNameDescr"]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return ["document"]; });

    $.Property({Static:false, Public:true }, "OriginAtMargins", $.Boolean)
      .Attribute($asm07.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCoriginAtMarginsDescr"]; });

    $.Property({Static:false, Public:true }, "PrintController", $asm0B.TypeRef("System.Drawing.Printing.PrintController"))
      .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCprintControllerDescr"]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "PrinterSettings", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings"))
      .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCprinterSettingsDescr"]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm07.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm07.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Event({Static:false, Public:true }, "BeginPrint", $asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler"))
      .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCbeginPrintDescr"]; });

    $.Event({Static:false, Public:true }, "EndPrint", $asm0B.TypeRef("System.Drawing.Printing.PrintEventHandler"))
      .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCendPrintDescr"]; });

    $.Event({Static:false, Public:true }, "PrintPage", $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventHandler"))
      .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCprintPageDescr"]; });

    $.Event({Static:false, Public:true }, "QueryPageSettings", $asm0B.TypeRef("System.Drawing.Printing.QueryPageSettingsEventHandler"))
      .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PDOCqueryPageSettingsDescr"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["PrintPage"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.ToolboxItemFilterAttribute"), function () { return ["System.Drawing.Printing"]; })
    .Attribute($asm07.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["DocumentName"]; })
    .Attribute($asm0B.TypeRef("System.Drawing.SRDescriptionAttribute"), function () { return ["PrintDocumentDesc"]; });

})();

/* class System.Drawing.Printing.PrinterResolution */ 

(function PrinterResolution$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PrinterResolution", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Printing.PrinterResolutionKind"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrinterResolutionKind"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Y", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Kind", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrinterResolutionKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_X", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Y", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "x", $.Int32); 
    $.Field({Static:false, Public:false}, "y", $.Int32); 
    $.Field({Static:false, Public:false}, "kind", $asm0B.TypeRef("System.Drawing.Printing.PrinterResolutionKind")); 
    $.Property({Static:false, Public:true }, "Kind", $asm0B.TypeRef("System.Drawing.Printing.PrinterResolutionKind"));

    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Printing.PrinterResolutionKind */ 

JSIL.MakeEnum(
  "System.Drawing.Printing.PrinterResolutionKind", true, {
    High: -4, 
    Medium: -3, 
    Low: -2, 
    Draft: -1, 
    Custom: 0
  }, false
);

/* class System.Drawing.Printing.PrinterSettings */ 

(function PrinterSettings$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PrinterSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDeviceContext", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.DeviceContext"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDeviceContext", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.DeviceContext"), [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInformationContext", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.DeviceContext"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInformationContext", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.DeviceContext"), [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMeasurementGraphics", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Graphics"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMeasurementGraphics", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Graphics"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMeasurementGraphics", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Graphics"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateMeasurementGraphics", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Graphics"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePRINTDLG", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.SafeNativeMethods+PRINTDLG"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePRINTDLGX86", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.SafeNativeMethods+PRINTDLGX86"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DeviceCapabilities", 
      new JSIL.MethodSignature($.Int32, [
          $.Int16, $asm06.TypeRef("System.IntPtr"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FastDeviceCapabilities", 
      new JSIL.MethodSignature($.Int32, [
          $.Int16, $asm06.TypeRef("System.IntPtr"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanDuplex", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Collate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Copies", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultPageSettings", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PageSettings"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_DriverName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Duplex", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.Duplex"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FromPage", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_InstalledPrinters", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrinterSettings+StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefaultPrinter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPlotter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LandscapeAngle", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumCopies", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumPage", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MinimumPage", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_OutputPort", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PaperSizes", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrinterSettings+PaperSizeCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Get_PaperSizes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PaperSources", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrinterSettings+PaperSourceCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Get_PaperSources", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrintDialogDisplayed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrinterName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrinterNameInternal", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrinterResolutions", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Get_PrinterResolutions", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrintFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrintRange", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrintRange"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PrintToFile", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SupportsColor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ToPage", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultPrinterName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDeviceCaps", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHdevmode", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHdevmode", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm0B.TypeRef("System.Drawing.Printing.PageSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHdevmodeInternal", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHdevmodeInternal", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHdevnames", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetModeField", 
      new JSIL.MethodSignature($.Int16, [$asm0B.TypeRef("System.Drawing.Printing.ModeField"), $.Int16])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetModeField", 
      new JSIL.MethodSignature($.Int16, [
          $asm0B.TypeRef("System.Drawing.Printing.ModeField"), $.Int16, 
          $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOutputPort", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDirectPrintingSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Imaging.ImageFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDirectPrintingSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Image")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadOneDEVNAME", 
      new JSIL.MethodSignature($.String, [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Collate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Copies", 
      JSIL.MethodSignature.Action($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Duplex", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.Duplex"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FromPage", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaximumPage", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinimumPage", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OutputPort", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PrintDialogDisplayed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PrinterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PrinterNameInternal", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PrintFileName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PrintRange", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintRange"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PrintToFile", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_ToPage", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetHdevmode", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetHdevnames", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteOneDEVNAME", 
      new JSIL.MethodSignature($.Int16, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "printerName", $.String); 
    $.Field({Static:false, Public:false}, "driverName", $.String); 
    $.Field({Static:false, Public:false}, "outputPort", $.String); 
    $.Field({Static:false, Public:false}, "printToFile", $.Boolean); 
    $.Field({Static:false, Public:false}, "printDialogDisplayed", $.Boolean); 
    $.Field({Static:false, Public:false}, "extrabytes", $.Int16); 
    $.Field({Static:false, Public:false}, "extrainfo", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "copies", $.Int16); 
    $.Field({Static:false, Public:false}, "duplex", $asm0B.TypeRef("System.Drawing.Printing.Duplex")); 
    $.Field({Static:false, Public:false}, "collate", $asm0B.TypeRef("System.Drawing.Printing.TriState")); 
    $.Field({Static:false, Public:false}, "defaultPageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings")); 
    $.Field({Static:false, Public:false}, "fromPage", $.Int32); 
    $.Field({Static:false, Public:false}, "toPage", $.Int32); 
    $.Field({Static:false, Public:false}, "maxPage", $.Int32); 
    $.Field({Static:false, Public:false}, "minPage", $.Int32); 
    $.Field({Static:false, Public:false}, "printRange", $asm0B.TypeRef("System.Drawing.Printing.PrintRange")); 
    $.Field({Static:false, Public:false}, "devmodebytes", $.Int16); 
    $.Field({Static:false, Public:false}, "cachedDevmode", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Constant({Static:true , Public:false}, "PADDING_IA64", 4); 
    $.Property({Static:false, Public:true }, "CanDuplex", $.Boolean);

    $.Property({Static:false, Public:true }, "Copies", $.Int16);

    $.Property({Static:false, Public:true }, "Collate", $.Boolean);

    $.Property({Static:false, Public:true }, "DefaultPageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings"));

    $.Property({Static:false, Public:false}, "DriverName", $.String);

    $.Property({Static:false, Public:true }, "Duplex", $asm0B.TypeRef("System.Drawing.Printing.Duplex"));

    $.Property({Static:false, Public:true }, "FromPage", $.Int32);

    $.Property({Static:true , Public:true }, "InstalledPrinters", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings+StringCollection"));

    $.Property({Static:false, Public:true }, "IsDefaultPrinter", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPlotter", $.Boolean);

    $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "LandscapeAngle", $.Int32);

    $.Property({Static:false, Public:true }, "MaximumCopies", $.Int32);

    $.Property({Static:false, Public:true }, "MaximumPage", $.Int32);

    $.Property({Static:false, Public:true }, "MinimumPage", $.Int32);

    $.Property({Static:false, Public:false}, "OutputPort", $.String);

    $.Property({Static:false, Public:true }, "PrintFileName", $.String);

    $.Property({Static:false, Public:true }, "PaperSizes", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings+PaperSizeCollection"));

    $.Property({Static:false, Public:true }, "PaperSources", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings+PaperSourceCollection"));

    $.Property({Static:false, Public:false}, "PrintDialogDisplayed", $.Boolean);

    $.Property({Static:false, Public:true }, "PrintRange", $asm0B.TypeRef("System.Drawing.Printing.PrintRange"));

    $.Property({Static:false, Public:true }, "PrintToFile", $.Boolean);

    $.Property({Static:false, Public:true }, "PrinterName", $.String);

    $.Property({Static:false, Public:false}, "PrinterNameInternal", $.String);

    $.Property({Static:false, Public:true }, "PrinterResolutions", $asm0B.TypeRef("System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection"));

    $.Property({Static:false, Public:true }, "SupportsColor", $.Boolean);

    $.Property({Static:false, Public:true }, "ToPage", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Printing.PrinterSettings+PaperSizeCollection */ 

(function PaperSizeCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PrinterSettings+PaperSizeCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")])
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Printing.PaperSize"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_Count")
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm06.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSize")])); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0B.TypeRef("System.Drawing.Printing.PaperSize"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm06.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Drawing.Printing.PrinterSettings+PaperSourceCollection */ 

(function PaperSourceCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PrinterSettings+PaperSourceCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")])
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Printing.PaperSource"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_Count")
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm06.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PaperSource")])); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0B.TypeRef("System.Drawing.Printing.PaperSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm06.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection */ 

(function PrinterResolutionCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")])
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_Count")
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm06.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Printing.PrinterResolution")])); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0B.TypeRef("System.Drawing.Printing.PrinterResolution"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm06.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Drawing.Printing.PrinterSettings+StringCollection */ 

(function StringCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PrinterSettings+StringCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String])
    )
      .Attribute($asm07.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm07.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_Count")
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm06.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm06.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Drawing.Printing.PrinterSettings+ArrayEnumerator */ 

(function ArrayEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PrinterSettings+ArrayEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "item", $.Object); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.Field({Static:false, Public:false}, "startIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "endIndex", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Printing.PrinterUnit */ 

JSIL.MakeEnum(
  "System.Drawing.Printing.PrinterUnit", true, {
    Display: 0, 
    ThousandthsOfAnInch: 1, 
    HundredthsOfAMillimeter: 2, 
    TenthsOfAMillimeter: 3
  }, false
);

/* class System.Drawing.Printing.PrinterUnitConvert */ 

(function PrinterUnitConvert$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Printing.PrinterUnitConvert", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
          $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
          $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Point"), [
          $asm0B.TypeRef("System.Drawing.Point"), $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
          $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Size"), [
          $asm0B.TypeRef("System.Drawing.Size"), $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
          $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Rectangle"), [
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
          $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Printing.Margins"), [
          $asm0B.TypeRef("System.Drawing.Printing.Margins"), $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit"), 
          $asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnitsPerDisplay", 
      new JSIL.MethodSignature($.Double, [$asm0B.TypeRef("System.Drawing.Printing.PrinterUnit")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Printing.PrintEventArgs */ 

(function PrintEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.CancelEventArgs"), 
      Name: "System.Drawing.Printing.PrintEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintAction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrintAction", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrintAction"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "printAction", $asm0B.TypeRef("System.Drawing.Printing.PrintAction")); 
    $.Property({Static:false, Public:true }, "PrintAction", $asm0B.TypeRef("System.Drawing.Printing.PrintAction"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Drawing.Printing.PrintEventHandler */ 

JSIL.MakeDelegate("System.Drawing.Printing.PrintEventHandler", true, []);

/* class System.Drawing.Printing.PrintingPermission */ 

(function PrintingPermission$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Drawing.Printing.PrintingPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Security.IPermission"), [$asm06.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Level", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Security.IPermission"), [$asm06.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyPrintingLevel", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"))
    );

    $.Field({Static:false, Public:false}, "printingLevel", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel")); 
    $.Property({Static:false, Public:true }, "Level", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"));

    $.ImplementInterfaces(
      /* 3 */ $asm06.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Printing.PrintingPermissionAttribute */ 

(function PrintingPermissionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Security.Permissions.CodeAccessSecurityAttribute"), 
      Name: "System.Drawing.Printing.PrintingPermissionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Security.Permissions.SecurityAction"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Level", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"))
    );

    $.Field({Static:false, Public:false}, "level", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel")); 
    $.Property({Static:false, Public:true }, "Level", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermissionLevel"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.All]; });

})();

/* enum System.Drawing.Printing.PrintingPermissionLevel */ 

JSIL.MakeEnum(
  "System.Drawing.Printing.PrintingPermissionLevel", true, {
    NoPrinting: 0, 
    SafePrinting: 1, 
    DefaultPrinting: 2, 
    AllPrinting: 3
  }, false
);

/* class System.Drawing.Printing.PrintPageEventArgs */ 

(function PrintPageEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.EventArgs"), 
      Name: "System.Drawing.Printing.PrintPageEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Rectangle"), 
          $asm0B.TypeRef("System.Drawing.Rectangle"), $asm0B.TypeRef("System.Drawing.Printing.PageSettings")
        ])
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cancel", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Graphics", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Graphics"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HasMorePages", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MarginBounds", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Rectangle"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PageBounds", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Rectangle"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PageSettings", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PageSettings"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Cancel", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_HasMorePages", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetGraphics", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Graphics"))
    );

    $.Field({Static:false, Public:false}, "hasMorePages", $.Boolean); 
    $.Field({Static:false, Public:false}, "cancel", $.Boolean); 
    $.Field({Static:false, Public:false}, "graphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "marginBounds", $asm0B.TypeRef("System.Drawing.Rectangle")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "pageBounds", $asm0B.TypeRef("System.Drawing.Rectangle")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "pageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings")); 
    $.Property({Static:false, Public:true }, "Cancel", $.Boolean);

    $.Property({Static:false, Public:true }, "Graphics", $asm0B.TypeRef("System.Drawing.Graphics"));

    $.Property({Static:false, Public:true }, "HasMorePages", $.Boolean);

    $.Property({Static:false, Public:true }, "MarginBounds", $asm0B.TypeRef("System.Drawing.Rectangle"));

    $.Property({Static:false, Public:true }, "PageBounds", $asm0B.TypeRef("System.Drawing.Rectangle"));

    $.Property({Static:false, Public:true }, "PageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Drawing.Printing.PrintPageEventHandler */ 

JSIL.MakeDelegate("System.Drawing.Printing.PrintPageEventHandler", true, []);

/* enum System.Drawing.Printing.PrintRange */ 

JSIL.MakeEnum(
  "System.Drawing.Printing.PrintRange", true, {
    AllPages: 0, 
    Selection: 1, 
    SomePages: 2, 
    CurrentPage: 4194304
  }, false
);

/* class System.Drawing.Printing.QueryPageSettingsEventArgs */ 

(function QueryPageSettingsEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Drawing.Printing.PrintEventArgs"), 
      Name: "System.Drawing.Printing.QueryPageSettingsEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PageSettings"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PageSettings", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Printing.PageSettings"))
    )
      .Attribute($asm06.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_PageSettings", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Printing.PageSettings"))
    );

    $.Field({Static:false, Public:false}, "pageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings")); 
    $.Property({Static:false, Public:true }, "PageSettings", $asm0B.TypeRef("System.Drawing.Printing.PageSettings"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Drawing.Printing.QueryPageSettingsEventHandler */ 

JSIL.MakeDelegate("System.Drawing.Printing.QueryPageSettingsEventHandler", true, []);

/* struct System.Drawing.Printing.TriState */ 

(function TriState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.Printing.TriState", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFalse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNotDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsTrue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "value", $.Byte); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "False", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "True", $.Type); 
    function TriState__cctor () {
      $thisType.Default = new $thisType();
      $thisType.False = new $thisType();
      $thisType.True = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TriState__cctor
    );

    $.Property({Static:false, Public:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "IsFalse", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNotDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "IsTrue", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ExternDll */ 

(function ExternDll$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.ExternDll", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "Activeds", "activeds.dll"); 
    $.Constant({Static:true , Public:true }, "Advapi32", "advapi32.dll"); 
    $.Constant({Static:true , Public:true }, "Comctl32", "comctl32.dll"); 
    $.Constant({Static:true , Public:true }, "Comdlg32", "comdlg32.dll"); 
    $.Constant({Static:true , Public:true }, "Gdi32", "gdi32.dll"); 
    $.Constant({Static:true , Public:true }, "Gdiplus", "gdiplus.dll"); 
    $.Constant({Static:true , Public:true }, "Hhctrl", "hhctrl.ocx"); 
    $.Constant({Static:true , Public:true }, "Imm32", "imm32.dll"); 
    $.Constant({Static:true , Public:true }, "Kernel32", "kernel32.dll"); 
    $.Constant({Static:true , Public:true }, "Loadperf", "Loadperf.dll"); 
    $.Constant({Static:true , Public:true }, "Mscoree", "mscoree.dll"); 
    $.Constant({Static:true , Public:true }, "Clr", "clr.dll"); 
    $.Constant({Static:true , Public:true }, "Msi", "msi.dll"); 
    $.Constant({Static:true , Public:true }, "Mqrt", "mqrt.dll"); 
    $.Constant({Static:true , Public:true }, "Ntdll", "ntdll.dll"); 
    $.Constant({Static:true , Public:true }, "Ole32", "ole32.dll"); 
    $.Constant({Static:true , Public:true }, "Oleacc", "oleacc.dll"); 
    $.Constant({Static:true , Public:true }, "Oleaut32", "oleaut32.dll"); 
    $.Constant({Static:true , Public:true }, "Olepro32", "olepro32.dll"); 
    $.Constant({Static:true , Public:true }, "PerfCounter", "perfcounter.dll"); 
    $.Constant({Static:true , Public:true }, "Powrprof", "Powrprof.dll"); 
    $.Constant({Static:true , Public:true }, "Psapi", "psapi.dll"); 
    $.Constant({Static:true , Public:true }, "Shell32", "shell32.dll"); 
    $.Constant({Static:true , Public:true }, "User32", "user32.dll"); 
    $.Constant({Static:true , Public:true }, "Uxtheme", "uxtheme.dll"); 
    $.Constant({Static:true , Public:true }, "WinMM", "winmm.dll"); 
    $.Constant({Static:true , Public:true }, "Winspool", "winspool.drv"); 
    $.Constant({Static:true , Public:true }, "Wtsapi32", "wtsapi32.dll"); 
    $.Constant({Static:true , Public:true }, "Version", "version.dll"); 
    $.Constant({Static:true , Public:true }, "Vsassert", "vsassert.dll"); 
    $.Constant({Static:true , Public:true }, "Fxassert", "Fxassert.dll"); 
    $.Constant({Static:true , Public:true }, "Shlwapi", "shlwapi.dll"); 
    $.Constant({Static:true , Public:true }, "Crypt32", "crypt32.dll"); 
    $.Constant({Static:true , Public:false}, "Odbc32", "odbc32.dll"); 
    $.Constant({Static:true , Public:false}, "SNI", "System.Data.dll"); 
    $.Constant({Static:true , Public:false}, "OciDll", "oci.dll"); 
    $.Constant({Static:true , Public:false}, "OraMtsDll", "oramts.dll"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Internal");
/* class System.Internal.HandleCollector */ 

(function HandleCollector$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Internal.HandleCollector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "add_HandleAdded", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Internal.HandleChangeEventHandler"))
    );

    $.ExternalMethod({Static:true , Public:false}, "add_HandleRemoved", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Internal.HandleChangeEventHandler"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RegisterType", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Remove", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "remove_HandleAdded", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Internal.HandleChangeEventHandler"))
    );

    $.ExternalMethod({Static:true , Public:false}, "remove_HandleRemoved", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Internal.HandleChangeEventHandler"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ResumeCollect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SuspendCollect", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "handleTypes", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Internal.HandleCollector+HandleType")])); 
    $.Field({Static:true , Public:false}, "handleTypeCount", $.Int32); 
    $.Field({Static:true , Public:false}, "suspendCount", $.Int32); 
    $.Field({Static:true , Public:false}, "HandleAdded", $asm0B.TypeRef("System.Internal.HandleChangeEventHandler")); 
    $.Field({Static:true , Public:false}, "HandleRemoved", $asm0B.TypeRef("System.Internal.HandleChangeEventHandler")); 
    $.Field({Static:true , Public:false}, "internalSyncObject", $.Object); 
    $.Event({Static:true , Public:false}, "HandleAdded", $asm0B.TypeRef("System.Internal.HandleChangeEventHandler"));

    $.Event({Static:true , Public:false}, "HandleRemoved", $asm0B.TypeRef("System.Internal.HandleChangeEventHandler"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Internal.HandleCollector+HandleType */ 

(function HandleType$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Internal.HandleCollector+HandleType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHandleCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.IntPtr")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $.String); 
    $.Field({Static:false, Public:false}, "initialThreshHold", $.Int32); 
    $.Field({Static:false, Public:false}, "threshHold", $.Int32); 
    $.Field({Static:false, Public:false}, "handleCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "deltaPercent", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Internal.HandleChangeEventHandler */ 

JSIL.MakeDelegate("System.Internal.HandleChangeEventHandler", false, []);

/* class System.Internal.DebugHandleTracker */ 

(function DebugHandleTracker$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Internal.DebugHandleTracker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckLeaks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "IgnoreCurrentHandlesAsLeaks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnHandleAdd", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnHandleRemove", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.IntPtr"), 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:false}, "handleTypes", $asm06.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "tracker", $.Type); 
    $.Field({Static:true , Public:false}, "internalSyncObject", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Internal.DebugHandleTracker+HandleType */ 

(function HandleType$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Internal.DebugHandleTracker+HandleType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckLeaks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeHash", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IgnoreCurrentHandlesAsLeaks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.IntPtr")])
    );

    $.Constant({Static:true , Public:false}, "BUCKETS", 10); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "$name", $.String); 
    $.Field({Static:false, Public:false}, "handleCount", $.Int32); 
    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Internal.DebugHandleTracker+HandleType+HandleEntry")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Internal.DebugHandleTracker+HandleType+HandleEntry */ 

(function HandleEntry$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Internal.DebugHandleTracker+HandleType+HandleEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm0B.TypeRef("System.Internal.DebugHandleTracker+HandleType")])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "handle", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "next", $.Type); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "callStack", $.String); 
    $.Field({Static:false, Public:true }, "ignorableAsLeak", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Internal.DebugHandleTracker+HandleType+HandleEntry+StackParser */ 

(function StackParser$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Internal.DebugHandleTracker+HandleType+HandleEntry+StackParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsString", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "DiscardNext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "DiscardTo", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Truncate", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "releventStack", $.String); 
    $.Field({Static:false, Public:false}, "startIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "endIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "$length", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ComponentModel");
/* class System.ComponentModel.CompModSwitches */ 

(function CompModSwitches$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.ComponentModel.CompModSwitches", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_HandleLeak", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.TraceSwitch"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TraceCollect", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.BooleanSwitch"))
    );

    $.Field({Static:true , Public:false}, "handleLeak", $asm07.TypeRef("System.Diagnostics.TraceSwitch")); 
    $.Field({Static:true , Public:false}, "traceCollect", $asm07.TypeRef("System.Diagnostics.BooleanSwitch")); 
    $.Property({Static:true , Public:true }, "HandleLeak", $asm07.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:true , Public:true }, "TraceCollect", $asm07.TypeRef("System.Diagnostics.BooleanSwitch"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ComponentModel.CoreSwitches */ 

(function CoreSwitches$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.ComponentModel.CoreSwitches", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_PerfTrack", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.BooleanSwitch"))
    );

    $.Field({Static:true , Public:false}, "perfTrack", $asm07.TypeRef("System.Diagnostics.BooleanSwitch")); 
    $.Property({Static:true , Public:true }, "PerfTrack", $asm07.TypeRef("System.Diagnostics.BooleanSwitch"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.InvariantComparer */ 

(function InvariantComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.InvariantComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.Field({Static:false, Public:false}, "m_compareInfo", $asm06.TypeRef("System.Globalization.CompareInfo")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $.Type); 
    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.ClientUtils */ 

(function ClientUtils$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Drawing.ClientUtils", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "GetBitCount", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsCriticalException", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsEnumValid", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Enum"), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsEnumValid", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Enum"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsEnumValid_Masked", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Enum"), $.Int32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsEnumValid_NotSequential", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Enum"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    )
      .Parameter(2, "enumValues", function (_) {
          _.Attribute($asm06.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "IsSecurityOrCriticalException", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Exception")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.ClientUtils+WeakRefCollection */ 

(function WeakRefCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.ClientUtils+WeakRefCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Int32, 
          $.Type, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateWeakRefObject", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.ClientUtils+WeakRefCollection+WeakRefObject"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerList", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RefCheckThreshold", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveByHashCode", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "ScavengeReferences", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RefCheckThreshold", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm06.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.Field({Static:false, Public:false}, "refCheckThreshold", $.Int32); 
    $.Field({Static:false, Public:false}, "_innerList", $asm06.TypeRef("System.Collections.ArrayList")); 
    $.Property({Static:false, Public:false}, "InnerList", $asm06.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "RefCheckThreshold", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.Collections.IList"), 
      /* 1 */ $asm06.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm06.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Drawing.ClientUtils+WeakRefCollection+WeakRefObject */ 

(function WeakRefObject$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.ClientUtils+WeakRefCollection+WeakRefObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAlive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Target", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "hash", $.Int32); 
    $.Field({Static:false, Public:false}, "weakHolder", $asm06.TypeRef("System.WeakReference")); 
    $.Property({Static:false, Public:false}, "IsAlive", $.Boolean);

    $.Property({Static:false, Public:false}, "Target", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.DbgUtil */ 

(function DbgUtil$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.DbgUtil", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "AssertFinalization", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    )
      .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object
        ])
    )
      .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object
        ])
    )
      .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object
        ])
    )
      .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    )
      .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertWin32", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ])
    )
      .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "AssertWin32Impl", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm06.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "FormatMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32, $.Int32, 
          $asm06.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_StackTrace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLastErrorStr", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetUserDefaultLCID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCriticalException", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:true }, "StackFramesToStr", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "StackFramesToStr", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "StackTraceToStr", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "StackTraceToStr", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_ALLOCATE_BUFFER", 256); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_IGNORE_INSERTS", 512); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_SYSTEM", 4096); 
    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_DEFAULT", 4608); 
    $.Field({Static:true , Public:true }, "gdipInitMaxFrameCount", $.Int32, 8); 
    $.Field({Static:true , Public:true }, "gdiUseMaxFrameCount", $.Int32, 8); 
    $.Field({Static:true , Public:true }, "finalizeMaxFrameCount", $.Int32, 5); 
    $.Property({Static:true , Public:true }, "StackTrace", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Internal.ApplyGraphicsProperties */ 

JSIL.MakeEnum(
  "System.Drawing.Internal.ApplyGraphicsProperties", false, {
    None: 0, 
    Clipping: 1, 
    TranslateTransform: 2, 
    All: 3
  }, true
);

/* class System.Drawing.Internal.DeviceContexts */ 

(function DeviceContexts$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Drawing.Internal.DeviceContexts", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AddDeviceContext", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Internal.DeviceContext"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnDcDisposing", 
      new JSIL.MethodSignature(null, [$.Object, $asm06.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveDeviceContext", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Internal.DeviceContext"))
    );

    $.Field({Static:true , Public:false}, "activeDeviceContexts", $asm0B.TypeRef("System.Drawing.ClientUtils+WeakRefCollection"))
      .Attribute($asm06.TypeRef("System.ThreadStaticAttribute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.WindowsGraphics */ 

(function WindowsGraphics$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Drawing.Internal.WindowsGraphics", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Internal.DeviceContext"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMeasurementWindowsGraphics", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromGraphics", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.Graphics")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromGraphics", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.Graphics"), $asm0B.TypeRef("System.Drawing.Internal.ApplyGraphicsProperties")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHdc", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromHwnd", 
      new JSIL.MethodSignature($.Type, [$asm06.TypeRef("System.IntPtr")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeviceContext", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Internal.DeviceContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHdc", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IntPtr"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReleaseHdc", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "dc", $asm0B.TypeRef("System.Drawing.Internal.DeviceContext")); 
    $.Field({Static:false, Public:false}, "disposeDc", $.Boolean); 
    $.Field({Static:false, Public:false}, "graphics", $asm0B.TypeRef("System.Drawing.Graphics")); 
    $.Property({Static:false, Public:true }, "DeviceContext", $asm0B.TypeRef("System.Drawing.Internal.DeviceContext"));

    $.ImplementInterfaces(
      /* 0 */ $asm0B.TypeRef("System.Drawing.IDeviceContext"), 
      /* 1 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.IntSafeNativeMethods */ 

(function IntSafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Drawing.Internal.IntSafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CreatePen", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRectRgn", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateSolidBrush", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExtCreatePen", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+LOGBRUSH"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GdiFlush", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetUserDefaultLCID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "IntCreatePen", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntCreateRectRgn", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntCreateSolidBrush", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntExtCreatePen", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+LOGBRUSH"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.Drawing.Internal.IntSafeNativeMethods+CommonHandles */ 

(function CommonHandles$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.IntSafeNativeMethods+CommonHandles", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "EMF", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "GDI", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "HDC", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.IntUnsafeNativeMethods */ 

(function IntUnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Drawing.Internal.IntUnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "AngleArc", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Arc", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "BeginPath", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CombineRgn", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RegionFlags"), [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.RegionCombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateCompatibleDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.String, $.String, 
          $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFontIndirect", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateIC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.String, $.String, 
          $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteDC", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteHDC", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteObject", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "DrawText", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DrawTextA", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DrawTextEx", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")]), $.Int32, 
          $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+DRAWTEXTPARAMS")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DrawTextExA", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")]), 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+DRAWTEXTPARAMS")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DrawTextExW", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")]), 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+DRAWTEXTPARAMS")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DrawTextW", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Ellipse", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "EndPath", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtTextOut", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")]), $.String, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FillRect", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")]), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBkColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBkMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetClipRgn", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCurrentObject", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDeviceCaps", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetGraphicsMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMapMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNearestColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+LOGBRUSH")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+LOGFONT")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetRgnBox", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RegionFlags"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetROP2", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetStockObject", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTextAlign", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTextColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTextExtentPoint32", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+SIZE")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTextExtentPoint32A", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+SIZE")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTextExtentPoint32W", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.String, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+SIZE")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTextMetrics", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+TEXTMETRIC")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTextMetricsA", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+TEXTMETRICA")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTextMetricsW", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+TEXTMETRIC")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetViewportExtEx", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+SIZE")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetViewportOrgEx", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+POINT")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntAngleArc", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntArc", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntBeginPath", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntCombineRgn", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RegionFlags"), [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.RegionCombineMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntCreateCompatibleDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntCreateDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.String, $.String, 
          $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntCreateFontIndirect", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntCreateIC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [
          $.String, $.String, 
          $.String, $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntDeleteDC", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntDeleteObject", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntEllipse", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntEndPath", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntFillRect", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")]), 
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetBkMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetClipRgn", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetCurrentObject", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetMapMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetObject", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+LOGBRUSH")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetObject", 
      new JSIL.MethodSignature($.Int32, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+LOGFONT")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetRgnBox", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RegionFlags"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RECT")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetStockObject", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetViewportExtEx", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+SIZE")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntGetViewportOrgEx", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+POINT")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntLineTo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntMoveToEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+POINT")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntOffsetViewportOrgEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+POINT")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntRectangle", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntReleaseDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntRestoreDC", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntSaveDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntSelectClipRgn", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RegionFlags"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntSelectObject", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntSetBkMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntSetGraphicsMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntSetMapMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntSetViewportExtEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+SIZE")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntSetViewportOrgEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+POINT")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntStrokePath", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "LineTo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveToEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+POINT")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "OffsetViewportOrgEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+POINT")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Rectangle", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReleaseDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "RestoreDC", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SaveDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SelectClipRgn", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+RegionFlags"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SelectObject", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetBkColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetBkMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetGraphicsMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetMapMode", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetROP2", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetTextAlign", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetTextColor", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetViewportExtEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+SIZE")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetViewportOrgEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32, 
          $.Int32, $asm0B.TypeRef("System.Drawing.Internal.IntNativeMethods+POINT")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrokePath", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WideCharToMultiByte", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.String, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.IntPtr")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WindowFromDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.Drawing.BitmapSelector */ 

(function BitmapSelector$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Drawing.BitmapSelector", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AppendSuffix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBitmap", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Bitmap"), [$asm06.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateIcon", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Icon"), [$asm06.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoesAssemblyHaveCustomAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Reflection.Assembly"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoesAssemblyHaveCustomAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Reflection.Assembly"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Suffix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFileName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetResourceStream", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IO.Stream"), [
          $asm06.TypeRef("System.Reflection.Assembly"), $asm06.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetResourceStream", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IO.Stream"), [$asm06.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResourceStreamHelper", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IO.Stream"), [
          $asm06.TypeRef("System.Reflection.Assembly"), $asm06.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SameAssemblyOptIn", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SatelliteAssemblyOptIn", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Suffix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false}, "_suffix", $.String); 
    $.Property({Static:true , Public:false}, "Suffix", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.IntSecurity */ 

(function IntSecurity$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Drawing.IntSecurity", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "DemandReadFileIO", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "DemandWriteFileIO", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AllPrintingAndUnmanagedCode", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:true , Public:false}, "HasPermission", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Drawing.Printing.PrintingPermission")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsafeGetFullPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "AllWindows", $asm06.TypeRef("System.Security.Permissions.UIPermission")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeSubWindows", $asm06.TypeRef("System.Security.Permissions.UIPermission")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UnmanagedCode", $asm06.TypeRef("System.Security.CodeAccessPermission")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ObjectFromWin32Handle", $asm06.TypeRef("System.Security.CodeAccessPermission"), function ($pi) {
        return $pi.UnmanagedCode;
      }); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Win32HandleManipulation", $asm06.TypeRef("System.Security.CodeAccessPermission"), function ($pi) {
        return $pi.UnmanagedCode;
      }); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NoPrinting", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermission")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SafePrinting", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermission")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultPrinting", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermission")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AllPrinting", $asm0B.TypeRef("System.Drawing.Printing.PrintingPermission")); 
    $.Field({Static:true , Public:false}, "allPrintingAndUnmanagedCode", $asm06.TypeRef("System.Security.PermissionSet")); 
    $.Property({Static:true , Public:true }, "AllPrintingAndUnmanagedCode", $asm06.TypeRef("System.Security.PermissionSet"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.KnownColorTable */ 

(function KnownColorTable$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Drawing.KnownColorTable", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "ArgbToKnownColor", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Drawing.Color"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Encode", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureColorNameTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureColorTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FromWin32Value", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitColorNameTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "InitColorTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "KnownColorToArgb", 
      new JSIL.MethodSignature($.Int32, [$asm0B.TypeRef("System.Drawing.KnownColor")])
    );

    $.ExternalMethod({Static:true , Public:true }, "KnownColorToName", 
      new JSIL.MethodSignature($.String, [$asm0B.TypeRef("System.Drawing.KnownColor")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnUserPreferenceChanging", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("Microsoft.Win32.UserPreferenceChangingEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SystemColorToArgb", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateSystemColors", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.Constant({Static:true , Public:false}, "AlphaShift", 24); 
    $.Constant({Static:true , Public:false}, "RedShift", 16); 
    $.Constant({Static:true , Public:false}, "GreenShift", 8); 
    $.Constant({Static:true , Public:false}, "BlueShift", 0); 
    $.Constant({Static:true , Public:false}, "Win32RedShift", 0); 
    $.Constant({Static:true , Public:false}, "Win32GreenShift", 8); 
    $.Constant({Static:true , Public:false}, "Win32BlueShift", 16); 
    $.Field({Static:true , Public:false}, "colorTable", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false}, "colorNameTable", $jsilcore.TypeRef("System.Array", [$.String])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.NativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "PC_NOCOLLAPSE", 4); 
    $.Constant({Static:true , Public:true }, "MAX_PATH", 260); 
    $.Constant({Static:true , Public:false}, "SM_REMOTESESSION", 4096); 
    $.Constant({Static:true , Public:false}, "OBJ_DC", 3); 
    $.Constant({Static:true , Public:false}, "OBJ_METADC", 4); 
    $.Constant({Static:true , Public:false}, "OBJ_MEMDC", 10); 
    $.Constant({Static:true , Public:false}, "OBJ_ENHMETADC", 12); 
    $.Constant({Static:true , Public:false}, "DIB_RGB_COLORS", 0); 
    $.Constant({Static:true , Public:false}, "BI_BITFIELDS", 3); 
    $.Constant({Static:true , Public:false}, "BI_RGB", 0); 
    $.Constant({Static:true , Public:false}, "BITMAPINFO_MAX_COLORSIZE", 256); 
    $.Constant({Static:true , Public:false}, "SPI_GETICONTITLELOGFONT", 31); 
    $.Constant({Static:true , Public:false}, "SPI_GETNONCLIENTMETRICS", 41); 
    $.Constant({Static:true , Public:false}, "DEFAULT_GUI_FONT", 17); 
    $.Field({Static:true , Public:false}, "NullHandleRef", $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")); 
    function NativeMethods__cctor () {
      $thisType.NullHandleRef = new $asm06.System.Runtime.InteropServices.HandleRef();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      NativeMethods__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.NativeMethods+RegionFlags */ 

JSIL.MakeEnum(
  "System.Drawing.NativeMethods+RegionFlags", false, {
    ERROR: 0, 
    NULLREGION: 1, 
    SIMPLEREGION: 2, 
    COMPLEXREGION: 3
  }, false
);

/* struct System.Drawing.NativeMethods+BITMAPINFO_FLAT */ 

(function BITMAPINFO_FLAT$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.NativeMethods+BITMAPINFO_FLAT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "bmiHeader_biSize", $.Int32); 
    $.Field({Static:false, Public:true }, "bmiHeader_biWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "bmiHeader_biHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "bmiHeader_biPlanes", $.Int16); 
    $.Field({Static:false, Public:true }, "bmiHeader_biBitCount", $.Int16); 
    $.Field({Static:false, Public:true }, "bmiHeader_biCompression", $.Int32); 
    $.Field({Static:false, Public:true }, "bmiHeader_biSizeImage", $.Int32); 
    $.Field({Static:false, Public:true }, "bmiHeader_biXPelsPerMeter", $.Int32); 
    $.Field({Static:false, Public:true }, "bmiHeader_biYPelsPerMeter", $.Int32); 
    $.Field({Static:false, Public:true }, "bmiHeader_biClrUsed", $.Int32); 
    $.Field({Static:false, Public:true }, "bmiHeader_biClrImportant", $.Int32); 
    $.Field({Static:false, Public:true }, "bmiColors", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.NativeMethods+BITMAPINFOHEADER */ 

(function BITMAPINFOHEADER$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.NativeMethods+BITMAPINFOHEADER", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "biSize", $.Int32); 
    $.Field({Static:false, Public:true }, "biWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "biHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "biPlanes", $.Int16); 
    $.Field({Static:false, Public:true }, "biBitCount", $.Int16); 
    $.Field({Static:false, Public:true }, "biCompression", $.Int32); 
    $.Field({Static:false, Public:true }, "biSizeImage", $.Int32); 
    $.Field({Static:false, Public:true }, "biXPelsPerMeter", $.Int32); 
    $.Field({Static:false, Public:true }, "biYPelsPerMeter", $.Int32); 
    $.Field({Static:false, Public:true }, "biClrUsed", $.Int32); 
    $.Field({Static:false, Public:true }, "biClrImportant", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.NativeMethods+PALETTEENTRY */ 

(function PALETTEENTRY$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.NativeMethods+PALETTEENTRY", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "peRed", $.Byte); 
    $.Field({Static:false, Public:true }, "peGreen", $.Byte); 
    $.Field({Static:false, Public:true }, "peBlue", $.Byte); 
    $.Field({Static:false, Public:true }, "peFlags", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.NativeMethods+RGBQUAD */ 

(function RGBQUAD$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.NativeMethods+RGBQUAD", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "rgbBlue", $.Byte); 
    $.Field({Static:false, Public:true }, "rgbGreen", $.Byte); 
    $.Field({Static:false, Public:true }, "rgbRed", $.Byte); 
    $.Field({Static:false, Public:true }, "rgbReserved", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.NativeMethods+NONCLIENTMETRICS */ 

(function NONCLIENTMETRICS$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.NativeMethods+NONCLIENTMETRICS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cbSize", $.Int32); 
    $.Field({Static:false, Public:true }, "iBorderWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "iScrollWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "iScrollHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "iCaptionWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "iCaptionHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "lfCaptionFont", $asm0B.TypeRef("System.Drawing.SafeNativeMethods+LOGFONT")); 
    $.Field({Static:false, Public:true }, "iSmCaptionWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "iSmCaptionHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "lfSmCaptionFont", $asm0B.TypeRef("System.Drawing.SafeNativeMethods+LOGFONT")); 
    $.Field({Static:false, Public:true }, "iMenuWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "iMenuHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "lfMenuFont", $asm0B.TypeRef("System.Drawing.SafeNativeMethods+LOGFONT")); 
    $.Field({Static:false, Public:true }, "lfStatusFont", $asm0B.TypeRef("System.Drawing.SafeNativeMethods+LOGFONT")); 
    $.Field({Static:false, Public:true }, "lfMessageFont", $asm0B.TypeRef("System.Drawing.SafeNativeMethods+LOGFONT")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Imaging.PropertyItemInternal */ 

(function PropertyItemInternal$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.PropertyItemInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertFromMemory", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Drawing.Imaging.PropertyItem")]), [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertFromPropertyItem", 
      new JSIL.MethodSignature($.Type, [$asm0B.TypeRef("System.Drawing.Imaging.PropertyItem")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:true }, "id", $.Int32); 
    $.Field({Static:false, Public:true }, "len", $.Int32); 
    $.Field({Static:false, Public:true }, "type", $.Int16); 
    $.Field({Static:false, Public:true }, "value", $asm06.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:true }, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.UnsafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyMemory", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateCompatibleDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteDC", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDeviceCaps", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObjectType", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetStockObject", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSystemDefaultLCID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSystemMetrics", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntCreateCompatibleDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntDeleteDC", 
      new JSIL.MethodSignature($.Boolean, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntGetDC", 
      new JSIL.MethodSignature($asm06.TypeRef("System.IntPtr"), [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntReleaseDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "PtrToStructure", 
      new JSIL.MethodSignature($.Object, [$asm06.TypeRef("System.IntPtr"), $asm06.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "PtrToStructure", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReleaseDC", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm06.TypeRef("System.Runtime.InteropServices.HandleRef")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SystemParametersInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.NativeMethods+NONCLIENTMETRICS"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SystemParametersInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm0B.TypeRef("System.Drawing.SafeNativeMethods+LOGFONT"), $.Int32
        ])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* interface System.Drawing.UnsafeNativeMethods+IStream */ 

JSIL.MakeInterface(
  "System.Drawing.UnsafeNativeMethods+IStream", false, [], function ($) {
    $.Method({}, "Read", new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32]));
    $.Method({}, "Write", new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32]));
    $.Method({}, "Seek", new JSIL.MethodSignature($.Int64, [$.Int64, $.Int32]));
    $.Method({}, "SetSize", JSIL.MethodSignature.Action($.Int64));
    $.Method({}, "CopyTo", new JSIL.MethodSignature($.Int64, [
          $.Type, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Int64])
        ]));
    $.Method({}, "Commit", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "Revert", JSIL.MethodSignature.Void);
    $.Method({}, "LockRegion", new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int32
        ]));
    $.Method({}, "UnlockRegion", new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int32
        ]));
    $.Method({}, "Stat", new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $.Int32]));
    $.Method({}, "Clone", JSIL.MethodSignature.Return($.Type));
  }, [])
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0000000C-0000-0000-C000-000000000046"]; })
  .Attribute($asm06.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm06.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* class System.Drawing.UnsafeNativeMethods+ComStreamFromDataStream */ 

(function ComStreamFromDataStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.UnsafeNativeMethods+ComStreamFromDataStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ActualizeVirtualPosition", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature($.Int64, [
          $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EFail", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Runtime.InteropServices.ExternalException"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataStream", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LockRegion", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Revert", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSize", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Stat", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnlockRegion", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.Field({Static:false, Public:false}, "dataStream", $asm06.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "virtualPosition", $.Int64); 
    $.ImplementInterfaces(
      /* 0 */ $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Drawing2D.BrushType */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.BrushType", false, {
    SolidColor: 0, 
    HatchFill: 1, 
    TextureFill: 2, 
    PathGradient: 3, 
    LinearGradient: 4
  }, false
);

/* enum System.Drawing.Drawing2D.CustomLineCapType */ 

JSIL.MakeEnum(
  "System.Drawing.Drawing2D.CustomLineCapType", false, {
    Default: 0, 
    AdjustableArrowCap: 1
  }, false
);

/* class System.Drawing.Internal.GPPOINT */ 

(function GPPOINT$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.GPPOINT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Point"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToPoint", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.Field({Static:false, Public:false}, "X", $.Int32); 
    $.Field({Static:false, Public:false}, "Y", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.GPPOINTF */ 

(function GPPOINTF$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.GPPOINTF", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Point"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToPoint", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.PointF"))
    );

    $.Field({Static:false, Public:false}, "X", $.Single); 
    $.Field({Static:false, Public:false}, "Y", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.Internal.GPRECT */ 

(function GPRECT$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.Internal.GPRECT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToRectangle", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.Rectangle"))
    );

    $.Field({Static:false, Public:false}, "X", $.Int32); 
    $.Field({Static:false, Public:false}, "Y", $.Int32); 
    $.Field({Static:false, Public:false}, "Width", $.Int32); 
    $.Field({Static:false, Public:false}, "Height", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Drawing.Internal.GPRECTF */ 

(function GPRECTF$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "System.Drawing.Internal.GPRECTF", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SizeF", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.SizeF"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToRectangleF", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.Field({Static:false, Public:false}, "X", $.Single); 
    $.Field({Static:false, Public:false}, "Y", $.Single); 
    $.Field({Static:false, Public:false}, "Width", $.Single); 
    $.Field({Static:false, Public:false}, "Height", $.Single); 
    $.Property({Static:false, Public:false}, "SizeF", $asm0B.TypeRef("System.Drawing.SizeF"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.GPStream */ 

(function GPStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.GPStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ActualizeVirtualPosition", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature($.Int64, [
          $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream"), $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EFail", 
      new JSIL.MethodSignature($asm06.TypeRef("System.Runtime.InteropServices.ExternalException"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataStream", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LockRegion", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Revert", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSize", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Stat", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnlockRegion", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature($.Int32, [$asm06.TypeRef("System.IntPtr"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.Field({Static:false, Public:false}, "dataStream", $asm06.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "virtualPosition", $.Int64); 
    $.ImplementInterfaces(
      /* 0 */ $asm0B.TypeRef("System.Drawing.UnsafeNativeMethods+IStream")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.GPStream+STATSTG */ 

(function STATSTG$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.GPStream+STATSTG", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "pwcsName", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "type", $.Int32); 
    $.Field({Static:false, Public:true }, "cbSize", $.Int64); 
    $.Field({Static:false, Public:true }, "mtime", $.Int64); 
    $.Field({Static:false, Public:true }, "ctime", $.Int64); 
    $.Field({Static:false, Public:true }, "atime", $.Int64); 
    $.Field({Static:false, Public:true }, "grfMode", $.Int32); 
    $.Field({Static:false, Public:true }, "grfLocksSupported", $.Int32); 
    $.Field({Static:false, Public:true }, "clsid_data1", $.Int32); 
    $.Field({Static:false, Public:true }, "clsid_data2", $.Int16); 
    $.Field({Static:false, Public:true }, "clsid_data3", $.Int16); 
    $.Field({Static:false, Public:true }, "clsid_b0", $.Byte); 
    $.Field({Static:false, Public:true }, "clsid_b1", $.Byte); 
    $.Field({Static:false, Public:true }, "clsid_b2", $.Byte); 
    $.Field({Static:false, Public:true }, "clsid_b3", $.Byte); 
    $.Field({Static:false, Public:true }, "clsid_b4", $.Byte); 
    $.Field({Static:false, Public:true }, "clsid_b5", $.Byte); 
    $.Field({Static:false, Public:true }, "clsid_b6", $.Byte); 
    $.Field({Static:false, Public:true }, "clsid_b7", $.Byte); 
    $.Field({Static:false, Public:true }, "grfStateBits", $.Int32); 
    $.Field({Static:false, Public:true }, "reserved", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Imaging.ImageCodecInfoPrivate */ 

(function ImageCodecInfoPrivate$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Imaging.ImageCodecInfoPrivate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Clsid", $asm06.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:true }, "FormatID", $asm06.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:true }, "CodecName", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "DllName", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "FormatDescription", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "FilenameExtension", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "MimeType", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "Flags", $.Int32); 
    $.Field({Static:false, Public:true }, "Version", $.Int32); 
    $.Field({Static:false, Public:true }, "SigCount", $.Int32); 
    $.Field({Static:false, Public:true }, "SigSize", $.Int32); 
    $.Field({Static:false, Public:true }, "SigPattern", $asm06.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "SigMask", $asm06.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.Internal.SystemColorTracker */ 

(function SystemColorTracker$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.Internal.SystemColorTracker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.Drawing.Internal.ISystemColorTracker"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanOutBrokenLinks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GarbageCollectList", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "OnUserPreferenceChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("Microsoft.Win32.UserPreferenceChangedEventArgs")])
    );

    $.Field({Static:true , Public:false}, "INITIAL_SIZE", $.Int32, 200); 
    $.Field({Static:true , Public:false}, "WARNING_SIZE", $.Int32, 100000); 
    $.Field({Static:true , Public:false}, "EXPAND_THRESHOLD", $.Single, 0.75); 
    $.Field({Static:true , Public:false}, "EXPAND_FACTOR", $.Int32, 2); 
    $.Field({Static:true , Public:false}, "list", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.WeakReference")]), function ($pi) {
        return JSIL.Array.New($asm06.System.WeakReference, $pi.INITIAL_SIZE);
      }); 
    $.Field({Static:true , Public:false}, "count", $.Int32, 0); 
    $.Field({Static:true , Public:false}, "addedTracker", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Drawing.Printing.ModeField */ 

JSIL.MakeEnum(
  "System.Drawing.Printing.ModeField", false, {
    Orientation: 0, 
    PaperSize: 1, 
    PaperLength: 2, 
    PaperWidth: 3, 
    Copies: 4, 
    DefaultSource: 5, 
    PrintQuality: 6, 
    Color: 7, 
    Duplex: 8, 
    YResolution: 9, 
    TTOption: 10, 
    Collate: 11
  }, false
);

/* class System.Drawing.PrintPreviewGraphics */ 

(function PrintPreviewGraphics$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.PrintPreviewGraphics", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Drawing.Printing.PrintDocument"), $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VisibleClipBounds", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Drawing.RectangleF"))
    );

    $.Field({Static:false, Public:false}, "printPageEventArgs", $asm0B.TypeRef("System.Drawing.Printing.PrintPageEventArgs")); 
    $.Field({Static:false, Public:false}, "printDocument", $asm0B.TypeRef("System.Drawing.Printing.PrintDocument")); 
    $.Property({Static:false, Public:true }, "VisibleClipBounds", $asm0B.TypeRef("System.Drawing.RectangleF"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("FXAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Title", "System.Drawing.dll"); 
    $.Constant({Static:true , Public:false}, "Description", "System.Drawing.dll"); 
    $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Drawing.dll"); 
    $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
    $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
    $.Constant({Static:true , Public:false}, "InformationalVersion", "4.0.30319.18408"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", "30319"); 
    $.Constant({Static:true , Public:false}, "BuildRevisionStr", "18408"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumber", 30319); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", "7cec85d7bea7798e"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", "7cec85d7bea7798e"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "System", "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemCore", "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemNumerics", "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemNetHttp", "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWebExtensions", "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRouting", "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "WindowsBase", "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Drawing.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Drawing.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.All]; });

})();

/* class System.Drawing.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Drawing.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm06.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm06.System.AttributeTargets.All]; });

})();

/* class System.Drawing.SR */ 

(function SR$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "System.Drawing.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm06.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "CantTellPrinterName", "CantTellPrinterName"); 
    $.Constant({Static:true , Public:false}, "CantChangeImmutableObjects", "CantChangeImmutableObjects"); 
    $.Constant({Static:true , Public:false}, "CantMakeIconTransparent", "CantMakeIconTransparent"); 
    $.Constant({Static:true , Public:false}, "ColorNotSystemColor", "ColorNotSystemColor"); 
    $.Constant({Static:true , Public:false}, "DotNET_ComponentType", "DotNET_ComponentType"); 
    $.Constant({Static:true , Public:false}, "GdiplusAborted", "GdiplusAborted"); 
    $.Constant({Static:true , Public:false}, "GdiplusAccessDenied", "GdiplusAccessDenied"); 
    $.Constant({Static:true , Public:false}, "GdiplusCannotCreateGraphicsFromIndexedPixelFormat", "GdiplusCannotCreateGraphicsFromIndexedPixelFormat"); 
    $.Constant({Static:true , Public:false}, "GdiplusCannotSetPixelFromIndexedPixelFormat", "GdiplusCannotSetPixelFromIndexedPixelFormat"); 
    $.Constant({Static:true , Public:false}, "GdiplusDestPointsInvalidParallelogram", "GdiplusDestPointsInvalidParallelogram"); 
    $.Constant({Static:true , Public:false}, "GdiplusDestPointsInvalidLength", "GdiplusDestPointsInvalidLength"); 
    $.Constant({Static:true , Public:false}, "GdiplusFileNotFound", "GdiplusFileNotFound"); 
    $.Constant({Static:true , Public:false}, "GdiplusFontFamilyNotFound", "GdiplusFontFamilyNotFound"); 
    $.Constant({Static:true , Public:false}, "GdiplusFontStyleNotFound", "GdiplusFontStyleNotFound"); 
    $.Constant({Static:true , Public:false}, "GdiplusGenericError", "GdiplusGenericError"); 
    $.Constant({Static:true , Public:false}, "GdiplusInsufficientBuffer", "GdiplusInsufficientBuffer"); 
    $.Constant({Static:true , Public:false}, "GdiplusInvalidParameter", "GdiplusInvalidParameter"); 
    $.Constant({Static:true , Public:false}, "GdiplusInvalidRectangle", "GdiplusInvalidRectangle"); 
    $.Constant({Static:true , Public:false}, "GdiplusInvalidSize", "GdiplusInvalidSize"); 
    $.Constant({Static:true , Public:false}, "GdiplusOutOfMemory", "GdiplusOutOfMemory"); 
    $.Constant({Static:true , Public:false}, "GdiplusNotImplemented", "GdiplusNotImplemented"); 
    $.Constant({Static:true , Public:false}, "GdiplusNotInitialized", "GdiplusNotInitialized"); 
    $.Constant({Static:true , Public:false}, "GdiplusNotTrueTypeFont", "GdiplusNotTrueTypeFont"); 
    $.Constant({Static:true , Public:false}, "GdiplusNotTrueTypeFont_NoName", "GdiplusNotTrueTypeFont_NoName"); 
    $.Constant({Static:true , Public:false}, "GdiplusObjectBusy", "GdiplusObjectBusy"); 
    $.Constant({Static:true , Public:false}, "GdiplusOverflow", "GdiplusOverflow"); 
    $.Constant({Static:true , Public:false}, "GdiplusPropertyNotFoundError", "GdiplusPropertyNotFoundError"); 
    $.Constant({Static:true , Public:false}, "GdiplusPropertyNotSupportedError", "GdiplusPropertyNotSupportedError"); 
    $.Constant({Static:true , Public:false}, "GdiplusUnknown", "GdiplusUnknown"); 
    $.Constant({Static:true , Public:false}, "GdiplusUnknownImageFormat", "GdiplusUnknownImageFormat"); 
    $.Constant({Static:true , Public:false}, "GdiplusUnsupportedGdiplusVersion", "GdiplusUnsupportedGdiplusVersion"); 
    $.Constant({Static:true , Public:false}, "GdiplusWrongState", "GdiplusWrongState"); 
    $.Constant({Static:true , Public:false}, "GlobalAssemblyCache", "GlobalAssemblyCache"); 
    $.Constant({Static:true , Public:false}, "GraphicsBufferCurrentlyBusy", "GraphicsBufferCurrentlyBusy"); 
    $.Constant({Static:true , Public:false}, "GraphicsBufferQueryFail", "GraphicsBufferQueryFail"); 
    $.Constant({Static:true , Public:false}, "ToolboxItemLocked", "ToolboxItemLocked"); 
    $.Constant({Static:true , Public:false}, "ToolboxItemInvalidPropertyType", "ToolboxItemInvalidPropertyType"); 
    $.Constant({Static:true , Public:false}, "ToolboxItemValueNotSerializable", "ToolboxItemValueNotSerializable"); 
    $.Constant({Static:true , Public:false}, "ToolboxItemInvalidKey", "ToolboxItemInvalidKey"); 
    $.Constant({Static:true , Public:false}, "IllegalState", "IllegalState"); 
    $.Constant({Static:true , Public:false}, "InterpolationColorsColorBlendNotSet", "InterpolationColorsColorBlendNotSet"); 
    $.Constant({Static:true , Public:false}, "InterpolationColorsCommon", "InterpolationColorsCommon"); 
    $.Constant({Static:true , Public:false}, "InterpolationColorsInvalidColorBlendObject", "InterpolationColorsInvalidColorBlendObject"); 
    $.Constant({Static:true , Public:false}, "InterpolationColorsInvalidStartPosition", "InterpolationColorsInvalidStartPosition"); 
    $.Constant({Static:true , Public:false}, "InterpolationColorsInvalidEndPosition", "InterpolationColorsInvalidEndPosition"); 
    $.Constant({Static:true , Public:false}, "InterpolationColorsLength", "InterpolationColorsLength"); 
    $.Constant({Static:true , Public:false}, "InterpolationColorsLengthsDiffer", "InterpolationColorsLengthsDiffer"); 
    $.Constant({Static:true , Public:false}, "InvalidArgument", "InvalidArgument"); 
    $.Constant({Static:true , Public:false}, "InvalidBoundArgument", "InvalidBoundArgument"); 
    $.Constant({Static:true , Public:false}, "InvalidClassName", "InvalidClassName"); 
    $.Constant({Static:true , Public:false}, "InvalidColor", "InvalidColor"); 
    $.Constant({Static:true , Public:false}, "InvalidDashPattern", "InvalidDashPattern"); 
    $.Constant({Static:true , Public:false}, "InvalidEx2BoundArgument", "InvalidEx2BoundArgument"); 
    $.Constant({Static:true , Public:false}, "InvalidFrame", "InvalidFrame"); 
    $.Constant({Static:true , Public:false}, "InvalidGDIHandle", "InvalidGDIHandle"); 
    $.Constant({Static:true , Public:false}, "InvalidImage", "InvalidImage"); 
    $.Constant({Static:true , Public:false}, "InvalidLowBoundArgumentEx", "InvalidLowBoundArgumentEx"); 
    $.Constant({Static:true , Public:false}, "InvalidPermissionLevel", "InvalidPermissionLevel"); 
    $.Constant({Static:true , Public:false}, "InvalidPermissionState", "InvalidPermissionState"); 
    $.Constant({Static:true , Public:false}, "InvalidPictureType", "InvalidPictureType"); 
    $.Constant({Static:true , Public:false}, "InvalidPrinterException_InvalidPrinter", "InvalidPrinterException_InvalidPrinter"); 
    $.Constant({Static:true , Public:false}, "InvalidPrinterException_NoDefaultPrinter", "InvalidPrinterException_NoDefaultPrinter"); 
    $.Constant({Static:true , Public:false}, "InvalidPrinterHandle", "InvalidPrinterHandle"); 
    $.Constant({Static:true , Public:false}, "ValidRangeX", "ValidRangeX"); 
    $.Constant({Static:true , Public:false}, "ValidRangeY", "ValidRangeY"); 
    $.Constant({Static:true , Public:false}, "NativeHandle0", "NativeHandle0"); 
    $.Constant({Static:true , Public:false}, "NoDefaultPrinter", "NoDefaultPrinter"); 
    $.Constant({Static:true , Public:false}, "NotImplemented", "NotImplemented"); 
    $.Constant({Static:true , Public:false}, "PDOCbeginPrintDescr", "PDOCbeginPrintDescr"); 
    $.Constant({Static:true , Public:false}, "PDOCdocumentNameDescr", "PDOCdocumentNameDescr"); 
    $.Constant({Static:true , Public:false}, "PDOCdocumentPageSettingsDescr", "PDOCdocumentPageSettingsDescr"); 
    $.Constant({Static:true , Public:false}, "PDOCendPrintDescr", "PDOCendPrintDescr"); 
    $.Constant({Static:true , Public:false}, "PDOCoriginAtMarginsDescr", "PDOCoriginAtMarginsDescr"); 
    $.Constant({Static:true , Public:false}, "PDOCprintControllerDescr", "PDOCprintControllerDescr"); 
    $.Constant({Static:true , Public:false}, "PDOCprintPageDescr", "PDOCprintPageDescr"); 
    $.Constant({Static:true , Public:false}, "PDOCprinterSettingsDescr", "PDOCprinterSettingsDescr"); 
    $.Constant({Static:true , Public:false}, "PDOCqueryPageSettingsDescr", "PDOCqueryPageSettingsDescr"); 
    $.Constant({Static:true , Public:false}, "PrintDocumentDesc", "PrintDocumentDesc"); 
    $.Constant({Static:true , Public:false}, "PrintingPermissionBadXml", "PrintingPermissionBadXml"); 
    $.Constant({Static:true , Public:false}, "PrintingPermissionAttributeInvalidPermissionLevel", "PrintingPermissionAttributeInvalidPermissionLevel"); 
    $.Constant({Static:true , Public:false}, "PropertyValueInvalidEntry", "PropertyValueInvalidEntry"); 
    $.Constant({Static:true , Public:false}, "PSizeNotCustom", "PSizeNotCustom"); 
    $.Constant({Static:true , Public:false}, "ResourceNotFound", "ResourceNotFound"); 
    $.Constant({Static:true , Public:false}, "TargetNotPrintingPermission", "TargetNotPrintingPermission"); 
    $.Constant({Static:true , Public:false}, "TextParseFailedFormat", "TextParseFailedFormat"); 
    $.Constant({Static:true , Public:false}, "TriStateCompareError", "TriStateCompareError"); 
    $.Constant({Static:true , Public:false}, "toStringIcon", "toStringIcon"); 
    $.Constant({Static:true , Public:false}, "toStringNone", "toStringNone"); 
    $.Constant({Static:true , Public:false}, "DCTypeInvalid", "DCTypeInvalid"); 
    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm06.TypeRef("System.Resources.ResourceManager")); 
    $.Property({Static:true , Public:false}, "Culture", $asm06.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm06.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

